* Workload
** gcc
#+BEGIN_SRC C++
time \
/afs/cs.wisc.edu/s/gcc-4.6.0/i386_rhel5/libexec/gcc/i686-pc-linux-gnu/4.6.0/cc1
200.i

time LD_PRELOAD="./$AGENT_NAME" \
/afs/cs.wisc.edu/s/gcc-4.6.0/i386_rhel5/libexec/gcc/i686-pc-linux-gnu/4.6.0/cc1
200.i
#+END_SRC
** tight loop
#+BEGIN_SRC C++
void foo() {
}

int main(int argc, char *argv[]) {
  int i;
  for (i = 0; i < 1000000000; i++) {
    foo();
    foo();
    foo();
    foo();
    foo();
    foo();
    foo();
    foo();
    foo();
    foo();
  }
  return 0;
}
#+END_SRC
Instructions in an iteration:
#+BEGIN_SRC C++
 8048393:       e8 dc ff ff ff          call   8048374 <foo>
 8048398:       e8 d7 ff ff ff          call   8048374 <foo>
 804839d:       e8 d2 ff ff ff          call   8048374 <foo>
 80483a2:       e8 cd ff ff ff          call   8048374 <foo>
 80483a7:       e8 c8 ff ff ff          call   8048374 <foo>
 80483ac:       e8 c3 ff ff ff          call   8048374 <foo>
 80483b1:       e8 be ff ff ff          call   8048374 <foo>
 80483b6:       e8 b9 ff ff ff          call   8048374 <foo>
 80483bb:       e8 b4 ff ff ff          call   8048374 <foo>
 80483c0:       e8 af ff ff ff          call   8048374 <foo>
 80483c5:       83 45 f8 01             addl   $0x1,0xfffffff8(%ebp)
 80483c9:       81 7d f8 ff c9 9a 3b    cmpl   $0x3b9ac9ff,0xfffffff8(%ebp)
 80483d0:       7e c1                   jle    8048393 <main+0x1a>
#+END_SRC
* 32-bit x86
** Code generated per function call
23 bytes, 7 insns
#+BEGIN_SRC C++
    1b030000( 1 bytes): pushad EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, ESP | 60 
    1b030001( 5 bytes): push 18932498, ESP        | 68 98 24 93 18 
    1b030006( 5 bytes): call 5c8470               | e8 65 84 59 e5 
    1b03000b( 1 bytes): pop EAX, ESP              | 58 
    1b03000c( 1 bytes): popad EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, ESP | 61 
    1b03000d( 5 bytes): call 8727880              | e8 6e 78 6f ed 
    1b030012( 5 bytes): jmp 84beb85               | e9 6e eb 48 ed 
#+END_SRC
** Overhead breakdown
*** Call relocated function + jump back
    1b03000d( 5 bytes): call 8727880              | e8 6e 78 6f ed 
    1b030012( 5 bytes): jmp 84beb85               | e9 6e eb 48 ed 

*** Save/Restore context + relocated func + jump back
    1b030000( 1 bytes): pushad EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, ESP | 60 
    1b03000c( 1 bytes): popad EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, ESP | 61 
    1b03000d( 5 bytes): call 8727880              | e8 6e 78 6f ed 
    1b030012( 5 bytes): jmp 84beb85               | e9 6e eb 48 ed 

*** Save/Restore context + call empty payload + relocated func + jump back
    1b030000( 1 bytes): pushad EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, ESP | 60 
    1b030001( 5 bytes): push 18932498, ESP        | 68 98 24 93 18 
    1b030006( 5 bytes): call 5c8470               | e8 65 84 59 e5 
    1b03000b( 1 bytes): pop EAX, ESP              | 58 
    1b03000c( 1 bytes): popad EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, ESP | 61 
    1b03000d( 5 bytes): call 8727880              | e8 6e 78 6f ed 
    1b030012( 5 bytes): jmp 84beb85               | e9 6e eb 48 ed 

*** Summary
Tight loop (Parsing: 2.73s, instrumentation: 0.089s)
|          | uninst | relocated + jump | context + relocated + jump | context + payload + relocated + jump |
| Time     | 14.41s | 141.608s         | 175.911s                   | 206.724s                             |
| Slowdown | 1      | 9.872            | 12.207                     | 14.345                               |

Gcc (Parsing: 13.7, instrumentation: 3.05s)
|          | uninst  | relocated + jump | context + relocated + jump | context + payload + relocated + jump |
| Time     | 86.726s | -                | -                          | 129.266s                             |
| Slowdown | 1       | -                | -                          | 1.49                                 |

* 64-bit x86
** Code generated per function call
19 insns, 60 bytes

    37315000( 1 bytes): push RDI, RSP             | 57 
    37315001( 1 bytes): push RSI, RSP             | 56 
    37315002( 1 bytes): push RDX, RSP             | 52 
    37315003( 1 bytes): push RCX, RSP             | 51 
    37315004( 2 bytes): push R8, RSP              | 41 50 
    37315006( 2 bytes): push R9, RSP              | 41 51 
    37315008( 1 bytes): push RAX, RSP             | 50 
    37315009(10 bytes): mov RDI, 37306fe0         | 48 bf e0 6f 30 37 00 00 00 00 
    37315013(10 bytes): mov RAX, 5791fa20         | 48 b8 20 fa 91 57 5b 2b 00 00 
    3731501d( 2 bytes): call EAX                  | ff d0 
    3731501f( 1 bytes): pop RAX, RSP              | 58 
    37315020( 2 bytes): pop R9, RSP               | 41 59 
    37315022( 2 bytes): pop R8, RSP               | 41 58 
    37315024( 1 bytes): pop RCX, RSP              | 59 
    37315025( 1 bytes): pop RDX, RSP              | 5a 
    37315026( 1 bytes): pop RSI, RSP              | 5e 
    37315027( 1 bytes): pop RDI, RSP              | 5f 
    37315028( 5 bytes): call ac85e0               | e8 b3 35 7b c9 
    3731502d( 5 bytes): jmp acc9c7                | e9 95 79 7b c9 

** Overhead breakdown
*** Call relocated function + jump back
    37315028( 5 bytes): call ac85e0               | e8 b3 35 7b c9 
    3731502d( 5 bytes): jmp acc9c7                | e9 95 79 7b c9 

*** save/resotre context + relocated func + jump back
    37315000( 1 bytes): push RDI, RSP             | 57 
    37315001( 1 bytes): push RSI, RSP             | 56 
    37315002( 1 bytes): push RDX, RSP             | 52 
    37315003( 1 bytes): push RCX, RSP             | 51 
    37315004( 2 bytes): push R8, RSP              | 41 50 
    37315006( 2 bytes): push R9, RSP              | 41 51 
    37315008( 1 bytes): push RAX, RSP             | 50 
    3731501f( 1 bytes): pop RAX, RSP              | 58 
    37315020( 2 bytes): pop R9, RSP               | 41 59 
    37315022( 2 bytes): pop R8, RSP               | 41 58 
    37315024( 1 bytes): pop RCX, RSP              | 59 
    37315025( 1 bytes): pop RDX, RSP              | 5a 
    37315026( 1 bytes): pop RSI, RSP              | 5e 
    37315027( 1 bytes): pop RDI, RSP              | 5f 
    37315028( 5 bytes): call ac85e0               | e8 b3 35 7b c9 
    3731502d( 5 bytes): jmp acc9c7                | e9 95 79 7b c9 

*** Save/Restore context + call empty payload + relocated func + jump back
    37315000( 1 bytes): push RDI, RSP             | 57 
    37315001( 1 bytes): push RSI, RSP             | 56 
    37315002( 1 bytes): push RDX, RSP             | 52 
    37315003( 1 bytes): push RCX, RSP             | 51 
    37315004( 2 bytes): push R8, RSP              | 41 50 
    37315006( 2 bytes): push R9, RSP              | 41 51 
    37315008( 1 bytes): push RAX, RSP             | 50 
    37315009(10 bytes): mov RDI, 37306fe0         | 48 bf e0 6f 30 37 00 00 00 00 
    37315013(10 bytes): mov RAX, 5791fa20         | 48 b8 20 fa 91 57 5b 2b 00 00 
    3731501d( 2 bytes): call EAX                  | ff d0 
    3731501f( 1 bytes): pop RAX, RSP              | 58 
    37315020( 2 bytes): pop R9, RSP               | 41 59 
    37315022( 2 bytes): pop R8, RSP               | 41 58 
    37315024( 1 bytes): pop RCX, RSP              | 59 
    37315025( 1 bytes): pop RDX, RSP              | 5a 
    37315026( 1 bytes): pop RSI, RSP              | 5e 
    37315027( 1 bytes): pop RDI, RSP              | 5f 
    37315028( 5 bytes): call ac85e0               | e8 b3 35 7b c9 
    3731502d( 5 bytes): jmp acc9c7                | e9 95 79 7b c9 

*** Summary
Tight loop (parsing time: 2.17s, instrumentation time: 0.086s)
|          | uninst  | relocated + jump | context + relocated + jump | context + payload + relocated + jump |
| Time     | 15.713s | 121.555s         | 136.656s                   | 154.693s                             |
| Slowdown | 1       | 7.735            | 8.697                      | 9.844                                |

Gcc (parsing time 11.93s, instrumentation: 3.05s)
|          | uninst   | relocated + jump | context + relocated + jump | context + payload + relocated + jump |
| Time     | 104.931s | -                | -                          | 120.5511s                            |
| Slowdown | 1        | -                | -                          | 1.148                                |
