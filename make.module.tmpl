
INJECTOR   = Injector
IJAGENT    = libijagent.so
AGENT      = libagent.so

all: $(INJECTOR) $(IJAGENT) $(AGENT)

GCC        = gcc
GXX        = g++
RM         = rm -f

#======================================
# Utils
#======================================

UTILS_SRCS    += $(UTILS_DIR)/SpUtils.C
UTILS_OBJS    += $(notdir $(UTILS_SRCS:%.C=%.o))
$(UTILS_OBJS): %.o : $(UTILS_DIR)/%.C
	@echo Compiling $*.o
	@$(GCC) -c -o $@ $(COMMON_IFLAGS) $(COMMON_FLAGS) $(UTILS_DIR)/$*.C

#======================================
# Injector
#======================================

#---------------- 
# injector objs
#---------------- 
IJ_SRCS    += $(IJ_DIR)/SpInjector.C
IJ_OBJS    += $(notdir $(IJ_SRCS:%.C=%.o))
IJ_DEP      = .IJ_DEPENDS

$(shell if test -f $(IJ_DEP); then true; else \
$(GXX) -MM $(IJ_IFLAGS) $(IJ_FLAGS) $(IJ_SRCS) > $(IJ_DEP); \
fi);\
include $(IJ_DEP)

$(IJ_OBJS): %.o : $(IJ_DIR)/%.C
	@echo Compiling $*.o
	@$(GXX) -c -o $@ $(IJ_IFLAGS) $(IJ_FLAGS) $(IJ_DIR)/$*.C

#---------------- 
# Injector Exe
#---------------- 
IJMAIN_SRCS    += $(IJ_DIR)/SpInjectorMain.C
IJMAIN_OBJS    += $(notdir $(IJMAIN_SRCS:%.C=%.o))
IJMAIN_DEP      = .IJMAIN_DEPENDS

$(shell if test -f $(IJMAIN_DEP); then true; else \
$(GXX) -MM $(IJ_IFLAGS) $(IJ_FLAGS) $(IJMAIN_SRCS) > $(IJMAIN_DEP); \
fi);\
include $(IJMAIN_DEP)

$(IJMAIN_OBJS): %.o : $(IJ_DIR)/%.C
	@echo Compiling $*.o
	@$(GXX) -c -o $@ $(IJ_IFLAGS) $(IJ_FLAGS) $(IJ_DIR)/$*.C
$(INJECTOR): $(IJMAIN_OBJS) $(IJ_OBJS) $(UTILS_OBJS)
	@echo Linking $@
	@$(GXX) -o $@ $(IJMAIN_OBJS) $(IJ_OBJS) $(UTILS_OBJS) $(IJMAIN_LDFLAGS) $(IJ_LDFLAGS)

#---------------- 
# libijagent.so
#---------------- 
IJA_SRCS   += $(IJ_DIR)/IjAgent.c
IJA_OBJS   += $(notdir $(IJA_SRCS:%.c=%.o))

$(IJA_OBJS): %.o : $(IJ_DIR)/%.c
	@echo Compiling $*.o
	@$(GCC) -c -o $@ $(IJA_IFLAGS) $(IJA_FLAGS) $(IJ_DIR)/$*.c
$(IJAGENT): $(IJA_OBJS)
	@echo Linking $@
	@$(GCC) -o $@ $(IJA_OBJS) $(IJA_LDFLAGS)

#======================================
# Agent
#======================================
AG_SRCS    += $(AG_DIR)/SpAgent.C \
              $(AG_DIR)/SpParser.C \
              $(AG_DIR)/SpEvent.C \
              $(AG_DIR)/SpPropeller.C \
              $(AG_DIR)/SpPayload.C \
              $(AG_DIR)/SpContext.C \
              $(AG_DIR)/SpInstrumenter.C \
              $(AG_DIR)/SpAddrSpace.C \
              $(AG_DIR)/SpSnippet.C \
              $(AG_DIR)/SpIpcMgr.C \

AG_OBJS    += $(notdir $(AG_SRCS:%.C=%.o))

AG_DEP  = .AG_DEPENDS
$(shell if test -f $(AG_DEP); then true; else \
$(GXX) -MM $(AG_IFLAGS) $(AG_FLAGS) $(AG_SRCS) > $(AG_DEP);\
fi);\
include $(AG_DEP)

$(AG_OBJS): %.o :$(AG_DIR)/%.C
	@echo Compiling $*.o
	@$(GXX) -c -o $@ $(AG_IFLAGS) $(AG_FLAGS) $(AG_DIR)/$*.C

DYN_OBJS    += $(wildcard $(DYNINST_DIR)/common/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/instructionAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/parseAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/patchAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/proccontrol/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/stackwalk/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/symtabAPI/$(PLATFORM)/*.o)

$(AGENT): $(AG_OBJS)  $(IJ_OBJS) $(UTILS_OBJS)
	@echo Linking $@
	@$(GXX) -o $@  $(AG_OBJS) $(IJ_OBJS) $(UTILS_OBJS) $(AG_LDFLAGS) $(IJ_LDFLAGS) -shared
#	ar rs $@  $(AG_OBJS) $(IJ_OBJS) $(UTILS_OBJS) $(AG_LDFLAGS) $(IJ_LDFLAGS)


#=================================================
# build dyninst
#=================================================
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/common/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/instructionAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/parseAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/patchAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/proccontrol/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/stackwalk/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/symtabAPI/$(PLATFORM)/*.o)

build_dyninst: $(DYN_OBJS)
	ar rs dyninst.a $(DYN_OBJS)

							 
#=================================================
# depend
#=================================================
depend:
	@echo "building dependency"
	@make IJ_DEPS
	@make AG_DEPS

#=================================================
# clean
#=================================================
clean_objs:
	$(RM) *.o

clean:
	@$(RM) -f $(INJECTOR) $(AGENT) $(IJAGENT) *.o
	@$(RM) -f $(IJ_DEP) $(AG_DEP) $(IJMAIN_DEP)
