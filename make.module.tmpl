
INJECTOR   = injector
IJAGENT    = libijagent.so
AGENT      = libagent.a

all: injector_exe agent_lib msg

GCC        = gcc
GXX        = g++
RM         = rm -f

#======================================
# Utils
#======================================

UTILS_SRCS    += $(UTILS_DIR)/utils.cc
UTILS_OBJS    += $(notdir $(UTILS_SRCS:%.cc=%.o))
$(UTILS_OBJS): %.o : $(UTILS_DIR)/%.cc
	@echo Compiling $*.o
	@$(GCC) -c -o $@ $(COMMON_IFLAGS) $(COMMON_FLAGS) $(UTILS_DIR)/$*.cc

#======================================
# Injector
#======================================

injector_exe: $(INJECTOR) $(IJAGENT)

#---------------- 
# injector objs
#---------------- 
IJ_SRCS    += $(IJ_DIR)/injector.cc
IJ_OBJS    += $(notdir $(IJ_SRCS:%.cc=%.o))
IJ_DEP      = .IJ_DEPENDS

$(shell if test -f $(IJ_DEP); then true; else \
$(GXX) -MM $(IJ_IFLAGS) $(IJ_FLAGS) $(IJ_SRCS) > $(IJ_DEP); \
fi);

include $(IJ_DEP)

$(IJ_OBJS): %.o : $(IJ_DIR)/%.cc
	@echo Compiling $*.o
	@$(GXX) -c -o $@ $(IJ_IFLAGS) $(IJ_FLAGS) $(IJ_DIR)/$*.cc

#---------------- 
# Injector Exe
#---------------- 
IJMAIN_SRCS    += $(IJ_DIR)/injector_main.cc
IJMAIN_OBJS    += $(notdir $(IJMAIN_SRCS:%.cc=%.o))
IJMAIN_DEP      = .IJMAIN_DEPENDS

$(shell if test -f $(IJMAIN_DEP); then true; else \
$(GXX) -MM $(IJ_IFLAGS) $(IJ_FLAGS) $(IJMAIN_SRCS) > $(IJMAIN_DEP); \
fi);

include $(IJMAIN_DEP)

$(IJMAIN_OBJS): %.o : $(IJ_DIR)/%.cc
	@echo Compiling $*.o
	@$(GXX) -c -o $@ $(IJ_IFLAGS) $(IJ_FLAGS) $(IJ_DIR)/$*.cc

$(INJECTOR): $(IJMAIN_OBJS) $(IJ_OBJS) $(UTILS_OBJS)
	@echo Linking $@
	@$(GXX) -o $@ $(IJMAIN_OBJS) $(IJ_OBJS) $(UTILS_OBJS) $(IJ_LDFLAGS)

#---------------- 
# libijagent.so
#---------------- 
IJA_SRCS   += $(IJ_DIR)/ijagent.c
IJA_OBJS   += $(notdir $(IJA_SRCS:%.c=%.o))

$(IJA_OBJS): %.o : $(IJ_DIR)/%.c
	@echo Compiling $*.o
	@$(GCC) -c -o $@ $(IJA_IFLAGS) $(IJA_FLAGS) $(IJ_DIR)/$*.c
$(IJAGENT): $(IJA_OBJS)
	@echo Linking $@
	@$(GCC) -o $@ $(IJA_OBJS) $(IJA_LDFLAGS)

#======================================
# Agent
#======================================
AG_SRCS    += $(AG_DIR)/agent.cc \
              $(AG_DIR)/parser.cc \
              $(AG_DIR)/event.cc \
              $(AG_DIR)/propeller.cc \
              $(AG_DIR)/payload.cc \
              $(AG_DIR)/context.cc \
              $(AG_DIR)/instrumenter.cc \
              $(AG_DIR)/addr_space.cc \
              $(AG_DIR)/snippet.cc \
              $(AG_DIR)/ipc_mgr.cc \
              $(AG_DIR)/object.cc \
              $(AG_DIR)/point.cc \
              $(AG_DIR)/maker.cc \
              $(AG_DIR)/cfg.cc \
              $(AG_DIR)/trap_worker_impl.cc \
              $(AG_DIR)/callinsn_worker_impl.cc \
              $(AG_DIR)/callblk_worker_impl.cc \
              $(AG_DIR)/spring_worker_impl.cc \

AG_OBJS    += $(notdir $(AG_SRCS:%.cc=%.o))

AG_DEP  = .AG_DEPENDS
$(shell if test -f $(AG_DEP); then true; else \
$(GXX) -MM $(AG_IFLAGS) $(AG_FLAGS) $(AG_SRCS) > $(AG_DEP);\
fi);

include $(AG_DEP)

agent_lib: $(AGENT)

$(AG_OBJS): %.o :$(AG_DIR)/%.cc
	@echo Compiling $*.o
	@$(GXX) -c -o $@ $(AG_IFLAGS) $(AG_FLAGS) $(AG_DIR)/$*.cc

$(AGENT): $(AG_OBJS)  $(IJ_OBJS) $(UTILS_OBJS)
	@echo Linking $@
#	@$(GXX) -o $@  $(AG_OBJS) $(IJ_OBJS) $(UTILS_OBJS) $(AG_LDFLAGS) $(IJ_LDFLAGS) -shared
	@ar rs $@  $(AG_OBJS) $(IJ_OBJS) $(UTILS_OBJS)


#=================================================
# build dyninst
#=================================================
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/common/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/instructionAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/parseAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/patchAPI/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/proccontrol/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/stackwalk/$(PLATFORM)/*.o)
DYN_OBJS    += $(wildcard $(DYNINST_DIR)/symtabAPI/$(PLATFORM)/*.o)

build_dyninst: $(DYN_OBJS)
	ar rs dyninst.a $(DYN_OBJS)

							 
#=================================================
# depend
#=================================================
depend:
	@echo "building dependency"
	@make IJ_DEPS
	@make AG_DEPS

#=================================================
# Others
#=================================================
clean_objs:
	$(RM) *.o

clean:
	@$(RM) -f $(INJECTOR) $(AGENT) $(IJAGENT) *.o *.so
	@$(RM) -f $(IJ_DEP) $(AG_DEP) $(IJMAIN_DEP)

msg:
	@echo "========================================================================"
	@echo " Please set the environment variable SP_DIR to -- "
	@echo " $(SP_DIR) "
	@echo "   * In csh : setenv SP_DIR $(SP_DIR)"
	@echo "   * In bash: export SP_DIR=$(SP_DIR)"
	@echo "========================================================================"
