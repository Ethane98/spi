cscope 15 /afs/cs.wisc.edu/p/paradyn/development/wenbin/spi/spi/src/Agent               0000077888
	@SpAddrSpace.C

1 
	~"SpAddrS∑˚.h
"

2 
	~"SpObje˘.h
"

4 
usög
 
	gdt
::
Addªss
;

5 
usög
 
	g•
::
SpAddrS∑˚
;

6 
usög
 
	gph
::
P©chObje˘
;

8 
«me•a˚
 
	g•
 {

12 
	gSpAddrS∑˚
::
SpAddrS∑˚
(Ë: 
ph
::
AddrS∑˚
() {

13 
upd©e_mem_m≠s
();

18 
SpAddrS∑˚
*

19 
	gSpAddrS∑˚
::
¸óã
(
P©chObje˘
* 
obj
) {

20 
as£π
(
obj
);

21 
SpAddrS∑˚
* 
	gªt
 = 
√w
 SpAddrSpace;

22 i‡(!
	gªt
) Ñet;

23 
	gªt
->
öô
(
obj
);

24  
	gªt
;

28 
Addªss


29 
	gSpAddrS∑˚
::
mÆloc
(
P©chObje˘
* 
obj
, 
size_t
 
size
, 
Addªss
 
√¨
) {

30 
Addªss
 
	gbuf
 = 0;

31 
	gbuf
 = (
Addªss
)::
mÆloc
(
size
+ 
gë∑gesize
() -1);

32 i‡(!
	gbuf
)  0;

33 
	gbuf
 = (((
Addªss
)
buf
 + 
gë∑gesize
()-1) & ~(getpagesize()-1));

34  
	gbuf
;

37 
Addªss
 
	gps
 = 
gë∑gesize
();

38 
Addªss
 
	gr_√¨
 = ((
√¨
 + 
ps
 -1) & ~(ps - 1));

39 
Addªss
 
	gr_size
 = ((
size
 + 
ps
 -1) & ~(ps - 1));

40 
	gbuf
 = 
r_√¨
;

42 
•_¥öt
("page size: %d,Çear: %lx,Ñ_near: %lx, size: %d,Ñ_size: %d",

43 
ps
, 
√¨
, 
r_√¨
, 
size
, 
r_size
);

44 * 
	gm
 = 
NULL
;

45 
	gfd
 = -1;

46 !
	gm
 | ()m == -1) {

47 
buf
 -
r_size
;

48 
•_¥öt
("lookög f‹ %lx", 
buf
);

49 
	gm
 = 
mm≠
((*)
buf
,

50 
r_size
,

51 
PROT_WRITE
 | 
PROT_READ
,

52 
MAP_PRIVATE
 | 
MAP_FIXED
 | 
MAP_ANONYMOUS
,

53 
fd
,

56 i‡(!
	gm
)  0;

57 
•_¥öt
("gë buf: %lx", 
m
);

58  (
	gAddªss
)
	gm
;

62 
boﬁ


63 
	gSpAddrS∑˚
::
wrôe
(
P©chObje˘
* 
obj
, 
Addªss
 
to
, Addªs†
‰om
, 
size_t
 
size
) {

64  (
mem˝y
((*)
to
, (*)
‰om
, 
size
) == (*)to);

68 
boﬁ


69 
	gSpAddrS∑˚
::
‰ì
(
P©chObje˘
* 
obj
, 
Addªss
 
‹ig
) {

73 ::
‰ì
((*)
‹ig
);

74  
	gåue
;

78 
boﬁ


79 
	gSpAddrS∑˚
::
£t_ønge_≥rm
(
Addªss
 
a
, 
size_t
 
Àngth
, 
≥rm
) {

80 
boﬁ
 
	gªt
 = 
Ál£
;

87 
	gMemM≠pögs
::
ôî©‹
 
mi
 = 
mem_m≠s_
.
begö
();

88 
	gmi
 !
mem_m≠s_
.
íd
(); mi++) {

89 
Addªss
 
	g°¨t
 = 
mi
->
fú°
;

90 
	gMemM≠pög
& 
	gmm
 = 
mi
->
£c⁄d
;

91 
Addªss
 
	gíd
 = 
mm
.
íd
;

92 
Addªss
 
	gcode_íd
 = 
a
 + 
Àngth
;

93 i‡((
	ga
 >
°¨t
 && 
code_íd
 < 
íd
) ||

94 (
a
 <
°¨t
 && 
code_íd
 >°¨à&& code_íd <
íd
) ||

95 (
a
 >
°¨t
 &&á < 
íd
 && 
code_íd
 >=Énd)) {

97 i‡(
m¥Ÿe˘
((*)
°¨t
, 
íd
 - sèπ, 
≥rm
) < 0) {

98 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

99 
≥º‹
("mprotect");

100  
	gÁl£
;

102 
	gªt
 = 
åue
;

108 i‡(!
	gªt
) {

109 
Addªss
 
	gÆig√d
 = 
a
;

110 
size_t
 
	gpz
 = 
gë∑gesize
();

111 
	gÆig√d
 = (
Addªss
)(((AddªssË
Æig√d
 + 
pz
-1) & ~(pz-1));

112 i‡(
m¥Ÿe˘
((*)
Æig√d
, 
Àngth
, 
≥rm
) < 0) {

113 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

114 
≥º‹
("mprotect");

115  
	gÁl£
;

117 
	gªt
 = 
åue
;

121  
	gªt
;

124 
boﬁ


125 
	gSpAddrS∑˚
::
ª°‹e_ønge_≥rm
(
Addªss
 
a
, 
size_t
 
Àngth
) {

126 
boﬁ
 
	gªt
 = 
Ál£
;

127 
	gMemM≠pögs
::
ôî©‹
 
mi
 = 
mem_m≠s_
.
begö
();

128 
	gmi
 !
mem_m≠s_
.
íd
(); mi++) {

129 
Addªss
 
	g°¨t
 = 
mi
->
fú°
;

130 
	gMemM≠pög
& 
	gmm
 = 
mi
->
£c⁄d
;

131 
Addªss
 
	gíd
 = 
mm
.
íd
;

132 
Addªss
 
	gcode_íd
 = 
a
 + 
Àngth
;

133 i‡((
	ga
 >
°¨t
 && 
code_íd
 < 
íd
) ||

134 (
a
 <
°¨t
 && 
code_íd
 >°¨à&& code_íd <
íd
) ||

135 (
a
 >
°¨t
 &&á < 
íd
 && 
code_íd
 >=Énd)) {

137 i‡(
m¥Ÿe˘
((*)
°¨t
, 
íd
 - sèπ, 
mem_m≠s_
[°¨t].
≥rms
) < 0) {

138 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

139  
	gÁl£
;

141 
	gªt
 = 
åue
;

145  
	gªt
;

150 
	gSpAddrS∑˚
::
upd©e_mem_m≠s
() {

152 
m≠s_fûe
[256];

153 
•rötf
(
m≠s_fûe
, "/¥oc/%d/m≠s", 
gëpid
());

155 
FILE
* 
	gÂ
 = 
f›í
(
m≠s_fûe
, "r");

156 i‡(!
	gÂ
) {

157 
•_≥º‹
("FAILEDÅÿ›í mem‹y m≠pög fûê%s", 
m≠s_fûe
);

159 
	glöebuf
[2048];

160 
fgës
(
löebuf
, 2048, 
Â
Ë!
NULL
) {

161 * 
°¨t_addr_s
 = 
löebuf
;

162 * 
	gíd_addr_s
 = 
°rchr
(
löebuf
, '-');

163 *
	gíd_addr_s
 = '\0';

164 
	gíd_addr_s
++;

166 * 
	g≥rms_s
 = 
°rchr
(
íd_addr_s
, ' ');

167 *
	g≥rms_s
 = '\0';

168 
	g≥rms_s
++;

170 * 
	goff£t_s
 = 
°rchr
(
≥rms_s
, ' ');

171 *
	goff£t_s
 = '\0';

172 
	goff£t_s
++;

174 * 
	gdev_s
 = 
°rchr
(
off£t_s
, ' ');

175 *
	gdev_s
 = '\0';

176 
	gdev_s
++;

178 * 
	göode_s
 = 
°rchr
(
dev_s
, ' ');

179 *
	göode_s
 = '\0';

180 
	göode_s
++;

182 * 
	gpch
 = 
°πok
(
öode_s
, " \n\r");

183 
	göode_s
 = 
pch
;

184 * 
	g∑th_s
 = 
NULL
;

185 i‡(
	gpch
 !
NULL
) {

186 
pch
 = 
°πok
(
NULL
, " \n\r");

187 i‡(
	gpch
) {

188 
	g∑th_s
 = 
pch
;

192 * 
	gpDummy
;

193 
Addªss
 
	g°¨t
 = 
°πﬁl
(
°¨t_addr_s
, &
pDummy
, 16);

196 i‡(
	gmem_m≠s_
.
föd
(
°¨t
Ë=
mem_m≠s_
.
íd
()) {

197 
MemM≠pög
& 
m≠pög
 = 
mem_m≠s_
[
°¨t
];

198 
	gm≠pög
.
	g°¨t
 = 
°¨t
;

199 
	gm≠pög
.
	gíd
 = 
°πﬁ
(
íd_addr_s
, &
pDummy
, 16);

200 
	gm≠pög
.
	goff£t
 = 
°πﬁ
(
off£t_s
, &
pDummy
, 16);

201 
	gm≠pög
.
	gdev
 = 
dev_s
;

202 
	gm≠pög
.
	göode
 = 
°πﬁ
(
öode_s
, &
pDummy
, 16);

203 i‡(
	g∑th_s
Ë
	gm≠pög
.
	g∑th
 = 
∑th_s
;

204 
	g≥rms
 = 0;

205 
	gcou¡
 = 0;

206 i‡(
	g≥rms_s
[0] == 'r') {

207 
≥rms
 |
PROT_READ
;

208 ++
	gcou¡
;

210 i‡(
	g≥rms_s
[1] == 'w') {

211 
≥rms
 |
PROT_WRITE
;

212 ++
	gcou¡
;

214 i‡(
	g≥rms_s
[2] == 'x') {

215 
≥rms
 |
PROT_EXEC
;

216 ++
	gcou¡
;

218 i‡(
	gcou¡
 =3Ë
≥rms
 = 
PROT_NONE
;

219 
	gm≠pög
.
	g≥rms
 = 
≥rms
;

222 
f˛o£
(
Â
);

226 
	gSpAddrS∑˚
::
dump_mem_m≠s
() {

227 #i‚de‡
SP_RELEASE


228 
•_debug
("MMAPS - %d mem‹y m≠pögs", 
mem_m≠s_
.
size
());

230 
	gMemM≠pögs
::
ôî©‹
 
mi
 = 
mem_m≠s_
.
begö
(); 
	gmi
 !mem_m≠s_.
íd
(); mi++) {

231 
	gMemM≠pög
& 
	gm≠pög
 = 
mi
->
£c⁄d
;

232 #i‚de‡
SP_RELEASE


233 
•_debug
("MMAP - Range[%lx ~ %lx], Offset %lx, Perm %x, Dev %s, Inode %d, Path %s",

234 
m≠pög
.
°¨t
, m≠pög.
íd
, m≠pög.
off£t
, m≠pög.
≥rms
,

235 
m≠pög
.
dev
.
c_°r
(), m≠pög.
öode
, m≠pög.
∑th
.c_str());

240 
	gSpAddrS∑˚
::
lﬂdLibøry
(
ph
::
P©chObje˘
* 
obj
) {

241 
lﬂdObje˘
(
obj
);

242 
¥e_Æloc_√¨
(
°©ic_ˇ°
<
SpObje˘
*>(
obj
));

251 
	gSpAddrS∑˚
::
¥e_Æloc_√¨
(
•
::
SpObje˘
* 
obj
) {

254 
	gbuf_size_
 = 1024;

255 
	gmax_buf_num_
 = 10;

256 
size_t
 
	gmax_size
 = 
max_buf_num_
 * 
buf_size_
;

258 
Addªss
 
	gps
 = 
gë∑gesize
();

259 
Addªss
 
	gr_√¨
 = ((
obj
->
lﬂd_addr
(Ë+ 
ps
 -1) & ~(ps - 1));

260 
Addªss
 
	gr_size
 = ((
max_size
 + 
ps
 -1) & ~(ps - 1));

261 
Addªss
 
	gbuf
 = 
r_√¨
;

263 
upd©e_mem_m≠s
();

264 
dump_mem_m≠s
();

265 
•_¥öt
("codeBa£: %lx,Ñ_√¨: %lx,Ñ_size: %d", 
obj
->
codeBa£
(), 
r_√¨
, 
r_size
);

267 * 
	gm
 = 
NULL
;

268 
	gfd
 = -1;

269 !
	gm
 | ()m == -1) {

270 
buf
 -
r_size
;

272 
	gm
 = 
mm≠
((*)
buf
,

273 
r_size
,

274 
PROT_WRITE
 | 
PROT_READ
,

275 
MAP_PRIVATE
 | 
MAP_FIXED
 | 
MAP_ANONYMOUS
,

276 
fd
,

280 i‡(!
	gm
) {

284 
•_¥öt
("gë buf: %lx", 
m
);

290 
	gSpAddrS∑˚
::
gë_√¨
(
ph
::
Poöt
* 
±
) {

	@SpAgent.C

1 
	~"SpAgít.h
"

2 
	~"SpC⁄ãxt.h
"

4 
usög
 
	g•
::
SpAgít
;

5 
usög
 
	g•
::
SpP¨£r
;

6 
usög
 
	g•
::
SpC⁄ãxt
;

8 
usög
 
	gph
::
P©chMgr
;

9 
usög
 
	gph
::
AddrS∑˚
;

10 
usög
 
	gph
::
P©chObje˘
;

12 
usög
 
	g≥
::
CodeObje˘
;

15 
	gSpAgít
::
±r


16 
SpAgít
::
	$¸óã
() {

19 i‡(
	`gëív
("SP_COREDUMP")) {

20 
æimô
 
c‹e_limô
;

21 
c‹e_limô
.
æim_cur
 = 
RLIM_INFINITY
;

22 
c‹e_limô
.
æim_max
 = 
RLIM_INFINITY
;

23 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
c‹e_limô
) < 0) {

24 
	`•_≥º‹
("ERROR: failedÅo setup core dumpábility\n");

27  
	`±r
(
√w
 
	`SpAgít
());

28 
	}
}

30 
	gSpAgít
::
	$SpAgít
() {

32 
öô_evít_
 = 
SpEvít
::
	`±r
();

33 
föi_evít_
 = 
SpEvít
::
	`±r
();

34 
∑r£r_
 = 
SpP¨£r
::
	`±r
();

36 
∑r£_⁄ly_
 = 
Ál£
;

37 
dúe˘ˇŒ_⁄ly_
 = 
Ál£
;

38 
Ælow_ùc_
 = 
Ál£
;

39 
	}
}

41 
	gSpAgít
::~
	$SpAgít
() {

44 
	}
}

48 
SpAgít
::
£t_∑r£r
(
SpP¨£r
::
±r
 
∑r£r
) {

49 
∑r£r_
 = 
∑r£r
;

53 
	gSpAgít
::
£t_öô_evít
(
SpEvít
::
±r
 
e
) {

54 
öô_evít_
 = 
e
;

58 
	gSpAgít
::
£t_föi_evít
(
SpEvít
::
±r
 
e
) {

59 
öô_evít_
 = 
e
;

63 
	gSpAgít
::
	$£t_öô_bef‹e
(
°rög
 
p
) {

64 
öô_bef‹e_
 = 
p
;

65 
	}
}

68 
	gSpAgít
::
	$£t_öô_a·î
(
°rög
 
p
) {

69 
öô_a·î_
 = 
p
;

70 
	}
}

73 
	gSpAgít
::
£t_öô_¥›ñÀr
(
SpPr›ñÀr
::
±r
 
p
) {

74 
öô_¥›ñÀr_
 = 
p
;

78 
	gSpAgít
::
	$£t_∑r£_⁄ly
(
boﬁ
 
b
) {

79 
∑r£_⁄ly_
 = 
b
;

80 
	}
}

83 
	gSpAgít
::
	$£t_dúe˘ˇŒ_⁄ly
(
boﬁ
 
b
) {

84 
dúe˘ˇŒ_⁄ly_
 = 
b
;

85 
	}
}

88 
	gSpAgít
::
	$£t_ùc
(
boﬁ
 
b
) {

89 
Ælow_ùc_
 = 
b
;

90 
	}
}

94 
	gSpAgít
::
	$go
() {

96 #i‚de‡
SP_RELEASE


97 
	`•_debug
("=========Sèπ Sñf-¥›ñÀd in°rumíèti⁄ @ Pro˚s†%d ==========", 
	`gëpid
());

101 i‡(!
öô_evít_
) {

102 #i‚de‡
SP_RELEASE


103 
	`•_debug
("INIT EVENT - Use defaultÉvent");

105 
öô_evít_
 = 
SyncEvít
::
	`¸óã
();

107 i‡(!
föi_evít_
) {

108 #i‚de‡
SP_RELEASE


109 
	`•_debug
("FINI EVENT - Use defaultÉvent");

111 
föi_evít_
 = 
SpEvít
::
	`¸óã
();

113 i‡(
öô_bef‹e_
.
	`size
() == 0) {

114 #i‚de‡
SP_RELEASE


115 
	`•_debug
("BEFORE_PAYLOAD - Use defaultÖayload before calls");

117 
öô_bef‹e_
 = "default_before";

119 i‡(
öô_a·î_
.
	`size
() == 0) {

120 #i‚de‡
SP_RELEASE


121 
	`•_debug
("AFTER_PAYLOAD - NoÖayloadáfter calls");

123 
öô_a·î_
 = "";

125 i‡(!
∑r£r_
) {

126 #i‚de‡
SP_RELEASE


127 
	`•_debug
("PARSER - Use defaultÖarser");

129 
∑r£r_
 = 
SpP¨£r
::
	`¸óã
();

131 i‡(!
öô_¥›ñÀr_
) {

132 #i‚de‡
SP_RELEASE


133 
	`•_debug
("PROPELLER - Use defaultÖropeller");

136 
öô_¥›ñÀr_
 = 
SpPr›ñÀr
::
	`¸óã
();

138 #i‚de‡
SP_RELEASE


139 i‡(
dúe˘ˇŒ_⁄ly_
) {

140 
	`•_debug
("DIRECT CALL ONLY - only instrument direct calls, ignoring indirect calls");

142 
	`•_debug
("DIRECT/INDIRECT CALL - instrument both directánd indirect calls");

144 i‡(
Ælow_ùc_
) {

145 
	`•_debug
("MULTI PROCESS - support multiprocess instrumentation");

147 
	`•_debug
("SINGLE PROCESS - only support single-process instrumentation");

152 
c⁄ãxt_
 = 
SpC⁄ãxt
::
	`¸óã
(
öô_¥›ñÀr_
,

153 
öô_bef‹e_
,

154 
öô_a·î_
,

155 
∑r£r_
);

156 
c⁄ãxt_
->
	`£t_dúe˘ˇŒ_⁄ly
(
dúe˘ˇŒ_⁄ly_
);

157 
c⁄ãxt_
->
	`£t_Ælow_ùc
(
Ælow_ùc_
);

159 i‡(
∑r£_⁄ly_
) {

160 #i‚de‡
SP_RELEASE


161 
	`•_debug
("PARSE ONLY -ÉxitáfterÖarsing, without instrumentation");

168 
öô_evít_
->
	`ªgi°î_evít
(
c⁄ãxt_
);

169 
föi_evít_
->
	`ªgi°î_evít
(
c⁄ãxt_
);

170 
	}
}

	@SpArch-i386.C

1 
	~"SpEvít.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpSnù≥t.h
"

5 
	~"SpUtûs.h
"

6 
	~"SpPoöt.h
"

8 
usög
 
	gdt
::
Addªss
;

10 
usög
 
	gö
::
Resu…
;

11 
usög
 
	gö
::
Visô‹
;

12 
usög
 
	gö
::
Immedüã
;

13 
usög
 
	gö
::
c_CÆlIn¢
;

14 
usög
 
	gö
::
Ex¥essi⁄
;

15 
usög
 
	gö
::
In°ru˘i⁄
;

16 
usög
 
	gö
::
Dîe„ªn˚
;

17 
usög
 
	gö
::
Regi°îAST
;

18 
usög
 
	gö
::
Bö¨yFun˘i⁄
;

20 
«me•a˚
 
	g•
 {

27 
size_t


28 
	gSpSnù≥t
::
emô_ßve
(* 
buf
, 
size_t
 
off£t
, 
boﬁ
) {

29 * 
	gp
 = 
buf
 + 
off£t
;

32 *
	gp
++ = 0x60;

34 
size_t
 
	gö¢size
 = 
emô_ßve_•
(
p
, 0);

35 
	gp
 +
ö¢size
;

37  (
	gp
 - (
	gbuf
 + 
	goff£t
));

41 
size_t


42 
	gSpSnù≥t
::
emô_ª°‹e
–* 
buf
, 
size_t
 
off£t
, 
boﬁ
) {

43 * 
	gp
 = 
buf
 + 
off£t
;

45 *
	gp
++ = 0x61;

46  (
	gp
 - (
	gbuf
 + 
	goff£t
));

50 
size_t


51 
	gSpSnù≥t
::
emô_Áu…
(* 
buf
, 
size_t
 
off£t
) {

52 * 
	gp
 = 
buf
 + 
off£t
;

55 *
	gp
++ = ()0xc7;

56 *
	gp
++ = ()0x05;

58 *
	gp
++ = ()0x00;

59 *
	gp
++ = ()0x00;

60 *
	gp
++ = ()0x00;

61 *
	gp
++ = ()0x00;

63 *
	gp
++ = ()0x00;

64 *
	gp
++ = ()0x00;

65 *
	gp
++ = ()0x00;

66 *
	gp
++ = ()0x00;

68  (
	gp
 - (
	gbuf
 + 
	goff£t
));

75 
size_t


76 
	gSpSnù≥t
::
emô_ßve_•
(* 
buf
, 
size_t
 
off£t
) {

77 * 
	gp
 = 
buf
 + 
off£t
;

79 *
	gp
++ = 0x89;

80 *
	gp
++ = 0x25;

82 * 
	gl
 = (*)
p
;

83 *
	gl
 = ()&
ßved_c⁄ãxt_loc_
;

84 
	gp
 += ();

86  (
	gp
 - (
	gbuf
 + 
	goff£t
));

90 
size_t


91 
emô_push_imm32
(
imm
, * 
buf
, 
size_t
 
off£t
) {

92 * 
	gp
 = 
buf
 + 
off£t
;

95 *
	gp
++ = 0x68;

96 * 
	gi
 = (*)
p
;

97 *
	gi
 = 
imm
;

98 
	gp
 += ();

100  (
	gp
 - (
	gbuf
 + 
	goff£t
));

104 
size_t


105 
emô_p›_imm32
(* 
buf
, 
size_t
 
off£t
) {

106 * 
	gp
 = 
buf
 + 
off£t
;

108 *
	gp
++ = 0x58;

109  (
	gp
 - (
	gbuf
 + 
	goff£t
));

116 
size_t


117 
	gSpSnù≥t
::
emô_∑ss_∑øm
(
poöt
, 
∑ylﬂd
, * 
buf
, 
size_t
 
off£t
) {

118 * 
	gp
 = 
buf
 + 
off£t
;

119 
size_t
 
	gö¢size
 = 0;

121 i‡(
	g∑ylﬂd
) {

123 
	gö¢size
 = 
emô_push_imm32
(()
∑ylﬂd
, 
p
, 0);

124 
	gp
 +
ö¢size
;

128 
	gö¢size
 = 
emô_push_imm32
(()
poöt
, 
p
, 0);

129 
	gp
 +
ö¢size
;

131  (
	gp
 - (
	gbuf
 + 
	goff£t
));

138 
size_t


139 
	gSpSnù≥t
::
emô_ˇŒ_abs
(
ˇŒì
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
 
ª°‹e
) {

140 * 
	gp
 = 
buf
 + 
off£t
;

141 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

142 
size_t
 
	gö¢size
 = 0;

143 
Addªss
 
	gªl_addr
 = (
ˇŒì
 - 
ªèddr
);

145 i‡(
	g•
::
is_di•32
(
ªl_addr
)) {

147 *
p
++ = 0xe8;

148 * 
	gªl_p
 = (*)
p
;

149 *
	gªl_p
 = 
ªl_addr
;

150 
	gp
 += ();

152 
•_≥º‹
("largerÅhan 4 bytes for calláddress");

155 i‡(
	gª°‹e
) {

157 
	gö¢size
 = 
emô_p›_imm32
(
p
, 0);

158 
	gp
 +
ö¢size
;

160 i‡(
	gc⁄ãxt_
->
Ælow_ùc
()) {

162 
	gö¢size
 = 
emô_p›_imm32
(
p
, 0);

163 
	gp
 +
ö¢size
;

167  (
	gp
 - (
	gbuf
 + 
	goff£t
));

175 
size_t


176 
	gSpSnù≥t
::
emô_jump_abs
(
åg
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
 
abs
) {

177 * 
	gp
 = 
buf
 + 
off£t
;

178 
size_t
 
	gö¢size
 = 0;

180 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

181 
Addªss
 
	gªl_addr
 = (
åg
 - 
ªèddr
);

183 i‡(
	g•
::
is_di•32
(
ªl_addr
Ë&& !
abs
) {

185 *
p
++ = 0xe9;

186 * 
	gªl_p
 = (*)
p
;

187 *
	gªl_p
 = 
ªl_addr
;

188 
	gp
 += 4;

191 
	gö¢size
 = 
emô_push_imm32
(
åg
, 
p
, 0);

192 
	gp
 +
ö¢size
;

194 *
	gp
++ = 0xc3;

197  (
	gp
 - (
	gbuf
 + 
	goff£t
));

203 
size_t


204 
	gSpSnù≥t
::
emô_ˇŒ_‹ig
(
§c
, 
size_t
 
size
, * 
buf
, size_à
off£t
) {

205 * 
	gp
 = 
buf
 + 
off£t
;

206 * 
	gp§c
 = (*)
§c
;

207 
mem˝y
(
p
, 
p§c
, 
size
);

208  
	gsize
;

212 
size_t


213 
	gSpSnù≥t
::
ªloc_ö¢
(
Addªss
 
§c_ö¢
, 
In°ru˘i⁄
::
På
 
ö¢
,

214 
Addªss
 
œ°
, * 
buf
) {

218 
Addªss
 
	ga
 = 
§c_ö¢
;

219 i‡(
	ga
 =
œ°
)  0;

222 * 
	gp
 = 
buf
;

223 i‡(
	gö¢
->
gëC©eg‹y
(Ë=
c_CÆlIn¢
 &&

224 
a
 !
œ°
) {

229 *
p
++ = 0xbb;

230 * 
	g√w_ebx
 = (*)
p
;

231 *
	g√w_ebx
 = ()(
a
+5);

235 
mem˝y
(
p
, 
ö¢
->
±r
(), in¢->
size
());

236  
	gö¢
->
size
();

245 
Addªss


246 
	gSpSnù≥t
::
gë_¥e_sig«l_pc
(* 
c⁄ãxt
) {

247 
uc⁄ãxt_t
* 
˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

248  
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_EIP
];

252 
Addªss


253 
	gSpSnù≥t
::
£t_pc
(
Addªss
 
pc
, * 
c⁄ãxt
) {

254 
uc⁄ãxt_t
* 
	g˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

255 
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_EIP
] = 
pc
;

259 
Addªss


260 
	gSpSnù≥t
::
gë_ßved_ªg
(
Dynö°
::
MachRegi°î
 
ªg
) {

264 
	#EDI
 0

	)

265 
	#ESI
 4

	)

266 
	#EBP
 8

	)

267 
	#ESP
 12

	)

268 
	#EBX
 16

	)

269 
	#EDX
 20

	)

270 
	#ECX
 24

	)

271 
	#EAX
 28

	)

273 
	#ªg_vÆ
(
i
Ë(*(*)(
ßved_c⁄ãxt_loc_
+(i)))

	)

279 
usög
 
«me•a˚
 
Dynö°
::
x86
;

280 i‡(
	gªg
 =
edi
Ë 
ªg_vÆ
(
EDI
);

281 i‡(
	gªg
 =
esi
Ë 
ªg_vÆ
(
ESI
);

282 i‡(
	gªg
 =
ebp
Ë 
ªg_vÆ
(
EBP
);

283 i‡(
	gªg
 =
e•
Ë 
ªg_vÆ
(
ESP
);

284 i‡(
	gªg
 =
ebx
Ë 
ªg_vÆ
(
EBX
);

285 i‡(
	gªg
 =
edx
Ë 
ªg_vÆ
(
EDX
);

286 i‡(
	gªg
 =
ecx
Ë 
ªg_vÆ
(
ECX
);

287 i‡(
	gªg
 =
óx
Ë 
ªg_vÆ
(
EAX
);

293 
boﬁ


294 
	gSpP¨£r
::
is_pc
(
Dynö°
::
MachRegi°î
 
r
) {

295 i‡(
r
 =
Dynö°
::
x86
::
eù
Ë 
åue
;

296  
	gÁl£
;

301 
size_t


302 
	gSpSnù≥t
::
jump_abs_size
() {

311 
	gSpSnù≥t
::
p›_¨gumít
(
ArgumítH™dÀ
* 
h
, 
size_t
 
size
) {

312 * 
	ga
 = (*)(
ßved_c⁄ãxt_loc_
 + 32 + 
h
->
off£t
);

313 
	gh
->
	goff£t
 +
size
;

314  
	ga
;

319 
	gSpSnù≥t
::
gë_ªt_vÆ
() {

320  
gë_ßved_ªg
(
Dynö°
::
x86
::
óx
);

	@SpArch-x86_64.C

1 
	~"SpEvít.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpSnù≥t.h
"

5 
	~"SpPoöt.h
"

6 
	~"SpUtûs.h
"

8 
usög
 
	gdt
::
Addªss
;

10 
usög
 
	gph
::
P©chFun˘i⁄
;

12 
usög
 
	gö
::
Resu…
;

13 
usög
 
	gö
::
Visô‹
;

14 
usög
 
	gö
::
Immedüã
;

15 
usög
 
	gö
::
Ex¥essi⁄
;

16 
usög
 
	gö
::
In°ru˘i⁄
;

17 
usög
 
	gö
::
Dîe„ªn˚
;

18 
usög
 
	gö
::
Regi°îAST
;

19 
usög
 
	gö
::
Bö¨yFun˘i⁄
;

22 
«me•a˚
 
	g•
 {

24 
SpC⁄ãxt
* 
g_c⁄ãxt
;

31 
size_t


32 
	gSpSnù≥t
::
emô_ßve
(* 
buf
, 
size_t
 
off£t
, 
boﬁ
 
ödúe˘
) {

33 * 
	gp
 = 
buf
 + 
off£t
;

36 *
	gp
++ = 0x57;

37 *
	gp
++ = 0x56;

38 *
	gp
++ = 0x52;

39 *
	gp
++ = 0x51;

40 *
	gp
++ = 0x41;

41 *
	gp
++ = 0x50;

42 *
	gp
++ = 0x41;

43 *
	gp
++ = 0x51;

44 *
	gp
++ = 0x50;

48 
	gp
 +
emô_ßve_•
(
p
, 0);

51 i‡(
	gödúe˘
) {

52 *
	gp
++ = 0x41;

53 *
	gp
++ = 0x52;

54 *
	gp
++ = 0x41;

55 *
	gp
++ = 0x53;

56 *
	gp
++ = 0x53;

57 *
	gp
++ = 0x41;

58 *
	gp
++ = 0x54;

59 *
	gp
++ = 0x41;

60 *
	gp
++ = 0x55;

61 *
	gp
++ = 0x41;

62 *
	gp
++ = 0x56;

63 *
	gp
++ = 0x41;

64 *
	gp
++ = 0x57;

65 *
	gp
++ = 0x55;

68  (
	gp
 - (
	gbuf
 + 
	goff£t
));

72 
size_t


73 
	gSpSnù≥t
::
emô_ª°‹e
(* 
buf
, 
size_t
 
off£t
, 
boﬁ
 
ödúe˘
) {

74 * 
	gp
 = 
buf
 + 
off£t
;

77 i‡(
	gödúe˘
) {

78 *
	gp
++ = 0x5d;

79 *
	gp
++ = 0x41;

80 *
	gp
++ = 0x5f;

81 *
	gp
++ = 0x41;

82 *
	gp
++ = 0x5e;

83 *
	gp
++ = 0x41;

84 *
	gp
++ = 0x5d;

85 *
	gp
++ = 0x41;

86 *
	gp
++ = 0x5c;

87 *
	gp
++ = 0x5b;

88 *
	gp
++ = 0x41;

89 *
	gp
++ = 0x5b;

90 *
	gp
++ = 0x41;

91 *
	gp
++ = 0x5a;

95 *
	gp
++ = 0x58;

96 *
	gp
++ = 0x41;

97 *
	gp
++ = 0x59;

98 *
	gp
++ = 0x41;

99 *
	gp
++ = 0x58;

100 *
	gp
++ = 0x59;

101 *
	gp
++ = 0x5a;

102 *
	gp
++ = 0x5e;

103 *
	gp
++ = 0x5f;

105  (
	gp
 - (
	gbuf
 + 
	goff£t
));

112 
size_t


113 
	gSpSnù≥t
::
emô_ßve_•
(* 
buf
, 
size_t
 
off£t
) {

114 * 
	gp
 = 
buf
 + 
off£t
;

117 *
	gp
++ = 0x48;

118 *
	gp
++ = 0xb8;

119 * 
	gl
 = (*)
p
;

120 *
	gl
 = ()&
ßved_c⁄ãxt_loc_
;

121 
	gp
 += ();

124 *
	gp
++ = 0x48;

125 *
	gp
++ = 0x89;

126 *
	gp
++ = 0x20;

128  (
	gp
 - (
	gbuf
 + 
	goff£t
));

132 
size_t


133 
	gSpSnù≥t
::
emô_Áu…
(* 
buf
, 
size_t
 
off£t
) {

134 * 
	gp
 = 
buf
 + 
off£t
;

137 *
	gp
++ = ()0x48;

138 *
	gp
++ = ()0xc7;

139 *
	gp
++ = ()0x04;

140 *
	gp
++ = ()0x25;

141 *
	gp
++ = ()0x00;

142 *
	gp
++ = ()0x00;

143 *
	gp
++ = ()0x00;

144 *
	gp
++ = ()0x00;

145 *
	gp
++ = ()0x00;

146 *
	gp
++ = ()0x00;

147 *
	gp
++ = ()0x00;

148 *
	gp
++ = ()0x00;

149  (
	gp
 - (
	gbuf
 + 
	goff£t
));

153 
size_t


154 
emô_mov_imm64_rdi
(
imm
, * 
buf
, 
size_t
 
off£t
) {

155 * 
	gp
 = 
buf
 + 
off£t
;

157 *
	gp
 = ()0x48;Ö++;

158 *
	gp
 = ()0xbf;Ö++;

159 *((*)
	gp
Ë()
imm
;

164 
size_t


165 
emô_mov_imm64_rsi
(
imm
, * 
buf
, 
size_t
 
off£t
) {

166 * 
	gp
 = 
buf
 + 
off£t
;

168 *
	gp
 = ()0x48;Ö++;

169 *
	gp
 = ()0xbe;Ö++;

170 *((*)
	gp
Ë()
imm
;

178 
size_t


179 
	gSpSnù≥t
::
emô_∑ss_∑øm
(
poöt
, 
∑ylﬂd
, * 
buf
, 
size_t
 
off£t
) {

180 * 
	gp
 = 
buf
 + 
off£t
;

181 
size_t
 
	gö¢size
 = 0;

184 
	gö¢size
 = 
emô_mov_imm64_rdi
(()
poöt
, 
p
, 0);

185 
	gp
 +
ö¢size
;

187 i‡(
	g∑ylﬂd
) {

189 
	gö¢size
 = 
emô_mov_imm64_rsi
(()
∑ylﬂd
, 
p
, 0);

190 
	gp
 +
ö¢size
;

193  (
	gp
 - (
	gbuf
 + 
	goff£t
));

197 
size_t


198 
emô_push_imm64
(
imm
, * 
buf
, 
size_t
 
off£t
) {

199 * 
	gp
 = 
buf
 + 
off£t
;

207 
	gi
 = 3; i >= 0; i--) {

208 
	gw‹d
 = 
°©ic_ˇ°
<>((
imm
 >> (16 * 
i
)) & 0xffff);

209 *
	gp
++ = 0x66;

210 *
	gp
++ = 0x68;

211 *(*)
	gp
 = 
w‹d
;

212 
	gp
 += 2;

214  (
	gp
 - (
	gbuf
 + 
	goff£t
));

218 
size_t


219 
	gSpSnù≥t
::
emô_ˇŒ_abs
(
ˇŒì
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
) {

220 * 
	gp
 = 
buf
 + 
off£t
;

221 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

222 
Addªss
 
	gªl_addr
 = (
ˇŒì
 - 
ªèddr
);

224 i‡(
	g•
::
is_di•32
(
ªl_addr
)) {

228 *
p
++ = 0xe8;

229 * 
	gªl_p
 = (*)
p
;

230 *
	gªl_p
 = 
ªl_addr
;

231 
	gp
 += 4;

236 *
	gp
++ = 0x48;

237 *
	gp
++ = 0xb8;

238 * 
	gˇŒ_addr
 = (*)
p
;

239 *
	gˇŒ_addr
 = 
ˇŒì
;

240 
	gp
 += ();

243 *
	gp
++ = 0xff;

244 *
	gp
++ = 0xd0;

247  (
	gp
 - (
	gbuf
 + 
	goff£t
));

251 
size_t


252 
	gSpSnù≥t
::
emô_jump_abs
(
åg
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
 
abs
) {

253 * 
	gp
 = 
buf
 + 
off£t
;

254 
size_t
 
	gö¢size
 = 0;

256 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

257 
Addªss
 
	gªl_addr
 = (
åg
 - 
ªèddr
);

259 i‡(
	g•
::
is_di•32
(
ªl_addr
Ë&& !
abs
) {

263 *
p
++ = 0xe9;

264 * 
	gªl_p
 = (*)
p
;

265 *
	gªl_p
 = 
ªl_addr
;

266 
	gp
 += 4;

271 
	gö¢size
 = 
emô_push_imm64
(
åg
, 
p
, 0);

272 
	gp
 +
ö¢size
;

275 *
	gp
++ = 0xc3;

277  (
	gp
 - (
	gbuf
 + 
	goff£t
));

285 
Addªss


286 
	gSpSnù≥t
::
gë_¥e_sig«l_pc
(* 
c⁄ãxt
) {

287 
uc⁄ãxt_t
* 
˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

288  
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_RIP
];

292 
Addªss


293 
	gSpSnù≥t
::
£t_pc
(
Addªss
 
pc
, * 
c⁄ãxt
) {

294 
uc⁄ãxt_t
* 
	g˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

295 
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_RIP
] = 
pc
;

299 
Addªss


300 
	gSpSnù≥t
::
gë_ßved_ªg
(
Dynö°
::
MachRegi°î
 
ªg
) {

302 
	#RAX
 (0)

	)

303 
	#R9
 (8)

	)

304 
	#R8
 (16)

	)

305 
	#RCX
 (24)

	)

306 
	#RDX
 (32)

	)

307 
	#RSI
 (40)

	)

308 
	#RDI
 (48)

	)

309 
	#RSP
 (56)

	)

311 
	#R10
 (-8)

	)

312 
	#R11
 (-16)

	)

313 
	#RBX
 (-24)

	)

314 
	#R12
 (-32)

	)

315 
	#R13
 (-40)

	)

316 
	#R14
 (-48)

	)

317 
	#R15
 (-56)

	)

318 
	#RBP
 (-64)

	)

320 
	#ªg_vÆ
(
i
Ë(*(*)(
ßved_c⁄ãxt_loc_
+()(i)))

	)

327 
usög
 
«me•a˚
 
Dynö°
::
x86_64
;

329 i‡(
	gªg
 =
øx
Ë 
ªg_vÆ
(
RAX
);

330 i‡(
	gªg
 =
rbx
Ë 
ªg_vÆ
(
RBX
);

331 i‡(
	gªg
 =
rcx
Ë 
ªg_vÆ
(
RCX
);

332 i‡(
	gªg
 =
rdx
Ë 
ªg_vÆ
(
RDX
);

333 i‡(
	gªg
 =
rsi
Ë 
ªg_vÆ
(
RSI
);

334 i‡(
	gªg
 =
rdi
Ë 
ªg_vÆ
(
RDI
);

335 i‡(
	gªg
 =
r8
Ë 
ªg_vÆ
(
R8
);

336 i‡(
	gªg
 =
r9
Ë 
ªg_vÆ
(
R9
);

337 i‡(
	gªg
 =
r10
Ë 
ªg_vÆ
(
R10
);

338 i‡(
	gªg
 =
r11
Ë 
ªg_vÆ
(
R11
);

339 i‡(
	gªg
 =
r12
Ë 
ªg_vÆ
(
R12
);

340 i‡(
	gªg
 =
r13
Ë 
ªg_vÆ
(
R13
);

341 i‡(
	gªg
 =
r14
Ë 
ªg_vÆ
(
R14
);

342 i‡(
	gªg
 =
r15
Ë 
ªg_vÆ
(
R15
);

343 i‡(
	gªg
 =
r•
Ë (
ßved_c⁄ãxt_loc_
+
RSP
);

345 i‡(
	gªg
 =
rbp
Ë 
ªg_vÆ
(
RBP
);

347 i‡(
	gªg
 =
óx
Ë 
ªg_vÆ
(
RAX
);

348 i‡(
	gªg
 =
ebx
Ë 
ªg_vÆ
(
RBX
);

349 i‡(
	gªg
 =
ecx
Ë 
ªg_vÆ
(
RCX
);

350 i‡(
	gªg
 =
edx
Ë 
ªg_vÆ
(
RDX
);

351 i‡(
	gªg
 =
esi
Ë 
ªg_vÆ
(
RSI
);

352 i‡(
	gªg
 =
edi
Ë 
ªg_vÆ
(
RDI
);

353 i‡(
	gªg
 =
e•
Ë (
ßved_c⁄ãxt_loc_
+
RSP
);

355 i‡(
	gªg
 =
ebp
Ë 
ªg_vÆ
(
RBP
);

361 
boﬁ


362 
	gSpP¨£r
::
is_pc
(
Dynö°
::
MachRegi°î
 
r
) {

363 i‡(
r
 =
Dynö°
::
x86_64
::
rù
Ë 
åue
;

364  
	gÁl£
;

367 ˛as†
	cRñocVisô‹
 : 
public
 
Visô‹
 {

368 
public
:

369 
RñocVisô‹
(
SpP¨£r
::
±r
 
p
Ë: 
Visô‹
(), 
p_
’), 
u£_pc_
(
Ál£
) {}

370 
vútuÆ
 
visô
(
Regi°îAST
* 
r
) {

371 i‡(
	gp_
->
is_pc
(
r
->
gëID
())) {

372 
	gu£_pc_
 = 
åue
;

375 
vútuÆ
 
visô
(
Bö¨yFun˘i⁄
* 
b
) {

377 
vútuÆ
 
visô
(
Immedüã
* 
i
) {

379 
vútuÆ
 
visô
(
Dîe„ªn˚
* 
d
) {

381 
boﬁ
 
u£_pc
(Ëc⁄° {  
	gu£_pc_
; }

382 
	g¥iv©e
:

383 
SpP¨£r
::
±r
 
p_
;

384 
boﬁ
 
	gu£_pc_
;

417 
gë_di•
(
In°ru˘i⁄
::
På
 
ö¢
, * 
ö¢_buf
) {

418 * 
	gdi•
 = 
NULL
;

420 
	gdi•_off£t
 = 0;

422 i‡((
	gö¢_buf
[
di•_off£t
] & 0xf0) == 0x40) {

423 ++
di•_off£t
;

427 i‡(
	gö¢_buf
[
di•_off£t
] == 0x0f) {

428 ++
di•_off£t
;

432 ++
	gdi•_off£t
;

435 ++
	gdi•_off£t
;

437 
	gdi•
 = (*)&
ö¢_buf
[
di•_off£t
];

438  
	gdi•
;

442 ˛as†
	cEmuVisô‹
 : 
public
 
Visô‹
 {

443 
public
:

444 
EmuVisô‹
(
Addªss
 
a
)

445 : 
Visô‹
(), 
imm_
(0), 
a_
(
a
) { }

446 
vútuÆ
 
visô
(
Regi°îAST
* 
r
) {

448 
	gimm_
 = 
a_
;

449 
	g°ack_
.
push
(
imm_
);

451 
vútuÆ
 
visô
(
Bö¨yFun˘i⁄
* 
b
) {

452 
Addªss
 
	gi1
 = 
°ack_
.
t›
();

453 
	g°ack_
.
p›
();

454 
Addªss
 
	gi2
 = 
°ack_
.
t›
();

455 
	g°ack_
.
p›
();

457 i‡(
	gb
->
isAdd
()) {

458 
	gimm_
 = 
i1
 + 
i2
;

459 } i‡(
	gb
->
isMu…ùly
()) {

460 
	gimm_
 = 
i1
 * 
i2
;

462 
as£π
(0);

464 
	g°ack_
.
push
(
imm_
);

466 
vútuÆ
 
visô
(
Immedüã
* 
i
) {

467 
Resu…
 
	gªs
 = 
i
->
evÆ
();

468 
	gªs
.
size
()) {

470 
imm_
 =
ªs
.
vÆ
.
u8vÆ
;

474 
imm_
 =
ªs
.
vÆ
.
u16vÆ
;

478 
imm_
 =
ªs
.
vÆ
.
u32vÆ
;

482 
imm_
 =
ªs
.
vÆ
.
u64vÆ
;

486 
	g°ack_
.
push
(
imm_
);

488 
vútuÆ
 
visô
(
Dîe„ªn˚
* 
d
) {

493 
Addªss
 
imm
() const {

494  
	gimm_
;

497 
	g¥iv©e
:

498 
°d
::
°ack
<
Addªss
> 
°ack_
;

499 
Addªss
 
	gimm_
;

500 
Addªss
 
	ga_
;

516 
size_t


517 
emuœã_pc£n
(
In°ru˘i⁄
::
På
 
ö¢
, 
Ex¥essi⁄
::På 
e
, 
Addªss
 
a
, * 
buf
) {

518 * 
	gp
 = 
buf
;

519 * 
	gö¢_buf
 = (*)
ö¢
->
±r
();

524 
	gªx
 = 0;

525 
	gmodrm_off£t
 = 1;

526 i‡((
	gö¢_buf
[0] & 0xf0) == 0x40) {

527 
ªx
 = 
ö¢_buf
[0];

528 ++
	gmodrm_off£t
;

531 
	gesˇ≥
 = 0;

532 i‡(
	gö¢_buf
[
modrm_off£t
-1] == 0x0f) {

533 
esˇ≥
 = 0x0f;

534 ++
	gmodrm_off£t
;

538 
	gmodrm
 = 
ö¢_buf
[
modrm_off£t
];

541 
	gªg
 = 0;

542 i‡(
	gªx
) {

544 i‡(
	gªx
 & 0x04Ë
	gªg
 |= 0x08;

546 
	gªg
 |((
modrm
 & 0x38) >> 3);

551 i‡(
	gªg
 != 0x08) {

553 *
p
++ = 0x41;

554 *
	gp
++ = 0x50;

557 *
	gp
++ = 0x41;

558 *
	gp
++ = 0x51;

564 *
	gp
++ = 0x49;

565 i‡(
	gªg
 != 0x08) {

566 *
p
++ = 0xb8;

568 *
	gp
++ = 0xb9;

570 * 
	gl
 = (*)
p
;

573 
EmuVisô‹
 
visô‹
(
a
+
ö¢
->
size
());

574 
	ge
->
≠∂y
(&
visô‹
);

575 *
	gl
 = 
visô‹
.
imm
();

576 
	gp
 +(
l
);

579 i‡(
	gªx
) {

580 
	gªx
 |= 0x01;

581 *
	gp
++ = 
ªx
;

583 *
	gp
++ = 0x41;

587 i‡(
	gesˇ≥
) {

588 *
	gp
++ = 0x0f;

592 *
	gp
++ = 
ö¢_buf
[
modrm_off£t
-1];

593 
	g√w_modrm
 = 
modrm
;

594 i‡(
	gªg
 != 0x08) {

595 
√w_modrm
 &= 0xf8;

597 
	g√w_modrm
 &= 0xf9;

599 *
	gp
++ = 
√w_modrm
;

602 
	gi
 = 
modrm_off£t
+1+4; i < 
	gö¢
->
size
(); i++) {

603 *
	gp
++ = 
ö¢_buf
[
i
];

609 i‡(
	gªg
 != 0x08) {

611 *
p
++ = 0x41;

612 *
	gp
++ = 0x58;

615 *
	gp
++ = 0x41;

616 *
	gp
++ = 0x59;

619  (
	gsize_t
)(
	gp
 - 
	gbuf
);

622 
size_t


623 
ªloc_ö¢_öã∫Æ
(
Addªss
 
a
, 
In°ru˘i⁄
::
På
 
ö¢
,

624 
°d
::
£t
<
Ex¥essi⁄
::
På
>& 
exp
, 
boﬁ
 
u£_pc
, * 
p
) {

625 i‡(
	gu£_pc
) {

627 
	gö¢_buf
[20];

628 
mem˝y
(
ö¢_buf
, 
ö¢
->
±r
(), in¢->
size
());

629 * 
	gdis_buf
 = 
gë_di•
(
ö¢
, 
ö¢_buf
);

630 
	gﬁd_rù
 = 
a
;

631 
	g√w_rù
 = ()
p
;

632 
	gﬁd_dis
 = *
dis_buf
;

633 
	gl⁄g_√w_dis
 = (
ﬁd_rù
 - 
√w_rù
Ë+ *
dis_buf
;

635 i‡(
	g•
::
is_di•32
(
l⁄g_√w_dis
)) {

637 *
dis_buf
 = ()
l⁄g_√w_dis
;

638 
mem˝y
(
p
, 
ö¢_buf
, 
ö¢
->
size
());

639  
	gö¢
->
size
();

642 
size_t
 
	gö¢_size
 = 
emuœã_pc£n
(
ö¢
, *
exp
.
begö
(), 
a
, 
p
);

643  
	gö¢_size
;

647 
mem˝y
(
p
, 
ö¢
->
±r
(), in¢->
size
());

648  
	gö¢
->
size
();

653 
size_t


654 
	gSpSnù≥t
::
ªloc_ö¢
(
Addªss
 
§c_ö¢
, 
In°ru˘i⁄
::
På
 
ö¢
,

655 
Addªss
 
œ°
, * 
buf
) {

657 i‡(
	g§c_ö¢
 =
œ°
) {  0; }

660 
	g£t
<
	gEx¥essi⁄
::
På
> 
›Së
;

661 i‡(
	gö¢
->
ªadsMem‹y
()Ëö¢->
gëMem‹yRódO≥ønds
(
›Së
);

662 i‡(
	gö¢
->
wrôesMem‹y
()Ëö¢->
gëMem‹yWrôeO≥ønds
(
›Së
);

664 
boﬁ
 
	gu£_pc
 = 
Ál£
;

665 
	g£t
<
	gEx¥essi⁄
::
På
>::
ôî©‹
 
i
 = 
›Së
.
begö
(); 
	gi
 !›Së.
íd
(); i++) {

666 
RñocVisô‹
 
visô‹
(
c⁄ãxt_
->
∑r£r
());

667 (*
	gi
)->
≠∂y
(&
visô‹
);

668 
	gu£_pc
 = 
visô‹
.
u£_pc
();

672  
ªloc_ö¢_öã∫Æ
(
§c_ö¢
, 
ö¢
, 
›Së
, 
u£_pc
, 
buf
);

676 
size_t


677 
	gSpSnù≥t
::
	$jump_abs_size
() {

681 
	}
}

686 
size_t


687 
	gSpSnù≥t
::
	$emô_ˇŒ_‹ig
(
§c
, 
size_t
 
size
,

688 * 
buf
, 
size_t
 
off£t
) {

689 * 
p
 = 
buf
 + 
off£t
;

690 
boﬁ
 
u£_pc
 = 
Ál£
;

693 
In°ru˘i⁄
::
På
 
ö¢
 = 
	`gë_‹ig_ˇŒ_ö¢
();

694 
RñocVisô‹
 
	`visô‹
(
c⁄ãxt_
->
	`∑r£r
());

695 
Ex¥essi⁄
::
På
 
åg
 = 
ö¢
->
	`gëC⁄åﬁFlowT¨gë
();

696 
£t
<
Ex¥essi⁄
::
På
> 
›Së
;

697 i‡(
åg
) {

698 
åg
->
	`≠∂y
(&
visô‹
);

699 
u£_pc
 = 
visô‹
.
	`u£_pc
();

700 
›Së
.
	`ö£π
(
åg
);

702  
	`ªloc_ö¢_öã∫Æ
(
§c
, 
ö¢
, 
›Së
, 
u£_pc
, 
p
);

703 
	}
}

707 
	gSpSnù≥t
::
	$p›_¨gumít
(
ArgumítH™dÀ
* 
h
, 
size_t
 
size
) {

708 
usög
 
«me•a˚
 
Dynö°
::
x86_64
;

709 i‡(
h
->
num
 < 6) {

710 
Addªss
 
a
 = 0;

711 
h
->
num
) {

713 
a
 = 
	`gë_ßved_ªg
(
rdi
);

716 
a
 = 
	`gë_ßved_ªg
(
rsi
);

719 
a
 = 
	`gë_ßved_ªg
(
rdx
);

722 
a
 = 
	`gë_ßved_ªg
(
rcx
);

725 
a
 = 
	`gë_ßved_ªg
(
r8
);

728 
a
 = 
	`gë_ßved_ªg
(
r9
);

731 
	`as£π
(0);

733 * 
b
 = 
h
->
	`ö£π_buf
(
size
);

734 
	`mem˝y
(
b
, &
a
, 
size
);

735 ++
h
->
num
;

736  
b
;

739 * 
a
 = (*)(
ßved_c⁄ãxt_loc_
 + 
RSP
 + 
h
->
off£t
);

740 
h
->
off£t
 +
size
;

741 ++
h
->
num
;

742  
a
;

743 
	}
}

747 
	gSpSnù≥t
::
	$gë_ªt_vÆ
() {

748  
	`gë_ßved_ªg
(
Dynö°
::
x86_64
::
øx
);

749 
	}
}

	@SpContext.C

1 
	~"SpC⁄ãxt.h
"

2 
	~"SpPr›ñÀr.h
"

3 
	~"SpP¨£r.h
"

4 
	~"SpUtûs.h
"

7 
usög
 
	gsk
::
Føme
;

8 
usög
 
	gsk
::
WÆkî
;

10 
usög
 
	gsb
::
Symèb
;

12 
usög
 
	g•
::
SpP¨£r
;

13 
usög
 
	g•
::
SpC⁄ãxt
;

14 
usög
 
	g•
::
SpPr›ñÀr
;

16 
usög
 
	gph
::
Poöt
;

17 
usög
 
	gph
::
P©chMgr
;

18 
usög
 
	gph
::
AddrS∑˚
;

19 
usög
 
	gph
::
P©chObje˘
;

20 
usög
 
	gph
::
P©chMgrPå
;

21 
usög
 
	gph
::
P©chFun˘i⁄
;

23 
usög
 
	g≥
::
SymèbCodeSour˚
;

26 
	gSpC⁄ãxt
::
SpC⁄ãxt
(
SpPr›ñÀr
::
±r
 
p
,

27 
SpP¨£r
::
±r
 
∑r£r
) {

28 
öô_¥›ñÀr_
 = 
p
;

29 
	g∑r£r_
 = 
∑r£r
;

30 
	gùc_mgr_
 = 
NULL
;

31 
	gÆlow_ùc_
 = 
Ál£
;

34 
∑r£
();

36 
öô_wñl_known_libs
();

39 
SpC⁄ãxt
*

40 
	gSpC⁄ãxt
::
¸óã
(
SpPr›ñÀr
::
±r
 
¥›ñÀr
,

41 
°rög
 
öô_bef‹e
,

42 
°rög
 
öô_a·î
,

43 
SpP¨£r
::
±r
 
∑r£r
) {

44 
SpC⁄ãxt
* 
ªt
 = 
√w
 SpC⁄ãxt(
¥›ñÀr
,

45 
∑r£r
);

46 
as£π
(
ªt
);

47 
	gªt
->
	göô_bef‹e_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
(
öô_bef‹e
);

48 
	gªt
->
	göô_a·î_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
(
öô_a·î
);

49 
	gªt
->
	gwøµî_bef‹e_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
("wrapper_before");

50 
	gªt
->
	gwøµî_a·î_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
("wrapper_after");

51  
	gªt
;

56 
	gSpC⁄ãxt
::
	$öô_wñl_known_libs
() {

57 
wñl_known_libs_
.
	`push_back
("libc-");

58 
wñl_known_libs_
.
	`push_back
("libm-");

59 
wñl_known_libs_
.
	`push_back
("ld-");

60 
wñl_known_libs_
.
	`push_back
("libdl-");

61 
wñl_known_libs_
.
	`push_back
("libstdc++");

62 
wñl_known_libs_
.
	`push_back
("libgcc");

63 
wñl_known_libs_
.
	`push_back
("libagent.so");

64 
wñl_known_libs_
.
	`push_back
("libpthread-");

66 i‡(
∑r£r_
->
	`öje˘ed
())

67 
wñl_known_libs_
.
	`push_back
(
∑r£r_
->
	`gë_agít_«me
());

68 
	}
}

76 
P©chFun˘i⁄
*

77 
	gSpC⁄ãxt
::
	$gë_fú°_ö°_func
() {

79 
°d
::
ve˘‹
<
Føme
> 
°ackwÆk
;

80 
WÆkî
 *
wÆkî
 = WÆkî::
	`√wWÆkî
();

81 
wÆkî
->
	`wÆkSèck
(
°ackwÆk
);

82 
i
=0; i<
°ackwÆk
.
	`size
(); i++) {

83 
°rög
 
s
;

84 
°ackwÆk
[
i
].
	`gëName
(
s
);

85 
°rög
 
l
;

86 
Dynö°
::
Off£t
 
o
;

87 * 
symobj
;

88 
°ackwÆk
[
i
].
	`gëLibOff£t
(
l
, 
o
, 
symobj
);

89 #i‚de‡
SP_RELEASE


90 
	`•_debug
("STACKWALK - %s inÜibrary %s with offset %lx",

91 
s
.
	`c_°r
(), 
	`•_fûíame
(
l
.c_°r()), 
o
);

94 i‡(
	`is_wñl_known_lib
(
l
)) {

95 #i‚de‡
SP_RELEASE


96 
	`•_debug
("SKIPPED - Fun˘i⁄ %†i†ö wñ»know¿lib", 
s
.
	`c_°r
());

102 
P©chFun˘i⁄
* 
func
 = 
∑r£r_
->
	`födFun˘i⁄
(
s
);

103 i‡(!
func
) {

104 #i‚de‡
SP_RELEASE


105 
	`•_debug
("SKIPPED - Fun˘i⁄ %†ˇ¬Ÿ bêªsﬁved", 
s
.
	`c_°r
());

111 #i‚de‡
SP_RELEASE


112 
	`•_debug
("FOUND - Fun˘i⁄ %†i†thêfú° in°rumíèbÀ fun˘i⁄", 
s
.
	`c_°r
());

114  
func
;

117  
NULL
;

118 
	}
}

121 
	gSpC⁄ãxt
::
	$∑r£
() {

122 #i‚de‡
SP_RELEASE


123 
	`•_debug
("START PARSING - startÖarsing binary code");

125 
mgr_
 = 
∑r£r_
->
	`∑r£
();

126 #i‚de‡
SP_RELEASE


127 
	`•_debug
("FINISH PARSING - finishÖarsing binary code");

129 
	}
}

131 
boﬁ


132 
	gSpC⁄ãxt
::
	$is_wñl_known_lib
(
°rög
 
lib
) {

133 
i
 = 0; i < 
wñl_known_libs_
.
	`size
(); i++) {

134 i‡(
lib
.
	`föd
(
wñl_known_libs_
[
i
]Ë!
°rög
::
≈os
Ë 
åue
;

136  
Ál£
;

137 
	}
}

141 
	gSpC⁄ãxt
::
	$ª°‹e
() {

143 
	`siga˘i⁄
(
SIGTRAP
, &
ﬁd_a˘_
, 
NULL
);

144 
	}
}

147 
P©chFun˘i⁄
*

148 
	gSpC⁄ãxt
::
	$ˇŒì
(
Poöt
* 
±
) {

149  
	`∑r£r
()->
	`ˇŒì
(
±
, 
dúe˘ˇŒ_⁄ly_
 =
Ál£
);

150 
	}
}

152 
	gSpC⁄ãxt
::~
	$SpC⁄ãxt
() {

153 
dñëe
 
ùc_mgr_
;

154 
	}
}

157 
	gSpC⁄ãxt
::
	$£t_Ælow_ùc
(
boﬁ
 
b
) {

158 
Ælow_ùc_
 = 
b
;

159 i‡(
b
 && !
ùc_mgr_
) {

160 
ùc_mgr_
 = 
√w
 
	`SpIpcMgr
();

162 
	}
}

	@SpEvent.C

1 
	~"SpEvít.h
"

2 
	~"SpC⁄ãxt.h
"

3 
	~"SpP¨£r.h
"

5 
usög
 
	g•
::
SpEvít
;

6 
usög
 
	g•
::
SpP¨£r
;

7 
usög
 
	g•
::
SpC⁄ãxt
;

8 
usög
 
	g•
::
SyncEvít
;

9 
usög
 
	g•
::
AsyncEvít
;

10 
usög
 
	g•
::
SpPr›ñÀr
;

12 
usög
 
	gph
::
P©chFun˘i⁄
;

14 
«me•a˚
 
	g•
 {

16 
	gSpEvít
::
SpEvít
() {

20 
SpEvít
::
ªgi°î_evít
(
SpC⁄ãxt
* 
c
) {

25 (*
evít_h™dÀr_t
)(, 
	tsigöfo_t
*, *);

27 
SpC⁄ãxt
* 
	gg_c⁄ãxt
 = 
NULL
;

30 
async_evít_h™dÀr
(
signum
, 
sigöfo_t
* 
öfo
, * 
c⁄ãxt
) {

31 
	g•
::
g_c⁄ãxt
->
∑r£
();

32 
P©chFun˘i⁄
* 
	gf
 = 
•
::
g_c⁄ãxt
->
gë_fú°_ö°_func
();

33 
	gg_c⁄ãxt
->
öô_¥›ñÀr
()->
go
(
f
, 
g_c⁄ãxt
,

34 
g_c⁄ãxt
->
öô_bef‹e
(),

35 
g_c⁄ãxt
->
öô_a·î
());

38 
	gAsyncEvít
::
AsyncEvít
(
signum
, 
£c
)

39 : 
a·î_£cs_
(
£c
), 
signum_
(
signum
) {

40 
	gh™dÀr_
 = (*)
async_evít_h™dÀr
;

44 
	gAsyncEvít
::
ªgi°î_evít
(
SpC⁄ãxt
* 
c
) {

45 
g_c⁄ãxt
 = 
c
;

46 
siga˘i⁄
 
	ga˘
;

47 
	ga˘
.
	gß_siga˘i⁄
 = (
evít_h™dÀr_t
)
h™dÀr_
;

48 
	ga˘
.
	gß_Êags
 = 
SA_SIGINFO
;

49 
siga˘i⁄
(
signum_
, &
a˘
, 
NULL
);

50 i‡(
	gsignum_
 =
SIGALRM
Ë
Æ¨m
(
a·î_£cs_
);

55 
sync_evít_h™dÀr
(
signum
, 
sigöfo_t
* 
öfo
, * 
c⁄ãxt
) {

56 
	gg_c⁄ãxt
->
∑r£
();

57 
P©chFun˘i⁄
* 
	gf
 = 
g_c⁄ãxt
->
gë_fú°_ö°_func
();

58 
	gg_c⁄ãxt
->
öô_¥›ñÀr
()->
go
(
f
, 
g_c⁄ãxt
,

59 
g_c⁄ãxt
->
öô_bef‹e
(),

60 
g_c⁄ãxt
->
öô_a·î
());

63 
	gSyncEvít
::
SyncEvít
(
°d
::
°rög
 
func_«me
, 
£c
)

64 : 
AsyncEvít
(
SIGALRM
, 
£c
), 
func_«me_
(
func_«me
) {

65 
	gh™dÀr_
 = (*)
sync_evít_h™dÀr
;

70 
	gSyncEvít
::
ªgi°î_evít
(
SpC⁄ãxt
* 
c
) {

71 
g_c⁄ãxt
 = 
c
;

73 i‡(!
	gg_c⁄ãxt
->
∑r£r
()->
öje˘ed
()) {

74 #i‚de‡
SP_RELEASE


75 
•_debug
("PRELOAD -Öreloadágent.so,ánd instrument main()");

77 
P©chFun˘i⁄
* 
	gf
 = 
c
->
∑r£r
()->
födFun˘i⁄
("main");

78 
	gc
->
öô_¥›ñÀr
()->
go
(
f
, 
c
, c->
öô_bef‹e
(), c->
öô_a·î
());

80 
siga˘i⁄
 
	ga˘
;

81 
	ga˘
.
	gß_siga˘i⁄
 = (
evít_h™dÀr_t
)
h™dÀr_
;

82 
	ga˘
.
	gß_Êags
 = 
SA_SIGINFO
;

83 
siga˘i⁄
(
signum_
, &
a˘
, 
NULL
);

84 i‡(
	gsignum_
 =
SIGALRM
Ë
Æ¨m
(
a·î_£cs_
);

	@SpInstrumenter.C

1 
	~"SpIn°rumíãr.h
"

2 
	~"SpSnù≥t.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpAddrS∑˚.h
"

5 
	~"SpUtûs.h
"

6 
	~"SpPoöt.h
"

8 
usög
 
	gdt
::
Addªss
;

10 
usög
 
	g•
::
SpSnù≥t
;

11 
usög
 
	g•
::
SpC⁄ãxt
;

12 
usög
 
	g•
::
SpSnù≥t
;

13 
usög
 
	g•
::
SpAddrS∑˚
;

14 
usög
 
	g•
::
SpIn°rumíãr
;

16 
usög
 
	gö
::
In°ru˘i⁄
;

18 
usög
 
	gph
::
Poöt
;

19 
usög
 
	gph
::
Snù≥t
;

20 
usög
 
	gph
::
AddrS∑˚
;

21 
usög
 
	gph
::
P©chBlock
;

22 
usög
 
	gph
::
P©chObje˘
;

23 
usög
 
	gph
::
P©chMgrPå
;

24 
usög
 
	gph
::
In°™˚På
;

25 
usög
 
	gph
::
P©chFun˘i⁄
;

26 
usög
 
	gph
::
PushBackComm™d
;

28 
«me•a˚
 
	g•
 {

30 
SpC⁄ãxt
* 
g_c⁄ãxt
;

35 
SpIn°rumíãr
*

36 
	gSpIn°rumíãr
::
¸óã
(
AddrS∑˚
* 
as
) {

37  
√w
 
SpIn°rumíãr
(
as
);

41 
	gSpIn°rumíãr
::
SpIn°rumíãr
(
AddrS∑˚
* 
as
)

42 : 
In°rumíãr
(
as
) {

48 
°d
::
	tm≠
<
	tAddªss
, 
	tSpSnù≥t
::
	t±r
> 
	tIn°M≠
;

49 
In°M≠
 
	gg_ö°_m≠
;

55 
	gSpIn°rumíãr
::
å≠_h™dÀr
(
sig
, 
sigöfo_t
* 
öfo
, * 
c
) {

56 
Addªss
 
	gpc
 = 
SpSnù≥t
::
gë_¥e_sig«l_pc
(
c
) - 1;

58 
	gIn°M≠
& 
	gö°_m≠
 = 
g_ö°_m≠
;

59 i‡(
	gö°_m≠
.
föd
(
pc
Ë=
ö°_m≠
.
íd
()) {

64 
	gSpSnù≥t
::
±r
 
•_¢ù
 = 
ö°_m≠
[
pc
];

65 
Poöt
* 
	g±
 = 
•_¢ù
->
poöt
();

67 * 
	gblob
 = (*)
•_¢ù
->
buf
();

68 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

69 
P©chMgrPå
 
	gmgr
 = 
g_c⁄ãxt
->
mgr
();

70 
SpAddrS∑˚
* 
	gas
 = 
dy«mic_ˇ°
<SpAddrS∑˚*>(
mgr
->
as
());

71 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
•_¢ù
->
size
(), 
≥rm
)) {

72 
	gas
->
dump_mem_m≠s
();

73 
exô
(0);

77 
	gSpSnù≥t
::
£t_pc
((
Addªss
)
blob
, 
c
);

81 
boﬁ


82 
	gSpIn°rumíãr
::
run
() {

85 
Comm™dLi°
::
ôî©‹
 
c
 = 
u£r_comm™ds_
.
begö
(); 
	gc
 !u£r_comm™ds_.
íd
(); c++) {

86 
PushBackComm™d
* 
	gcomm™d
 = 
°©ic_ˇ°
<PushBackComm™d*>(*
c
);

88 i‡(
	gcomm™d
) {

89 
In°™˚På
 
	gö°™˚
 = 
comm™d
->
ö°™˚
();

90 
Poöt
* 
	g±
 = 
ö°™˚
->
poöt
();

91 
SpPoöt
* 
	g•t
 = 
°©ic_ˇ°
<SpPoöt*>(
±
);

94 i‡(!
	g±
->
gëCÆÀe
(Ë&& 
	gg_c⁄ãxt
->
dúe˘ˇŒ_⁄ly
()) ;

96 #i‚de‡
SP_RELEASE


97 i‡(
	g•t
->
ö°rumíãd
()) {

98 
•_debug
("SKIPED -Öi⁄à%lx i†ö°rumíãd, skù it", 
±
->
block
()->
œ°
());

101 i‡(!
	g•t
->
ö°rumíãd
()) {

102 
	gSnù≥t
<
	gSpSnù≥t
::
±r
>::
På
 
¢ù
 = 
Snù≥t
<
SpSnù≥t
::±r>::
gë
(
ö°™˚
->
¢ù≥t
());

103 
	gSpSnù≥t
::
±r
 
•_¢ù
 = 
¢ù
->
ªp
();

104 
	g•t
->
£t_¢ù
(
•_¢ù
);

105 
Addªss
 
	geù
 = 
±
->
block
()->
œ°
();

106 * 
	gö¢
 = (*)
eù
;

108 
Addªss
 
	gö¢_size
 = 
±
->
block
()->
íd
(Ë- 
eù
;

109 
Addªss
 
	gªt_addr
 = 
±
->
block
()->
íd
();

110 
	gIn°ru˘i⁄
::
På
 
ˇŒö¢
 = 
±
->
block
()->
gëIn¢
(
eù
);

113 i‡(
	gˇŒö¢
->
gëC©eg‹y
(Ë=
ö
::
c_BønchIn¢
) {

114 #i‚de‡
SP_RELEASE


115 
•_debug
("TAIL CALL -Öoöà%lx i†®èû cÆl", 
±
->
block
()->
œ°
());

117 
	g•t
->
£t_èûˇŒ
(
åue
);

118 
	gªt_addr
 = 0;

121 * 
	gblob
 = (*)
•_¢ù
->
buf
();

122 
boﬁ
 
	gªÆloc
 = 
Ál£
;

124 
	gREALLOC
:

125 
ªl_addr
 = ()
blob
 - ()
eù
;

130 
	g•_¢ù
->
£t_‹ig_ˇŒ_ö¢
(
ˇŒö¢
);

133 i‡((
	gö¢
[0] != ()0xe8)) {

135 
boﬁ
 
jump_abs
 = 
Ál£
;

136 i‡(!
	g•
::
is_di•32
(
ªl_addr
)Ë
jump_abs
 = 
åue
;

139 i‡(
ö°Æl_ödúe˘
(
•t
, 
•_¢ù
, 
jump_abs
, 
ªt_addr
)) {

140 
	g•t
->
£t_ö°rumíãd
(
åue
);

143 i‡(!
	gªÆloc
) {

144 
	gªÆloc
 = 
åue
;

145 
	gblob
 = (*)
•_¢ù
->
ªÆloc
();

146 i‡(
	gblob
Ë
	gREALLOC
;

149 i‡(
	gªÆloc
 && !
	g•t
->
ö°rumíãd
()) {

150 
•_¥öt
("FAILEDÅo use JUMP - TRY TO USE TRAP");

153 
siga˘i⁄
 
	ga˘
;

154 
	ga˘
.
	gß_siga˘i⁄
 = 
SpIn°rumíãr
::
å≠_h™dÀr
;

155 
	ga˘
.
	gß_Êags
 = 
SA_SIGINFO
;

156 
siga˘i⁄
 
	gﬁd_a˘
;

157 
siga˘i⁄
(
SIGTRAP
, &
a˘
, &
ﬁd_a˘
);

159 
	gg_ö°_m≠
[
eù
] = 
•_¢ù
;

160 
	gblob
 = 
•_¢ù
->
blob
(
ªt_addr
);

162 i‡(
ö°Æl_å≠
(
•t
, 
blob
, 
•_¢ù
->
size
())) {

163 
	g•t
->
£t_ö°Æl_mëhod
(
SP_TRAP
);

164 
	g•t
->
£t_ö°rumíãd
(
åue
);

166 
•_¥öt
("FAILEDÅo use TRAP,Ço instrumentation forÅhisÖoint");

173 
	gblob
 = 
•_¢ù
->
blob
(
ªt_addr
);

175 i‡(
ö°Æl_dúe˘
(
•t
, 
blob
, 
•_¢ù
->
size
())) {

176 
	g•t
->
£t_ö°Æl_mëhod
(
SP_RELOC_INSN
);

177 
	g•t
->
£t_ö°rumíãd
(
åue
);

179 
•_¥öt
("FAILED - FailedÅo install instrumentationát %lx for calling %s",

180 
±
->
block
()->
œ°
(), 
g_c⁄ãxt
->
∑r£r
()->
ˇŒì
’t)->
«me
().
c_°r
());

186 
	gu£r_comm™ds_
.
˛ór
();

188  
	gåue
;

191 
boﬁ


192 
	gSpIn°rumíãr
::
ö°Æl_dúe˘
(
SpPoöt
* 
poöt
, * 
blob
, 
size_t
 
blob_size
) {

194 
	gjump
[5];

195 * 
	gp
 = 
jump
;

196 *
	gp
++ = 0xe9;

197 * 
	gÕ
 = (*)
p
;

200 
P©chObje˘
* 
	gobj
 = 
poöt
->
block
()->
obje˘
();

201 * 
	gaddr
 = (*)
poöt
->
block
()->
œ°
();

202 
size_t
 
	gö¢_Àngth
 = 
poöt
->
block
()->
íd
(Ë-Öoöt->block()->
œ°
();

203 *
	gÕ
 = ()
blob
 - ()
addr
 - 
ö¢_Àngth
;

206 
SpAddrS∑˚
* 
	gas
 = 
°©ic_ˇ°
<SpAddrS∑˚*>(
as_
);

207 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

208 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
, 
≥rm
)) {

209 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
jump
, 5);

211 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

215 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
blob_size
, 
≥rm
)) {

216 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹ blobáà%lx", 
blob
);

217 
	gas
->
dump_mem_m≠s
();

218 
exô
(0);

222 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
)) {

223 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

226  
	gåue
;

229 
boﬁ


230 
	gSpIn°rumíãr
::
ö°Æl_ödúe˘
(
SpPoöt
* 
poöt
, 
SpSnù≥t
::
±r
 
¢ù
,

231 
boﬁ
 
jump_abs
, 
Addªss
 
ªt_addr
) {

232 
P©chBlock
* 
	gblk
 = 
poöt
->
block
();

233 
size_t
 
	gblk_size
 = 
blk
->
size
();

234 
	g°rög
& 
	g‹ig_blk
 = 
¢ù
->
‹ig_blk
();

236 * 
	gøw_blk
 = (*)
blk
->
°¨t
();

237 
	gi
 = 0; i < 
	gblk_size
; i++) {

238 
	g‹ig_blk
 +
øw_blk
[
i
];

241 
size_t
 
	glimô
 = 0;

242 * 
	gaddr
 = 
NULL
;

244 
SpAddrS∑˚
* 
	gas
 = 
°©ic_ˇ°
<SpAddrS∑˚*>(
as_
);

245 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

247 
	gö¢
[64];

248 i‡(!
	gjump_abs
) {

250 
	glimô
 = 5;

251 * 
	gp
 = 
ö¢
;

252 *
	gp
++ = 0xe9;

253 * 
	gÕ
 = (*)
p
;

254 *
	gÕ
 = ()
¢ù
->
buf
(Ë- ()
blk
->
°¨t
() - 5;

256 
	glimô
 = 
¢ù
->
jump_abs_size
();

258 
	g°©ic_ˇ°
<
	gSpPoöt
*>(
	gpoöt
)->
¢ù
()->
emô_jump_abs
(()¢ù->
buf
(), 
ö¢
, 0, 
åue
);

261 i‡(
	gblk_size
 >
limô
) {

262 
poöt
->
£t_ö°Æl_mëhod
(
SP_RELOC_BLK
);

263  
ö°Æl_jump
(
blk
, 
ö¢
, 
limô
, 
¢ù
, 
ªt_addr
);

266 
	gpoöt
->
£t_ö°Æl_mëhod
(
SP_SPRINGBOARD
);

267  
ö°Æl_•rög
(
blk
, 
¢ù
, 
ªt_addr
);

270 
boﬁ


271 
	gSpIn°rumíãr
::
ö°Æl_jump
(
P©chBlock
* 
blk
,

272 * 
ö¢
, 
size_t
 
ö¢_size
,

273 
SpSnù≥t
::
±r
 
¢ù
,

274 
Addªss
 
ªt_addr
) {

277 * 
	gblob
 = 
¢ù
->
blob
(
ªt_addr
, 
åue
);

279 
P©chObje˘
* 
	gobj
 = 
blk
->
obj
();

280 
SpAddrS∑˚
* 
	gas
 = 
°©ic_ˇ°
<SpAddrS∑˚*>(
as_
);

281 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

282 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
¢ù
->
size
(), 
≥rm
)) {

283 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹ blobáà%lx", 
blob
);

284 
	gas
->
dump_mem_m≠s
();

285 
exô
(0);

288 * 
	gaddr
 = (*)
blk
->
°¨t
();

291 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_size
, 
≥rm
)) {

292 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
ö¢
, 
ö¢_size
);

294 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

298 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_size
)) {

299 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

301 #i‚de‡
SP_RELEASE


302 
•_debug
("USE BLK-RELOC -Öi⁄à%lx i†ö°rumíãd usög cÆ»blockÑñoˇti⁄", 
blk
->
œ°
());

304  
	gåue
;

308 
boﬁ


309 
	gSpIn°rumíãr
::
ö°Æl_•rög
(
P©chBlock
* 
ˇŒblk
,

310 
SpSnù≥t
::
±r
 
¢ù
,

311 
Addªss
 
ªt_addr
) {

319 
P©chBlock
* 
	g•rögblk
 = 
¢ù
->
•rög_blk
();

320 i‡(!
	g•rögblk
Ë 
	gÁl£
;

323 * 
	gblob
 = 
¢ù
->
blob
(
ªt_addr
, 
åue
,Årue);

324 
P©chObje˘
* 
	gobj
 = 
ˇŒblk
->
obj
();

325 
SpAddrS∑˚
* 
	gas
 = 
°©ic_ˇ°
<SpAddrS∑˚*>(
as_
);

326 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

327 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
¢ù
->
size
(), 
≥rm
)) {

328 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹ blobáà%lx", 
blob
);

329 
	gas
->
dump_mem_m≠s
();

330 
exô
(0);

334 * 
	g•rög
 = 
¢ù
->
•rög
(
•rögblk
->
œ°
());

335 
	gobj
 = 
•rögblk
->
obj
();

336 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
•rög
, 
¢ù
->
•rög_size
(), 
≥rm
)) {

337 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹Ññoˇãd s¥ög blkáà%lx", 
•rög
);

338 
	gas
->
dump_mem_m≠s
();

339 
exô
(0);

348 
	g•rögblk_ö¢
[64];

351 
size_t
 
	goff
 = 0;

352 
size_t
 
	gisize
 = 
¢ù
->
emô_jump_abs
(()
•rög
, 
•rögblk_ö¢
, 
off
, 
åue
);

353 
	goff
 +
isize
;

354 
size_t
 
	gˇŒ_blk_jmp_åg
 = 
off
;

355 
	goff
 = 
¢ù
->
emô_jump_abs
(()
blob
, 
•rögblk_ö¢
, 
off
, 
åue
);

356 
	goff
 +
isize
;

359 * 
	gaddr
 = (*)
•rögblk
->
°¨t
();

360 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
•rögblk
->
size
(), 
≥rm
)) {

361 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
•rögblk_ö¢
, 
off
);

363 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

366 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
•rögblk
->
size
())) {

367 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

375 
	gaddr
 = (*)
ˇŒblk
->
°¨t
();

376 
	gˇŒblk_ö¢
[2];

377 
	gˇŒblk_ö¢
[0] = 0xeb;

378 
	gˇŒblk_ö¢
[1] = ()(
•rögblk
->
°¨t
(Ë+ 
ˇŒ_blk_jmp_åg
 - (()
addr
 + 2));

380 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ˇŒblk
->
size
(), 
≥rm
)) {

381 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
ˇŒblk_ö¢
, 2);

383 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

386 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ˇŒblk
->
size
())) {

387 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

389 #i‚de‡
SP_RELEASE


390 
•_debug
("USE SPRING -Öiont %lx is instrumented using 1-hop spring",

391 
ˇŒblk
->
œ°
());

394  
	gåue
;

398 
boﬁ


399 
	gSpIn°rumíãr
::
ö°Æl_å≠
(
SpPoöt
* 
poöt
, * 
blob
, 
size_t
 
blob_size
) {

401 
°rög
 
	göt3
;

402 
	göt3
 += ()0xcc;

404 
P©chObje˘
* 
	gobj
 = 
poöt
->
block
()->
obje˘
();

405 * 
	gaddr
 = (*)
poöt
->
block
()->
œ°
();

406 
size_t
 
	gö¢_Àngth
 = 
poöt
->
block
()->
íd
(Ë-Öoöt->block()->
œ°
();

407 
	gi
 = 0; i < (
	gö¢_Àngth
-1); i++) {

408 
	göt3
 += ()0x90;

412 
SpAddrS∑˚
* 
	gas
 = 
dy«mic_ˇ°
<SpAddrS∑˚*>(
as_
);

413 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

414 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
, 
≥rm
)) {

415  
	gÁl£
;

417 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
öt3
.
c_°r
(), i¡3.
size
());

421 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
)) {

422  
	gÁl£
;

424 #i‚de‡
SP_RELEASE


425 
•_debug
("USE TRAP -Öi⁄à%lx i†ö°rumíãd usögÅøp", 
poöt
->
block
()->
œ°
());

427  
	gåue
;

	@SpIpcMgr.C

1 
	~"SpIpcMgr.h
"

2 
	~"SpPoöt.h
"

3 
	~"SpC⁄ãxt.h
"

5 
usög
 
	gph
::
P©chFun˘i⁄
;

7 
«me•a˚
 
	g•
 {

9 
SpC⁄ãxt
* 
g_c⁄ãxt
;

11 
	#TRACING_ID
 1987

	)

12 
	#TRACING_SIZE
 32768

	)

18 
	gSpIpcMgr
::
SpIpcMgr
() {

19 
pùe_w‹kî_
 = 
√w
 
SpPùeW‹kî
;

20 
	gw‹kî_£t_
.
ö£π
(
pùe_w‹kî_
);

22 
	gt˝_w‹kî_
 = 
√w
 
SpT˝W‹kî
;

23 
	gw‹kî_£t_
.
ö£π
(
t˝_w‹kî_
);

25 
	gudp_w‹kî_
 = 
√w
 
SpUdpW‹kî
;

26 
	gw‹kî_£t_
.
ö£π
(
udp_w‹kî_
);

29 
	gSpIpcMgr
::~
SpIpcMgr
() {

31 
dñëe
 
pùe_w‹kî_
;

32 
dñëe
 
	gt˝_w‹kî_
;

33 
dñëe
 
	gudp_w‹kî_
;

38 
boﬁ


39 
	gSpIpcMgr
::
is_pùe
(
fd
) {

40 
°©
 
s
;

41 i‡(
f°©
(
fd
, &
s
Ë=-1Ë 
Ál£
;

42 i‡(
S_ISFIFO
(
s
.
°_mode
)) {

43  
	gåue
;

45  
	gÁl£
;

48 
boﬁ


49 
	gSpIpcMgr
::
is_£ndî
(c⁄° * 
f
) {

50 i‡(
°rcmp
(
f
, "write") == 0 ||

51 
°rcmp
(
f
, "send") == 0)

52  
åue
;

54  
	gÁl£
;

57 
boﬁ


58 
	gSpIpcMgr
::
is_ª˚ivî
(c⁄° * 
f
) {

59 i‡(
°rcmp
(
f
, "read") == 0 ||

60 
°rcmp
(
f
, "recv") == 0)

61  
åue
;

63  
	gÁl£
;

66 
boﬁ


67 
	gSpIpcMgr
::
is_ùc
(
fd
) {

68  (
is_pùe
(
fd
Ë|| 
is_t˝
(fdË|| 
is_udp
(fd));

71 
boﬁ


72 
	gSpIpcMgr
::
is_f‹k
(c⁄° * 
f
) {

73 i‡(
°rcmp
(
f
, "f‹k"Ë=0Ë 
åue
;

74  
	gÁl£
;

77 
	gSpIpcMgr
::
°¨t_åacög
() {

78 
W‹kîSë
::
ôî©‹
 
wi
 = 
w‹kî_£t_
.
begö
(); 
	gwi
 !w‹kî_£t_.
íd
(); wi++) {

79 i‡((*
	gwi
)->
°¨t_åacög
())  1;

110 
boﬁ


111 
	gSpIpcMgr
::
¥e_bef‹e
(
SpPoöt
* 
±
) {

112 
P©chFun˘i⁄
* 
f
 = 
•
::
ˇŒì
(
±
);

113 i‡(!
	gf
Ë 
	gÁl£
;

116 
	g•
::
SpIpcMgr
* 
ùc_mgr
 = 
•
::
g_c⁄ãxt
->ipc_mgr();

119 i‡(!
	gùc_mgr
->
is_£ndî
(
f
->
«me
().
c_°r
())) {

120 #i‚de‡
SP_RELEASE


121 
•_debug
("NON IPC FUNC - %s(Ëi†nŸá wrôê‹ síd", 
f
->
«me
().
c_°r
());

123  
	gåue
;

125 #i‚de‡
SP_RELEASE


126 
•_debug
("POTENTIAL IPC - %s(Ëi†®wrôê‹ síd", 
f
->
«me
().
c_°r
());

131 
ArgumítH™dÀ
 
	gh
;

132 * 
	gfd
 = (*)
•
::
p›_¨gumít
(
±
, &
h
, ());

134 
SpIpcW‹kî
* 
	gw‹kî
 = 
NULL
;

137 i‡(
	gùc_mgr
->
is_pùe
(*
fd
)) {

138 
	gw‹kî
 = 
ùc_mgr
->
pùe_w‹kî
();

141 i‡(
	gùc_mgr
->
is_t˝
(*
fd
)) {

142 
	gw‹kî
 = 
ùc_mgr
->
t˝_w‹kî
();

145 i‡(
	gùc_mgr
->
is_udp
(*
fd
)) {

146 
	gw‹kî
 = 
ùc_mgr
->
udp_w‹kî
();

148  
	gåue
;

151 
SpCh™√l
* 
	gc
 = 
w‹kî
->
gë_ch™√l
(*
fd
);

152 i‡(!
	gc
) {

156 
•_¥öt
("PIPEÅo: %d", 
c
->
ªmŸe_pid
);

157 
	gw‹kî
->
£t_°¨t_åacög
(1, 
c
->
ªmŸe_pid
);

163  
	gåue
;

166 
boﬁ


167 
	gSpIpcMgr
::
¥e_a·î
(
SpPoöt
* 
±
) {

168 
P©chFun˘i⁄
* 
f
 = 
•
::
ˇŒì
(
±
);

169 i‡(!
	gf
Ë 
	gÁl£
;

172 
	g•
::
SpIpcMgr
* 
ùc_mgr
 = 
•
::
g_c⁄ãxt
->ipc_mgr();

174 i‡(
	gùc_mgr
->
is_f‹k
(
f
->
«me
().
c_°r
())) {

175 
	gpid
 = 
•
::
ªtvÆ
(
±
);

177 i‡(
	gpid
 == 0) {

178 
ùc_mgr
->
pùe_w‹kî
()->
£t_°¨t_åacög
(0, 
gëpid
());

186  
	gåue
;

194 
	gSpPùeW‹kî
::
SpPùeW‹kî
() {

195 
åacög_öã∫Æ
(&
°¨t_åacög_
);

196 
	g°¨t_åacög_
[
gëpid
()] = 1;

199 
	gSpPùeW‹kî
::~
SpPùeW‹kî
() {

200 
Ch™√lM≠
::
ôî©‹
 
i
 = 
ch™√l_m≠_
.
begö
(); 
	gi
 !ch™√l_m≠_.
íd
(); i++) {

201 
dñëe
 
	gi
->
	g£c⁄d
;

206 
	gSpPùeW‹kî
::
åacög_öã∫Æ
(** 
°¨t_åacög
) {

207 
shmid
;

208 i‡((
	gshmid
 = 
shmgë
(
TRACING_ID
, 
TRACING_SIZE
, 
IPC_CREAT
 | 0666)) < 0) {

209 
•_≥º‹
("ERROR: c™nŸ cª©êsh¨ed mem‹y wôh id %d", 
TRACING_ID
);

212 * 
	gshm
 = 
NULL
;

213 i‡(()(
	gshm
 = (*)
shm©
(
shmid
, 
NULL
, 0)) == ()-1) {

214 
•_≥º‹
("ERROR: cannot get shared memory");

216 *
	g°¨t_åacög
 = 
shm
;

219 
	gSpPùeW‹kî
::
£t_°¨t_åacög
(
yes_‹_no
, 
pid_t
 
pid
) {

220 
	g°¨t_åacög_
[
pid
] = 
yes_‹_no
;

223 
	gSpPùeW‹kî
::
°¨t_åacög
() {

224  
°¨t_åacög_
[
gëpid
()];

227 
boﬁ
 
	gSpPùeW‹kî
::
öje˘
(
SpCh™√l
*) {

232 
	gSpPùeW‹kî
::
pid_u£s_öode
(
pid
, 
öode
) {

234 
	#MAXLEN
 255

	)

235 
DIR
 *
	gdú
;

236 
	gãmp_node
;

237 
dúít
 *
	gde
;

238 
	g«me
[
MAXLEN
], 
	gbuf„r
[MAXLEN];

239 
•rötf
(
«me
, "/¥oc/%u/fd", 
pid
);

241 i‡((
	gdú
 = 
›ídú
(
«me
)) == 0) {

245 (
	gde
 = 
ªaddú
(
dú
)) != 0) {

246 i‡(
isdigô
(
de
->
d_«me
[0])) {

247 
•rötf
(
«me
, "/¥oc/%u/fd/%s", 
pid
, 
de
->
d_«me
);

248 i‡(
ªadlök
(
«me
, 
buf„r
, 
MAXLEN
) < 0) {

249 
≥º‹
("pid_uses_inode:ÑeadlinkÉrror");

252 i‡(
ssˇnf
(
buf„r
, "pùe:[%u]", &
ãmp_node
) == 1 &&

253 
ãmp_node
 =
öode
) {

254 
˛o£dú
(
dú
);

259 
˛o£dú
(
dú
);

266 
	gSpPùeW‹kî
::
gë_öode_‰om_fd
(
fd
) {

267 
°©
 
s
;

268 i‡(
f°©
(
fd
, &
s
) != -1) {

269  
s
.
°_öo
;

275 
	gSpPùeW‹kî
::
gë_pids_‰om_fd
(
fd
, 
PidSë
& 
pid_£t
) {

276 
	gpid
, 
	grv
, 
	gnum_found
 = 0;

277 
DIR
 *
	gdú
;

278 *
	gï
;

279 
dúít
 *
	gde
;

281 i‡((
	gdú
 = 
›ídú
("/proc")) == 0) {

282 
•_≥º‹
("ERROR: cannotáccess /proc");

284 (
	gde
 = 
ªaddú
(
dú
)) != 0) {

285 i‡(
isdigô
(
de
->
d_«me
[0])) {

286 
pid
 = 
°πﬁ
(
de
->
d_«me
, &
ï
, 10);

287 i‡(
	gï
 =0 || *
ï
 !0 || 
pid
 < 0) {

288 
•_≥º‹
("ERROR: såtﬁ faûed o¿%s\n", 
de
->
d_«me
);

290 i‡(
pid_u£s_öode
(
pid
, 
gë_öode_‰om_fd
(
fd
))) {

291 
	gpid_£t
.
ö£π
(
pid
);

295 
˛o£dú
(
dú
);

298 
SpCh™√l
* 
	gSpPùeW‹kî
::
gë_ch™√l
(
fd
) {

299 
öode
 = 
gë_öode_‰om_fd
(
fd
);

300 i‡(
	gch™√l_m≠_
.
föd
(
öode
Ë!
ch™√l_m≠_
.
íd
())

301  
ch™√l_m≠_
[
öode
];

303 
SpCh™√l
* 
	gc
 = 
√w
 
PùeCh™√l
;

304 
	gc
->
	gloˇl_pid
 = 
gëpid
();

305 
PidSë
 
	gpid_£t
;

306 
gë_pids_‰om_fd
(
fd
, 
pid_£t
);

307 
	gPidSë
::
ôî©‹
 
i
 = 
pid_£t
.
begö
(); 
	gi
 !pid_£t.
íd
(); i++) {

308 i‡(*
	gi
 !
c
->
loˇl_pid
) {

309 
c
->
ªmŸe_pid
 = *
i
;

313 
	gc
->
	gty≥
 = 
SP_PIPE
;

315 #i‚de‡
SP_RELEASE


316 
•_debug
("PIPE CHANNEL - gëáÖùêch™√»wôh inodê%d f‹ fd %d", 
öode
, 
fd
);

318 
	gc
->
	göode
 = 
öode
;

319 
	gch™√l_m≠_
[
öode
] = 
c
;

321  
	gc
;

326 
	gSpT˝W‹kî
::
£t_°¨t_åacög
(
yes_‹_no
, 
pid_t
 
pid
) {

329 
	gSpT˝W‹kî
::
°¨t_åacög
() {

333 
boﬁ
 
	gSpT˝W‹kî
::
öje˘
(
SpCh™√l
*) {

338 
SpCh™√l
* 
	gSpT˝W‹kî
::
gë_ch™√l
(
fd
) {

343 
SpUdpW‹kî
::
£t_°¨t_åacög
(
yes_‹_no
, 
pid_t
 
pid
) {

346 
	gSpUdpW‹kî
::
°¨t_åacög
() {

350 
boﬁ
 
	gSpUdpW‹kî
::
öje˘
(
SpCh™√l
*) {

354 
SpCh™√l
* 
	gSpUdpW‹kî
::
gë_ch™√l
(
fd
) {

355  
NULL
;

	@SpParser.C

1 
	~"SpIn°rumíãr.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpAddrS∑˚.h
"

5 
	~"SpUtûs.h
"

6 
	~"SpPoöt.h
"

7 
	~"SpPoötMakî.h
"

8 
	~"SpObje˘.h
"

10 
usög
 
	gsb
::
Symèb
;

11 
usög
 
	gsb
::
Symbﬁ
;

12 
usög
 
	gsb
::
Regi⁄
;

14 
usög
 
	g•
::
SpP¨£r
;

15 
usög
 
	g•
::
SpAddrS∑˚
;

16 
usög
 
	gsb
::
AddªssLookup
;

18 
usög
 
	g≥
::
CodeObje˘
;

19 
usög
 
	g≥
::
CodeRegi⁄
;

20 
usög
 
	g≥
::
SymèbCodeSour˚
;

22 
usög
 
	gö
::
Resu…
;

23 
usög
 
	gö
::
Visô‹
;

24 
usög
 
	gö
::
Immedüã
;

25 
usög
 
	gö
::
Ex¥essi⁄
;

26 
usög
 
	gö
::
In°ru˘i⁄
;

27 
usög
 
	gö
::
Dîe„ªn˚
;

28 
usög
 
	gö
::
Regi°îAST
;

29 
usög
 
	gö
::
Bö¨yFun˘i⁄
;

30 
usög
 
	gö
::
In°ru˘i⁄Decodî
;

32 
usög
 
	gph
::
Poöt
;

33 
usög
 
	gph
::
P©chMgr
;

34 
usög
 
	gph
::
AddrS∑˚
;

35 
usög
 
	gph
::
P©chBlock
;

36 
usög
 
	gph
::
PoötMakî
;

37 
usög
 
	gph
::
P©chObje˘
;

38 
usög
 
	gph
::
P©chMgrPå
;

39 
usög
 
	gph
::
P©chFun˘i⁄
;

41 
usög
 
	gdt
::
Addªss
;

43 
«me•a˚
 
	g•
 {

45 
SpC⁄ãxt
* 
g_c⁄ãxt
;

47 
	gSpP¨£r
::
SpP¨£r
()

48 : 
exe_obj_
(
NULL
), 
öje˘ed_
(
Ál£
),
•_off£t_
(0) {

49 
öô_dynö°_libs
();

52 
	gSpP¨£r
::~
SpP¨£r
() {

53 
CodeSour˚s
::
ôî©‹
 
i
 = 
code_§cs_
.
begö
();

54 
	gi
 !
code_§cs_
.
íd
(); i++) {

55 
SymèbCodeSour˚
* 
	gscs
 = 
°©ic_ˇ°
<SymèbCodeSour˚*>(*
i
);

56 
dñëe
 
	gscs
;

58 
	gCodeObje˘s
::
ôî©‹
 
i
 = 
code_objs_
.
begö
();

59 
	gi
 !
code_objs_
.
íd
(); i++)

60 
dñëe
 *
	gi
;

63 
	gSpP¨£r
::
±r


64 
SpP¨£r
::
¸óã
() {

65  
±r
(
√w
 
SpP¨£r
);

70 
Addªss
 
	goff£ts
[100];

71 } 
	tIjLib
;

74 
boﬁ


75 
	gSpP¨£r
::
is_dynö°_lib
(
°rög
 
lib
) {

76 
i
 = 0; 
	gi
 < 
	gdynö°_libs_
.
size
(); i++) {

77 i‡(
	glib
.
föd
(
dynö°_libs_
[
i
]Ë!
°rög
::
≈os
Ë 
åue
;

79  
	gÁl£
;

83 
	gSpP¨£r
::
öô_dynö°_libs
() {

84 
dynö°_libs_
.
push_back
("libpatchAPI.so");

85 
	gdynö°_libs_
.
push_back
("libparseAPI.so");

86 
	gdynö°_libs_
.
push_back
("libstackwalk.so");

87 
	gdynö°_libs_
.
push_back
("libsymtabAPI.so");

88 
	gdynö°_libs_
.
push_back
("libinstructionAPI.so");

89 
	gdynö°_libs_
.
push_back
("libelf.so");

90 
	gdynö°_libs_
.
push_back
("libdwarf.so");

91 
	gdynö°_libs_
.
push_back
("libcommon.so");

95 
P©chMgrPå


96 
	gSpP¨£r
::
∑r£
() {

97 i‡(
mgr_
)  mgr_;

100 
AddªssLookup
* 
	gÆ
 = AddªssLookup::
¸óãAddªssLookup
(
gëpid
());

101 
	gÆ
->
ª‰esh
();

102 
	g°d
::
ve˘‹
<
Symèb
*> 
èbs
;

103 
	gÆ
->
gëAŒSymèbs
(
èbs
);

109 
	g°d
::
ve˘‹
<
Symèb
*>::
ôî©‹
 
i
 = 
èbs
.
begö
(); 
	gi
 !èbs.
íd
(); i++) {

110 
Symèb
* 
	gsym
 = *
i
;

111 i‡(
	gsym
->
«me
().
föd
("libijagít.so"Ë!
°rög
::
≈os
) {

112 
öje˘ed_
 = 
åue
;

117 
	gshmid
;

118 
key_t
 
	gkey
 = 1985;

119 
IjLib
* 
	gshm
;

120 i‡(
	göje˘ed_
) {

121 i‡((
	gshmid
 = 
shmgë
(
key
, (
IjLib
), 0666)) < 0) {

122 
≥º‹
("shmget");

123 
exô
(1);

125 i‡((*)(
	gshm
 = (
IjLib
*)
shm©
(
shmid
, 
NULL
, 0)) == (*) -1) {

126 
≥º‹
("shmat");

127 
exô
(1);

135 
	gcur
 = 0;

136 
	g°d
::
	tm≠
<
	tAddªss
, 
	tboﬁ
> 
	tLibLookup
;

137 
LibLookup
 
	glib_lookup
;

138 
	glib_lookup
[0] = 
åue
;

139 i‡(
	göje˘ed_
) {

140 
	gshm
->
	goff£ts
[
cur
] != -1) {

141 
lib_lookup
[
shm
->
off£ts
[
cur
]] = 
åue
;

142 ++
	gcur
;

146 
P©chObje˘s
 
	g∑tch_objs
;

147 
	g°d
::
ve˘‹
<
Symèb
*>::
ôî©‹
 
i
 = 
èbs
.
begö
(); 
	gi
 !èbs.
íd
(); i++) {

148 
Symèb
* 
	gsym
 = *
i
;

149 
Addªss
 
	glﬂd_addr
 = 0;

150 
	gÆ
->
gëLﬂdAddªss
(
sym
, 
lﬂd_addr
);

155 i‡(
	göje˘ed_
) {

156 i‡((
	glib_lookup
.
föd
(
lﬂd_addr
Ë=
lib_lookup
.
íd
()) &&

157 (
sym
->
«me
().
föd
(
•_fûíame
(•_fûíame(
gë_agít_«me
()))Ë=
°rög
::
≈os
) &&

158 (
sym
->
«me
().
föd
("libagít.so"Ë=
°rög
::
≈os
)) {

159 #i‚de‡
SP_RELEASE


160 
•_debug
("SKIPED - skùÖ¨sög %s", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

165 i‡(
is_dynö°_lib
(
sym
->
«me
())) {

166 #i‚de‡
SP_RELEASE


167 
•_debug
("SKIPED - skùÖ¨sög %s", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

174 
SymèbCodeSour˚
* 
	gscs
 = 
√w
 SymèbCodeSour˚(
sym
);

175 
	gcode_§cs_
.
push_back
(
scs
);

176 
CodeObje˘
* 
	gco
 = 
√w
 CodeObje˘(
scs
);

177 
	gcode_objs_
.
push_back
(
co
);

178 
	gco
->
∑r£
();

181 
P©chObje˘
* 
	g∑tch_obj
 = 
√w
 
•
::
SpObje˘
(
co
, 
lﬂd_addr
, 
NULL
, NULL,Üﬂd_addr?lﬂd_addr:
scs
->
lﬂdAddªss
());

183 
	g∑tch_objs
.
push_back
(
∑tch_obj
);

184 #i‚de‡
SP_RELEASE


185 
•_debug
("PARSED -Ö¨£d %s", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

187 i‡(
	gsym
->
isExec
()) {

188 
	gexe_obj_
 = 
∑tch_obj
;

189 #i‚de‡
SP_RELEASE


190 
•_debug
("EXE - %†i†™ÉxecuèbÀ", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

196 i‡(!
	gexe_obj_
) {

197 
	gexe_obj_
 = 
∑tch_objs
[0];

201 
SpAddrS∑˚
* 
	gas
 = SpAddrS∑˚::
¸óã
(
exe_obj_
);

202 
	gph
::
In°rumíãr
* 
ö°
 = 
NULL
;

203 
	gö°
 = 
•
::
SpIn°rumíãr
::
¸óã
(
as
);

205 
	g•
::
SpPoötMakî
* 
pm
 = 
√w
 SpPointMaker;

206 
	gmgr_
 = 
P©chMgr
::
¸óã
(
as
, 
ö°
, 
pm
);

207 
	gSpP¨£r
::
P©chObje˘s
::
ôî©‹
 
i
 = 
∑tch_objs
.
begö
(); 
	gi
 !∑tch_objs.
íd
(); i++) {

208 i‡(*
	gi
 !
exe_obj_
) {

209 
as
->
lﬂdLibøry
(*
i
);

214 i‡(
	göje˘ed_
) {

215 
shm˘l
(
IJLIB_ID
, 
IPC_RMID
, 
NULL
);

216 
shm˘l
(
IJMSG_ID
, 
IPC_RMID
, 
NULL
);

218  
	gmgr_
;

222 
P©chFun˘i⁄
*

223 
	gSpP¨£r
::
födFun˘i⁄
(
Addªss
 
addr
) {

225 
AddrS∑˚
* 
as
 = 
mgr_
->as();

226 
	gAddrS∑˚
::
ObjM≠
::
ôî©‹
 
ci
 = 
as
->
objM≠
().
begö
(); 
	gci
 !as->objM≠().
íd
(); ci++) {

227 
P©chObje˘
* 
	gobj
 = 
ci
->
£c⁄d
;

228 
SymèbCodeSour˚
* 
	gcs
 = (SymèbCodeSour˚*)
obj
->
co
()->
cs
();

229 
Symèb
* 
	gsym
 = 
cs
->
gëSymèbObje˘
();

230 
Addªss
 
	glowî_bound
 = 
obj
->
codeBa£
();

231 i‡(!
	glowî_bound
Ëlowî_bound = 
sym
->
gëLﬂdOff£t
();

232 
Addªss
 
	guµî_bound
 = 
lowî_bound
 + 
cs
->
Àngth
();

234 i‡(
	gaddr
 >
lowî_bound
 && 
addr
 <
uµî_bound
) {

235 
Addªss
 
addªss
 = 
addr
;

236 
	gsb
::
Fun˘i⁄
* 
f
;

237 i‡(!
	gsym
->
gëC⁄èöögFun˘i⁄
(
addªss
, 
f
)) {

238 
	gaddªss
 -
lowî_bound
;

241 
	g°d
::
ve˘‹
<
CodeRegi⁄
*>::
c⁄°_ôî©‹
 
ri
 = 
cs
->
ªgi⁄s
().
begö
();

242 
	gri
 !
cs
->
ªgi⁄s
().
íd
();Ñi++) {

243 
	g°d
::
£t
<
≥
::
Fun˘i⁄
*> 
funcs
;

244 
	gobj
->
co
()->
födFuncs
(*
ri
, 
addªss
, 
funcs
);

246 i‡(
	gfuncs
.
size
() > 0) {

247 
P©chFun˘i⁄
* 
	gpfunc
 = 
obj
->
gëFunc
(*
funcs
.
begö
());

248  
	gpfunc
;

254  
	gNULL
;

258 
	glib«me
[512];

259 
	gîr
[512];

260 
	glﬂded
;

261 } 
	tIjMsg
;

265 
	gSpP¨£r
::
gë_agít_«me
() {

266 
shmid
;

267 
key_t
 
	gkey
 = 1986;

268 
IjMsg
* 
	gmsg_shm
;

269 i‡((
	gshmid
 = 
shmgë
(
key
, (
IjMsg
), 0666)) < 0) {

270 
•_≥º‹
("FATAL - FailedÅo getágent sharedÜibraryÇame");

272 i‡((*)(
	gmsg_shm
 = (
IjMsg
*)
shm©
(
shmid
, 
NULL
, 0)) == (*) -1) {

273 
•_≥º‹
("FATAL - FailedÅo getágentÜibraryÇame");

275  
	gmsg_shm
->
	glib«me
;

279 
Addªss


280 
	gSpP¨£r
::
gë_func_addr
(
°rög
 
«me
) {

281 
AddrS∑˚
* 
as
 = 
mgr_
->as();

282 
	gAddrS∑˚
::
ObjM≠
::
ôî©‹
 
ci
 = 
as
->
objM≠
().
begö
(); 
	gci
 !as->objM≠().
íd
(); ci++) {

283 
P©chObje˘
* 
	gobj
 = 
ci
->
£c⁄d
;

284 
CodeObje˘
* 
	gco
 = 
obj
->
co
();

285 
	gCodeObje˘
::
fun˛i°
& 
Æl
 = 
co
->
funcs
();

286 
	gCodeObje˘
::
fun˛i°
::
ôî©‹
 
fô
 = 
Æl
.
begö
(); 
	gfô
 !Æl.
íd
(); fit++) {

287 i‡((*
	gfô
)->
«me
().
com∑ª
(name) == 0) {

288 
Addªss
 
addr
 = (*
fô
)->addr(Ë+ 
obj
->
codeBa£
();

289  
	gaddr
;

300 
P©chFun˘i⁄
*

301 
	gSpP¨£r
::
födFun˘i⁄
(
°rög
 
«me
, 
boﬁ
 
skù
) {

302 i‡(
	gªÆ_func_m≠_
.
föd
(
«me
Ë!
ªÆ_func_m≠_
.
íd
()) {

303  
ªÆ_func_m≠_
[
«me
];

306 
AddrS∑˚
* 
	gas
 = 
mgr_
->
as
();

307 
	gAddrS∑˚
::
ObjM≠
::
ôî©‹
 
ci
 = 
as
->
objM≠
().
begö
(); 
	gci
 !as->objM≠().
íd
(); ci++) {

309 
P©chObje˘
* 
	gobj
 = 
ci
->
£c⁄d
;

310 
CodeObje˘
* 
	gco
 = 
obj
->
co
();

311 
	gCodeObje˘
::
fun˛i°
& 
Æl
 = 
co
->
funcs
();

312 
SymèbCodeSour˚
* 
	gcs
 = (SymèbCodeSour˚*)
obj
->
co
()->
cs
();

313 
Symèb
* 
	gsym
 = 
cs
->
gëSymèbObje˘
();

314 i‡(
	gskù
 && 
	gg_c⁄ãxt
->
is_wñl_known_lib
(
•_fûíame
(
sym
->
«me
().
c_°r
()))) {

318 
	gCodeObje˘
::
fun˛i°
::
ôî©‹
 
fô
 = 
Æl
.
begö
(); 
	gfô
 !Æl.
íd
(); fit++) {

319 i‡((*
	gfô
)->
«me
().
com∑ª
(name) == 0) {

320 
Regi⁄
* 
ªgi⁄
 = 
sym
->
födEn˛osögRegi⁄
((*
fô
)->
addr
());

321 i‡(
	gªgi⁄
 &&Ñegi⁄->
gëRegi⁄Name
().
com∑ª
(".plt") == 0) {

324 
P©chFun˘i⁄
* 
	gfound
 = 
obj
->
gëFunc
(*
fô
);

325 
	gªÆ_func_m≠_
[
«me
] = 
found
;

326  
	gfound
;

330  
	gNULL
;

334 
°rög


335 
	gSpP¨£r
::
dump_ö¢
(* 
addr
, 
size_t
 
size
) {

337 
Addªss
 
	gba£
 = (Addªss)
addr
;

338 
SymèbCodeSour˚
* 
	gcs
 = (SymèbCodeSour˚*)
mgr_
->
as
()->
execuèbÀ
()->
co
()->
cs
();

339 
°rög
 
	gs
;

340 
	gbuf
[256];

341 
In°ru˘i⁄Decodî
 
deco
(
addr
,

342 
size
,

343 
cs
->
gëArch
());

344 
	gIn°ru˘i⁄
::
På
 
ö¢
 = 
deco
.
decode
();

345 
	gö¢
) {

346 
•rötf
(
buf
, " %lx(%2d byãs): %-25†| ", 
ba£
, 
ö¢
->
size
(), in¢->
f‹m©
(ba£).
c_°r
());

347 * 
	gøw
 = (*)
ö¢
->
±r
();

348 
	gi
 = 0; i < 
	gö¢
->
size
(); i++)

349 
•rötf
(
buf
, "%s%0.2x ", buf, 0xff&
øw
[
i
]);

350 
•rötf
(
buf
, "%s\n", buf);

351 
	gs
 +
buf
;

352 
	gba£
 +
ö¢
->
size
();

353 
	gö¢
 = 
deco
.
decode
();

355  
	gs
;

358 ˛as†
	cSpVisô‹
 : 
public
 
Visô‹
 {

359 
public
:

360 
SpVisô‹
(
•
::
SpPoöt
* 
±
)

361 : 
Visô‹
(), 
ˇŒ_addr_
(0), 
±_
(
±
), 
u£_pc_
(
Ál£
) { }

362 
vútuÆ
 
visô
(
Regi°îAST
* 
r
) {

363 i‡(
	gSpP¨£r
::
is_pc
(
r
->
gëID
())) {

364 
u£_pc_
 = 
åue
;

365 
	gˇŒ_addr_
 = 
±_
->
block
()->
íd
();

368 
Addªss
 
	grvÆ
 = 
±_
->
¢ù
()->
gë_ßved_ªg
(
r
->
gëID
());

369 
	gˇŒ_addr_
 = 
rvÆ
;

371 
	g°ack_
.
push
(
ˇŒ_addr_
);

373 
vútuÆ
 
visô
(
Bö¨yFun˘i⁄
* 
b
) {

374 
Addªss
 
	gi1
 = 
°ack_
.
t›
();

375 
	g°ack_
.
p›
();

376 
Addªss
 
	gi2
 = 
°ack_
.
t›
();

377 
	g°ack_
.
p›
();

379 i‡(
	gb
->
isAdd
()) {

380 
	gˇŒ_addr_
 = 
i1
 + 
i2
;

381 } i‡(
	gb
->
isMu…ùly
()) {

382 
	gˇŒ_addr_
 = 
i1
 * 
i2
;

384 
as£π
(0);

387 
	g°ack_
.
push
(
ˇŒ_addr_
);

389 
vútuÆ
 
visô
(
Immedüã
* 
i
) {

390 
Resu…
 
	gªs
 = 
i
->
evÆ
();

391 
	gªs
.
size
()) {

393 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u8vÆ
;

397 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u16vÆ
;

401 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u32vÆ
;

405 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u64vÆ
;

409 
	g°ack_
.
push
(
ˇŒ_addr_
);

411 
vútuÆ
 
visô
(
Dîe„ªn˚
* 
d
) {

412 
Addªss
* 
	gaddr
 = (Addªss*)
°ack_
.
t›
();

413 
	g°ack_
.
p›
();

414 
	gˇŒ_addr_
 = *
addr
;

415 
	g°ack_
.
push
(
ˇŒ_addr_
);

418 
Addªss
 
ˇŒ_addr
() const {

419  
	gˇŒ_addr_
;

421 
boﬁ
 
u£_pc
() const {

422  
	gu£_pc_
;

424 
	g¥iv©e
:

425 
°d
::
°ack
<
Addªss
> 
°ack_
;

426 
Addªss
 
	gˇŒ_addr_
;

427 
	g•
::
SpPoöt
* 
±_
;

428 
boﬁ
 
	gu£_pc_
;

432 
P©chFun˘i⁄
*

433 
	gSpP¨£r
::
	$ˇŒì
(
Poöt
* 
±
, 
boﬁ
 
∑r£_ödúe˘
) {

437 
•
::
SpPoöt
* 
•t
 = 
°©ic_ˇ°
<•::SpPoöt*>(
±
);

438 i‡(
•t
->
	`ˇŒì
())  spt->callee();

441 
P©chFun˘i⁄
* 
f
 = 
±
->
	`gëCÆÀe
();

442 i‡(
f
) {

443 
•t
->
	`£t_ˇŒì
(
f
);

444  
f
;

446 i‡(
•t
->
	`ˇŒì
()) {

447  
•t
->
	`ˇŒì
();

451 i‡(
∑r£_ödúe˘
) {

453 
P©chBlock
* 
blk
 = 
±
->
	`block
();

454 
In°ru˘i⁄
::
På
 
ö¢
 = 
•t
->
	`¢ù
()->
	`gë_‹ig_ˇŒ_ö¢
();

455 
Ex¥essi⁄
::
På
 
åg
 = 
ö¢
->
	`gëC⁄åﬁFlowT¨gë
();

456 
Addªss
 
ˇŒ_addr
 = 0;

457 i‡(
åg
) {

458 
SpVisô‹
 
	`visô‹
(
•t
);

459 
åg
->
	`≠∂y
(&
visô‹
);

460 
ˇŒ_addr
 = 
visô‹
.
	`ˇŒ_addr
();

461 
f
 = 
	`födFun˘i⁄
(
ˇŒ_addr
);

462 i‡(
f
) {

463 
•t
->
	`£t_ˇŒì
(
f
);

464  
f
;

468 
	`•_¥öt
("CANNOT RESOLVE ADDR %lx, SKIP f‹ blob %lx", 
ˇŒ_addr
, 
•t
->
	`¢ù
()->
	`buf
());

470 *
d
 = (*)(
•t
->
	`¢ù
()->
	`gë_ßved_ªg
(
º
->
	`gëID
()Ë+ 
di•
);

471 
	`•_¥öt
("RR: %s, [%lx+%lx]=>%lx", 
º
->
	`gëID
().
	`«me
().
	`c_°r
(), 
•t
->
	`¢ù
()->
	`gë_ßved_ªg
‘r->gëID()), 
di•
, *
d
);

472 
	`•_¥öt
("ORIG CALL DUMP INSN (%d byãs)- {", 
•t
->
	`¢ù
()->
	`gë_‹ig_ˇŒ_ö¢
()->
	`size
());

473 
	`•_¥öt
("%s", 
	`dump_ö¢
((*)
•t
->
	`¢ù
()->
	`gë_‹ig_ˇŒ_ö¢
()->
	`±r
(), s±->¢ù()->gë_‹ig_ˇŒ_ö¢()->
	`size
()).
	`c_°r
());

474 
	`•_¥öt
("DUMP INSN - }");

476 
	`•_¥öt
("DUMP INSN (%d byãs)- {", 
•t
->
	`¢ù
()->
	`size
());

477 
	`•_¥öt
("%s", 
	`dump_ö¢
((*)
•t
->
	`¢ù
()->
	`buf
(), s±->¢ù()->
	`size
()).
	`c_°r
());

478 
	`•_¥öt
("DUMP INSN - }");

480  
NULL
;

483  
NULL
;

484 
	}
}

	@SpPayload.C

1 
	~"SpPaylﬂd.h
"

2 
	~"SpC⁄ãxt.h
"

3 
	~"SpPoöt.h
"

4 
	~"SpUtûs.h
"

5 
	~"SpIPC.h
"

7 
usög
 
	gph
::
Poöt
;

8 
usög
 
	gph
::
Sc›e
;

9 
usög
 
	gph
::
P©chMgr
;

10 
usög
 
	gph
::
P©chEdge
;

11 
usög
 
	gph
::
P©chBlock
;

12 
usög
 
	gph
::
P©chMgrPå
;

13 
usög
 
	gph
::
P©chObje˘
;

14 
usög
 
	gph
::
P©chFun˘i⁄
;

16 
usög
 
	g•
::
SpPoöt
;

17 
usög
 
	g•
::
SpCh™√l
;

18 
usög
 
	g•
::
ArgumítH™dÀ
;

19 
usög
 
	g•
::
SpIpcMgr
;

21 
«me•a˚
 
	g•
 {

22 
SpC⁄ãxt
* 
g_c⁄ãxt
;

27 
wøµî_bef‹e
(
SpPoöt
* 
±
, 
•
::
PaylﬂdFunc_t
 
bef‹e
) {

28 i‡(!
SpIpcMgr
::
¥e_bef‹e
(
±
)) ;

29 
bef‹e
(
±
);

34 
wøµî_a·î
(
SpPoöt
* 
±
, 
•
::
PaylﬂdFunc_t
 
a·î
) {

35 i‡(!
SpIpcMgr
::
¥e_a·î
(
±
)) ;

36 
a·î
(
±
);

41 
	$deÁu…_bef‹e
(
Poöt
* 
±
) {

42 
P©chFun˘i⁄
* 
f
 = 
•
::
	`ˇŒì
(
±
);

43 i‡(!
f
) ;

45 
°rög
 
ˇŒì_«me
 = 
f
->
	`«me
();

46 
	`•_¥öt
("E¡î %s", 
ˇŒì_«me
.
	`c_°r
());

48 
•
::
	`¥›ñ
(
±
);

49 
	}
}

52 
	$deÁu…_a·î
(
Poöt
* 
±
) {

53 
P©chFun˘i⁄
* 
f
 = 
•
::
	`ˇŒì
(
±
);

54 i‡(!
f
) ;

56 
°rög
 
ˇŒì_«me
 = 
f
->
	`«me
();

57 
	`•_¥öt
("Lóvê%s", 
ˇŒì_«me
.
	`c_°r
());

58 
	}
}

61 
«me•a˚
 
	g•
 {

64 
P©chFun˘i⁄
*

65 
ˇŒì
(
ph
::
Poöt
* 
±
) {

66  
g_c⁄ãxt
->
ˇŒì
(
±
);

71 
p›_¨gumít
(
ph
::
Poöt
* 
±
, 
ArgumítH™dÀ
* 
h
, 
size_t
 
size
) {

72  
	g°©ic_ˇ°
<
	gSpPoöt
*>(
	g±
)->
¢ù
()->
p›_¨gumít
(
h
, 
size
);

77 
¥›ñ
(
ph
::
Poöt
* 
±
) {

80 
SpPoöt
* 
•t
 = 
°©ic_ˇ°
<
•
::SpPoöt*>(
±
);

81 i‡(
	g•t
->
¥›ag©ed
()) {

85 
P©chFun˘i⁄
* 
	gf
 = 
ˇŒì
(
±
);

86 i‡(!
	gf
) ;

88 
	g•
::
SpPr›ñÀr
::
±r
 
p
 = 
g_c⁄ãxt
->
öô_¥›ñÀr
();

89 
	gp
->
go
(
f
, 
g_c⁄ãxt
, g_c⁄ãxt->
öô_bef‹e
(), g_c⁄ãxt->
öô_a·î
(), 
±
);

90 
	g•t
->
£t_¥›ag©ed
(
åue
);

93 
	gArgumítH™dÀ
::
ArgumítH™dÀ
(Ë: 
off£t
(0), 
num
(0) {}

96 
	gArgumítH™dÀ
::
ö£π_buf
(
size_t
 
s
) {

97 * 
b
 = 
√w
 [
s
];

98 
	gbufs
.
push_back
(
b
);

99  
	gb
;

102 
	gArgumítH™dÀ
::~
ArgumítH™dÀ
() {

103 
i
 = 0; 
	gi
 < 
	gbufs
.
size
(); i++Ë
dñëe
 bufs[i];

107 
ªtvÆ
(
•
::
SpPoöt
* 
±
) {

108  
±
->
¢ù
()->
gë_ªt_vÆ
();

111 
boﬁ


112 
is_ùc
(
fd
) {

113 
	g•
::
SpIpcMgr
* 
ùc_mgr
 = 
g_c⁄ãxt
->ipc_mgr();

114  
	gùc_mgr
->
is_ùc
(
fd
);

118 
°¨t_åacög
() {

119 
	g•
::
SpIpcMgr
* 
ùc_mgr
 = 
g_c⁄ãxt
->ipc_mgr();

120  
	gùc_mgr
->
°¨t_åacög
();

	@SpPointMaker.h

1 #i‚de‡
_SPPOINTMAKER_H_


2 
	#_SPPOINTMAKER_H_


	)

4 
	~"SpAgítComm⁄.h
"

7 
«me•a˚
 
	g•
 {

8 ˛as†
	cSpPoötMakî
 : 
public
 
ph
::
PoötMakî
 {

9 
¥Ÿe˘ed
:

11 
vútuÆ
 
ph
::
Poöt
*

12 
mkFuncPoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

13 
ph
::
P©chMgrPå
 
m
,

14 
ph
::
P©chFun˘i⁄
* 
f
) {

15  
√w
 
SpPoöt
(
t
, 
m
, 
f
);

18 
vútuÆ
 
	gph
::
Poöt
*

19 
mkFuncSôePoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

20 
ph
::
P©chMgrPå
 
m
,

21 
ph
::
P©chFun˘i⁄
* 
f
,

22 
ph
::
P©chBlock
* 
b
) {

23  
√w
 
SpPoöt
(
t
, 
m
, 
f
, 
b
);

26 
vútuÆ
 
	gph
::
Poöt
*

27 
mkBlockPoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

28 
ph
::
P©chMgrPå
 
m
,

29 
ph
::
P©chBlock
* 
b
,

30 
ph
::
P©chFun˘i⁄
* 
f
) {

31  
√w
 
SpPoöt
(
t
, 
m
, 
b
, 
f
);

33 
vútuÆ
 
	gph
::
Poöt
*

34 
mkIn¢Poöt
(
ph
::
Poöt
::
Ty≥
 
t
,

35 
ph
::
P©chMgrPå
 
m
,

36 
ph
::
P©chBlock
* 
b
,

37 
Dynö°
::
Addªss
 
a
,

38 
ö
::
In°ru˘i⁄
::
På
 
i
,

39 
ph
::
P©chFun˘i⁄
 *
f
) {

40  
√w
 
SpPoöt
(
t
, 
m
, 
b
, 
a
, 
i
, 
f
);

42 
vútuÆ
 
	gph
::
Poöt
*

43 
mkEdgePoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

44 
ph
::
P©chMgrPå
 
m
,

45 
ph
::
P©chEdge
* 
e
,

46 
ph
::
P©chFun˘i⁄
* 
f
) {

47  
√w
 
SpPoöt
(
t
, 
m
, 
e
, 
f
);

	@SpPropeller.C

1 
	~"SpPr›ñÀr.h
"

2 
	~"SpC⁄ãxt.h
"

3 
	~"SpSnù≥t.h
"

4 
	~"SpUtûs.h
"

6 
usög
 
	g•
::
SpC⁄ãxt
;

7 
usög
 
	g•
::
SpPr›ñÀr
;

9 
usög
 
	gph
::
Poöt
;

10 
usög
 
	gph
::
Sc›e
;

11 
usög
 
	gph
::
P©chî
;

12 
usög
 
	gph
::
Snù≥t
;

13 
usög
 
	gph
::
P©chMgr
;

14 
usög
 
	gph
::
P©chBlock
;

15 
usög
 
	gph
::
P©chMgrPå
;

16 
usög
 
	gph
::
P©chFun˘i⁄
;

17 
usög
 
	gph
::
PushBackComm™d
;

19 
«me•a˚
 
	g•
 {

21 
	gSpPr›ñÀr
::
SpPr›ñÀr
() {

24 
SpPr›ñÀr
::
±r


25 
SpPr›ñÀr
::
¸óã
() {

26  
±r
(
√w
 
SpPr›ñÀr
);

34 
boﬁ


35 
	gSpPr›ñÀr
::
go
(
P©chFun˘i⁄
* 
func
, 
SpC⁄ãxt
* 
c⁄ãxt
, 
PaylﬂdFunc
 
bef‹e
,

36 
PaylﬂdFunc
 
a·î
, 
Poöt
* 
±
) {

37 #i‚de‡
SP_RELEASE


38 
•_debug
("START PROPELLING -Ör›ñÅÿˇŒì†o‡fun˘i⁄ %s", 
func
->
«me
().
c_°r
());

41 
Poöts
 
	g±s
;

42 
P©chMgrPå
 
	gmgr
 = 
c⁄ãxt
->
mgr
();

43 
P©chFun˘i⁄
* 
	gcur_func
 = 
NULL
;

44 i‡(
	g±
) {

45 
	gcur_func
 = 
func
;

47 
	gcur_func
 = 
c⁄ãxt
->
∑r£r
()->
födFun˘i⁄
(
func
->
«me
());

49 
√xt_poöts
(
cur_func
, 
mgr
, 
±s
);

52 
	gph
::
P©chî
 
∑tchî
(
mgr
);

53 
	gi
 = 0; i < 
	g±s
.
size
(); i++) {

54 
Poöt
* 
	g±
 = 
±s
[
i
];

59 
P©chFun˘i⁄
* 
	gˇŒì
 = 
c⁄ãxt
->
∑r£r
()->
ˇŒì
(
±
);

60 #i‚de‡
SP_RELEASE


61 i‡(
	gˇŒì
) {

62 
•_debug
("POINT - instrumenting direct callát %lxÅo function %s",

63 
±
->
block
()->
œ°
(), 
ˇŒì
->
«me
().
c_°r
());

65 
•_debug
("POINT - in°rumítög indúe˘ cÆ»© %lx", 
±
->
block
()->
œ°
());

68 
	gSpSnù≥t
::
±r
 
•_¢ù
 = 
SpSnù≥t
::
¸óã
(
ˇŒì
, 
±
, 
c⁄ãxt
, 
bef‹e
, 
a·î
);

69 
	gSnù≥t
<
	gSpSnù≥t
::
±r
>::
På
 
¢ù
 = 
Snù≥t
<
SpSnù≥t
::±r>::
¸óã
(
•_¢ù
);

70 
	g∑tchî
.
add
(
PushBackComm™d
::
¸óã
(
±
, 
¢ù
));

72 
	g∑tchî
.
commô
();

73 #i‚de‡
SP_RELEASE


74 
•_debug
("FINISH PROPELLING - %d cÆÀe†o‡fun˘i⁄ %†¨êö°rumíãd", 
±s
.
size
(), 
func
->
«me
().
c_°r
());

76  
	gåue
;

81 
	gSpPr›ñÀr
::
√xt_poöts
(
P©chFun˘i⁄
* 
cur_func
, 
P©chMgrPå
 
mgr
, 
Poöts
& 
±s
) {

82 
Sc›e
 
sc›e
(
cur_func
);

83 
	gmgr
->
födPoöts
(
sc›e
, 
Poöt
::
PªCÆl
, 
back_ö£πî
(
±s
));

	@SpSnippet.C

1 
	~"SpEvít.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpSnù≥t.h
"

5 
	~"SpPoöt.h
"

6 
	~"SpUtûs.h
"

7 
	~"SpObje˘.h
"

9 
usög
 
	gph
::
Poöt
;

10 
usög
 
	gdt
::
Addªss
;

11 
usög
 
	gph
::
P©chBlock
;

12 
usög
 
	gph
::
P©chFun˘i⁄
;

14 
«me•a˚
 
	g•
 {

17 
	gSpSnù≥t
::
SpSnù≥t
(
P©chFun˘i⁄
* 
f
,

18 
Poöt
* 
±
,

19 
SpC⁄ãxt
* 
c
,

20 
PaylﬂdFunc
 
bef‹e
,

21 
PaylﬂdFunc
 
a·î
)

22 : 
func_
(
f
), 
poöt_
(
±
), 
c⁄ãxt_
(
c
), 
bef‹e_
(
bef‹e
), 
a·î_
(
a·î
),

23 
blob_size_
(0), 
•rög_size_
(0), 
•rög_blk_
(
NULL
), 
ªÆloc_
(
Ál£
) {

25 
	gph
::
P©chMgrPå
 
mgr
 = 
c
->mgr();

26 
	gph
::
AddrS∑˚
* 
as
 = 
mgr
->as();

31 
	gblob_
 = (*)
as
->
mÆloc
(
±
->
obj
(), 1024,

32 
°©ic_ˇ°
<
•
::
SpObje˘
*>(
±
->
obj
())->
lﬂd_addr
());

35 
	gSpSnù≥t
::~
SpSnù≥t
() {

36 i‡(!
ªÆloc_
Ë
‰ì
(
blob_
);

39 * 
	gSpSnù≥t
::
ªÆloc
() {

40 * 
buf
 = 
NULL
;

41 
	gªÆloc_
 = 
åue
;

43  
	gbuf
;

58 
	gSpSnù≥t
::
blob
(
Addªss
 
ªt_addr
, 
boﬁ
 
ªloc
, boﬁ 
•rög
) {

59 
as£π
(
c⁄ãxt_
);

60 
	gªt_addr_
 = 
ªt_addr
;

63 i‡(
	gblob_size_
 > 0) {

64  
	gblob_
;

68 i‡(
	gªloc
) {

69 
P©chBlock
* 
	gblk
 = 
NULL
;

70 
	gblk
 = 
poöt_
->
block
();

71 
	gblob_size_
 +
ªloc_block
(
blk
, 
blob_
, 
blob_size_
);

76 
	gblob_size_
 +
emô_ßve
(
blob_
, 
blob_size_
, 
ªloc
);

79 
	g∑øm_func
 = 0;

80 
	gˇŒed_func
 = ()
bef‹e_
;

81 i‡(
	gc⁄ãxt_
->
Ælow_ùc
()) {

82 
	g∑øm_func
 = ()
bef‹e_
;

83 
	gˇŒed_func
 = ()
c⁄ãxt_
->
wøµî_bef‹e
();

85 
	gblob_size_
 +
emô_∑ss_∑øm
(()
poöt_
, 
∑øm_func
, 
blob_
, 
blob_size_
);

86 
	gblob_size_
 +
emô_ˇŒ_abs
(
ˇŒed_func
, 
blob_
, 
blob_size_
, 
åue
);

89 
	gblob_size_
 +
emô_ª°‹e
(
blob_
, 
blob_size_
, 
ªloc
);

97 i‡(!
	gªt_addr
 && 
	gfunc_
) {

99 
	gblob_size_
 +
emô_jump_abs
(()
func_
->
addr
(), 
blob_
, 
blob_size_
);

100 
	gEXIT
;

101 } i‡(
	gªt_addr
 && 
	gfunc_
) {

103 
	gblob_size_
 +
emô_ˇŒ_abs
(()
func_
->
addr
(), 
blob_
, 
blob_size_
, 
Ál£
);

106 
	gblob_size_
 +
emô_ˇŒ_‹ig
(()
poöt_
->
block
()->
œ°
(),

107 
‹ig_ˇŒ_ö¢_
->
size
(), 
blob_
, 
blob_size_
);

110 i‡(
	gc⁄ãxt_
->
Ælow_ùc
(Ë|| 
	ga·î_
) {

112 
	gblob_size_
 +
emô_ßve
(
blob_
, 
blob_size_
, 
ªloc
);

115 
	g∑øm_func
 = 0;

116 
	gˇŒed_func
 = ()
a·î_
;

117 i‡(
	gc⁄ãxt_
->
Ælow_ùc
()) {

118 
	g∑øm_func
 = ()
a·î_
;

119 
	gˇŒed_func
 = ()
c⁄ãxt_
->
wøµî_a·î
();

121 
	gblob_size_
 +
emô_∑ss_∑øm
(()
poöt_
, 
∑øm_func
, 
blob_
, 
blob_size_
);

122 
	gblob_size_
 +
emô_ˇŒ_abs
(
ˇŒed_func
, 
blob_
, 
blob_size_
, 
åue
);

125 
	gblob_size_
 +
emô_ª°‹e
(
blob_
, 
blob_size_
, 
ªloc
);

129 
	gblob_size_
 +
emô_jump_abs
(
ªt_addr
, 
blob_
, 
blob_size_
);

131 
	gEXIT
:

133 #i‚de‡
SP_RELEASE


134 
•_debug
("DUMP PATCH AREA (%d byãsËf‹Öoöà%lx - {", 
blob_size_
, 
poöt_
->
block
()->
œ°
());

135 
•_debug
("%s", 
c⁄ãxt_
->
∑r£r
()->
dump_ö¢
((*)
blob_
, 
blob_size_
).
c_°r
());

136 
•_debug
("}");

139  
	gblob_
;

143 
size_t


144 
	gSpSnù≥t
::
ªloc_block
(
P©chBlock
* 
blk
, * 
buf
, 
size_t
 
off£t
) {

145 * 
	gp
 = 
buf
 + 
off£t
;

146 
Addªss
 
	gˇŒ_addr
 = 
blk
->
œ°
();

148 
	gP©chBlock
::
In¢s
 
ö¢s
;

149 
	gblk
->
gëIn¢s
(
ö¢s
);

150 
	gP©chBlock
::
In¢s
::
ôî©‹
 
i
 = 
ö¢s
.
begö
(); 
	gi
 !ö¢s.
íd
(); i++) {

151 
usög
 
«me•a˚
 
	gDynö°
::
In°ru˘i⁄API
;

153 
Addªss
 
	ga
 = 
i
->
fú°
;

154 
	gIn°ru˘i⁄
::
På
 
ö¢
 = 
i
->
£c⁄d
;

155 
	gp
 +
ªloc_ö¢
(
a
, 
ö¢
, 
ˇŒ_addr
, 
p
);

158  (
	gp
 - (
	gbuf
 + 
	goff£t
));

173 
P©chBlock
*

174 
	gSpSnù≥t
::
•rög_blk
() {

175 i‡(
•rög_blk_
)  spring_blk_;

177 
size_t
 
	gmö_•rögblk_size
 = 
jump_abs_size
() * 2;

178 
P©chBlock
* 
	gˇŒblk
 = 
poöt_
->
block
();

181 
	ga·î_jmp
 = 
ˇŒblk
->
°¨t
() + 2;

182 
boﬁ
 
	gd⁄e
 = 
Ál£
;

185 
P©chBlock
* 
	g•rögblk
 = 
NULL
;

186 
	gph
::
P©chObje˘
* 
obj
 = 
ˇŒblk
->obj();

188 
usög
 
«me•a˚
 
	gDynö°
::
P¨£API
;

189 
CodeObje˘
* 
	gco
 = 
obj
->
co
();

190 
CodeSour˚
* 
	gcs
 = 
co
->
cs
();

191 
	g°d
::
ve˘‹
<
CodeRegi⁄
*> 
ªgi⁄s
 = 
cs
->regions();

194 
	guµî
 = 127 + 
a·î_jmp
 - 
jump_abs_size
();

195 
	glowî
 = -128 + 
a·î_jmp
 - 
jump_abs_size
();

197 
	gi
 = 0; i < 
	gªgi⁄s
.
size
(); i++) {

198 
CodeRegi⁄
* 
	g¸
 = 
ªgi⁄s
[
i
];

199 i‡((
	glowî
 <
¸
->
low
(Ë&& cr->low(Ë< 
uµî
) ||

200 (
¸
->
low
(Ë<
lowî
 && 
uµî
 < cr->
high
()) ||

201 (
lowî
 <
¸
->
high
(Ë&& cr->high(Ë< 
uµî
)

204 
Addªss
 
•™_addr
 = 
lowî
;

206 
	g£t
<
	gBlock
*> 
	gblks
;

207 
	gco
->
födBlocks
(
¸
, 
•™_addr
, 
blks
);

208 i‡(
	gblks
.
size
() == 0) {

209 ++
•™_addr
;

212 
Block
* 
	gb
;

213 
	g£t
<
	gBlock
*>::
ôî©‹
 
bi
 = 
blks
.
begö
(); 
	gbi
 !blks.
íd
(); bi++) {

214 
	gb
 = *
bi
;

216 
size_t
 
	gªl
 = 
b
->
°¨t
(Ë+ 
jump_abs_size
(Ë- 
a·î_jmp
;

217 i‡(!
	g•
::
is_di•8
(
ªl
)) {

218 
•™_addr
 = 
b
->
íd
();

221 
size_t
 
	gs
 = 
b
->
œ°In¢Addr
(Ë- b->
°¨t
();

222 i‡(
	gs
 < 
	gmö_•rögblk_size
) {

223 
	g•™_addr
 = 
b
->
íd
();

226 
P©chBlock
* 
	gpb
 = 
obj
->
gëBlock
(
b
);

229 i‡(
	gpb
->
c⁄èösCÆl
()) {

230 
	g•™_addr
 = 
b
->
íd
();

235 i‡(
	gc⁄ãxt_
->
ö_•rög_£t
(
pb
)) {

236 
	g•™_addr
 = 
b
->
íd
();

239 
	g•rögblk
 = 
pb
;

240 
	gc⁄ãxt_
->
add_•rög
(
pb
);

241 
	gd⁄e
 = 
åue
;

243 } 
	g•™_addr
 < 
	guµî
);

244 i‡(
	gd⁄e
) ;

248 
	g•rög_blk_
 = 
•rögblk
;

249  
	g•rögblk
;

254 
	gSpSnù≥t
::
•rög
(
Addªss
 
ªt_addr
) {

255 
ph
::
P©chMgrPå
 
mgr
 = 
c⁄ãxt_
->mgr();

256 
	gph
::
AddrS∑˚
* 
as
 = 
mgr
->as();

257 
	g•rög_
 = (*)
as
->
mÆloc
(
poöt_
->
obj
(), 1024, 
°©ic_ˇ°
<
•
::
SpObje˘
*>’oöt_->obj())->
lﬂd_addr
());

258 
	g•rög_size_
 = 0;

261 
	g•rög_size_
 +
ªloc_block
(
•rög_blk_
, 
•rög_
, 0);

264 
	g•rög_size_
 +
emô_jump_abs
(
ªt_addr
, 
•rög_
, 
•rög_size_
);

266 #i‚de‡
SP_RELEASE


267 
•_debug
("DUMP RELOC SPRING INSNS (%d byãsËf‹Öoöà%s- {", 
•rög_size_
, 
poöt_
->
block
()->
œ°
());

268 
•_debug
("%s", 
c⁄ãxt_
->
∑r£r
()->
dump_ö¢
((*)
•rög_
, 
•rög_size_
).
c_°r
());

269 
•_debug
("}");

271  
	g•rög_
;

	@SpUtils.C

1 
	~"SpUtûs.h
"

3 
«me•a˚
 
	g•
 {

6 
	ti64
;

7 
	sCPîfCou¡îRec
 {

8 
i64
 
	g_‰eq
;

9 
i64
 
	g_˛ocks
;

10 
i64
 
	g_°¨t
;

11 } 
	tCPîfCou¡î
;

13 
SëupTimî
();

14 
SèπTimî
();

15 
St›Timî
();

16 
Re£tTimî
();

17 
GëTimî
();

18 
PrötTime
(*, );

20 
CPîfCou¡î
 
	ga
[10];

22 
	gö°rumíãr_timî
 = 0;

23 
	gö°Æl_timî
 = 0;

24 
	g¥›ñÀr_timî
 = 0;

25 
	g√xt_poöt_timî
 = 0;

26 
	gˇŒì_timî
 = 0;

27 
	gfödfunc_timî
 = 0;

28 
	g∑ylﬂd_timî
 = 0;

31 
ö°rumíãr_°¨t
() {

32 
SëupTimî
(0);

33 
SèπTimî
(0);

37 
ö°rumíãr_íd
() {

38 
St›Timî
(0);

39 
	gö°rumíãr_timî
 +
a
[0].
_˛ocks
;

43 
ö°Æl_°¨t
() {

44 
SëupTimî
(1);

45 
SèπTimî
(1);

49 
ö°Æl_íd
() {

50 
St›Timî
(1);

51 
	gö°Æl_timî
 +
a
[1].
_˛ocks
;

55 
¥›ñÀr_°¨t
() {

56 
SëupTimî
(2);

57 
SèπTimî
(2);

61 
¥›ñÀr_íd
() {

62 
St›Timî
(2);

63 
	g¥›ñÀr_timî
 +
a
[2].
_˛ocks
;

67 
√xt_poöt_°¨t
() {

68 
SëupTimî
(3);

69 
SèπTimî
(3);

73 
√xt_poöt_íd
() {

74 
St›Timî
(3);

75 
	g√xt_poöt_timî
 +
a
[3].
_˛ocks
;

79 
ˇŒì_°¨t
() {

80 
SëupTimî
(4);

81 
SèπTimî
(4);

85 
ˇŒì_íd
() {

86 
St›Timî
(4);

87 
	gˇŒì_timî
 +
a
[4].
_˛ocks
;

91 
födfunc_°¨t
() {

92 
SëupTimî
(5);

93 
SèπTimî
(5);

97 
födfunc_íd
() {

98 
St›Timî
(5);

99 
	gfödfunc_timî
 +
a
[5].
_˛ocks
;

103 
∑ylﬂd_°¨t
() {

104 
SëupTimî
(6);

105 
SèπTimî
(6);

109 
∑ylﬂd_íd
() {

110 
St›Timî
(6);

111 
	g∑ylﬂd_timî
 +
a
[6].
_˛ocks
;

115 
ªp‹t_timî
() {

116 
•_¥öt
("=== dumpÅimer ===");

118 
•_¥öt
(" Pr›ñÀr::gÿ- %ld", 
¥›ñÀr_timî
);

127 
SëupTimî
(
i
) {

128 
	ga
[
i
].
	g_˛ocks
 = 0;

129 
	ga
[
i
].
	g_°¨t
 = 0;

130 
	ga
[
i
].
	g_‰eq
 = 1000;

131 
Re£tTimî
(
i
);

135 
SèπTimî
(
i
) {

136 
timevÆ
 
	gs
;

137 
gëtimeofday
(&
s
, 0);

138 
	ga
[
i
].
	g_°¨t
 = (
i64
)
s
.
tv_£c
 * 1000*1000 + (i64)s.
tv_u£c
;

142 
St›Timî
(
i
) {

143 
i64
 
	gn
 = 0;

144 
timevÆ
 
	gs
;

145 
gëtimeofday
(&
s
, 0);

146 
	gn
 = (
i64
)
s
.
tv_£c
 * 1000 *1000 + (i64)s.
tv_u£c
;

147 
	gn
 -
a
[
i
].
_°¨t
;

148 
	ga
[
i
].
	g_°¨t
 = 0;

149 
	ga
[
i
].
	g_˛ocks
 +
n
;

153 
Re£tTimî
(
i
) {

154 
	ga
[
i
].
	g_˛ocks
 = 0;

158 
GëTimî
(
i
) {

159  ()
	ga
[
i
].
	g_˛ocks
;

163 
PrötTime
(*
msg
, 
i
) {

164 i‡(
	gmsg
 !
NULL
)

165 
¥ötf
("%s: %‡£c\n", 
msg
, 
GëTimî
(
i
));

167 
¥ötf
("%‡£c\n", 
GëTimî
(
i
));

	@SpUtils.h

1 #i‚de‡
_SPUTILS_H_


2 
	#_SPUTILS_H_


	)

4 
	~"SpAgítComm⁄.h
"

6 
«me•a˚
 
	g•
 {

9 
SëupTimî
();

10 
SèπTimî
();

11 
St›Timî
();

12 
Re£tTimî
();

13 
GëTimî
();

14 
PrötTime
(*, );

16 
ö°rumíãr_°¨t
();

17 
ö°rumíãr_íd
();

19 
ö°Æl_°¨t
();

20 
ö°Æl_íd
();

22 
¥›ñÀr_°¨t
();

23 
¥›ñÀr_íd
();

25 
√xt_poöt_°¨t
();

26 
√xt_poöt_íd
();

28 
ˇŒì_°¨t
();

29 
ˇŒì_íd
();

31 
födfunc_°¨t
();

32 
födfunc_íd
();

34 
∑ylﬂd_°¨t
();

35 
∑ylﬂd_íd
();

37 
ªp‹t_timî
();

40 
ölöe
 
boﬁ
 
is_di•32
(
d
) {

41 c⁄° 
	gmax_öt32
 = 2147483646;

42 c⁄° 
	gmö_öt32
 = -2147483647;

43  ((
	gd
 < 
	gmax_öt32
Ë&& (d >
mö_öt32
));

47 
ölöe
 
boﬁ
 
is_di•8
(
d
) {

48 c⁄° 
	gmax_öt8
 = 127;

49 c⁄° 
	gmö_öt8
 = -128;

50  ((
	gd
 < 
	gmax_öt8
Ë&& (d >
mö_öt8
));

	@
1
.
1
/usr/include
15
188
SpAddrSpace.C
SpAgent.C
SpArch-i386.C
SpArch-x86_64.C
SpContext.C
SpEvent.C
SpInstrumenter.C
SpIpcMgr.C
SpParser.C
SpPayload.C
SpPointMaker.h
SpPropeller.C
SpSnippet.C
SpUtils.C
SpUtils.h
