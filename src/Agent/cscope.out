cscope 15 /afs/cs.wisc.edu/p/paradyn/development/wenbin/spi/spi/src/Agent               0000145881
	@SpAddrSpace.C

1 
	~"SpAddrS∑˚.h
"

2 
	~"SpObje˘.h
"

4 
usög
 
	gdt
::
Addªss
;

5 
usög
 
	g•
::
SpAddrS∑˚
;

6 
usög
 
	gph
::
P©chObje˘
;

8 
«me•a˚
 
	g•
 {

12 
	gSpAddrS∑˚
::
SpAddrS∑˚
(Ë: 
ph
::
AddrS∑˚
() {

13 
upd©e_mem_m≠s
();

18 
SpAddrS∑˚
*

19 
	gSpAddrS∑˚
::
¸óã
(
P©chObje˘
* 
obj
) {

20 
as£π
(
obj
);

21 
SpAddrS∑˚
* 
	gªt
 = 
√w
 SpAddrSpace;

22 i‡(!
	gªt
) Ñet;

23 
	gªt
->
öô
(
obj
);

24  
	gªt
;

28 
Addªss


29 
	gSpAddrS∑˚
::
mÆloc
(
P©chObje˘
* 
obj
, 
size_t
 
size
, 
Addªss
 
√¨
) {

30 
Addªss
 
	gbuf
 = 0;

31 
	gbuf
 = (
Addªss
)::
mÆloc
(
size
+ 
gë∑gesize
() -1);

32 i‡(!
	gbuf
)  0;

33 
	gbuf
 = (((
Addªss
)
buf
 + 
gë∑gesize
()-1) & ~(getpagesize()-1));

34  
	gbuf
;

37 
Addªss
 
	gps
 = 
gë∑gesize
();

38 
Addªss
 
	gr_√¨
 = ((
√¨
 + 
ps
 -1) & ~(ps - 1));

39 
Addªss
 
	gr_size
 = ((
size
 + 
ps
 -1) & ~(ps - 1));

40 
	gbuf
 = 
r_√¨
;

44 * 
	gm
 = 
NULL
;

45 
	gfd
 = -1;

46 !
	gm
 || ()m == -1) {

47 
buf
 -
r_size
;

48 
•_¥öt
("lookög f‹ %lx", 
buf
);

49 
	gm
 = 
mm≠
((*)
buf
,

50 
r_size
,

51 
PROT_WRITE
 | 
PROT_READ
,

52 
MAP_PRIVATE
 | 
MAP_FIXED
 | 
MAP_ANONYMOUS
,

53 
fd
,

56 i‡(!
	gm
)  0;

58  (
	gAddªss
)
	gm
;

62 
boﬁ


63 
	gSpAddrS∑˚
::
wrôe
(
P©chObje˘
* 
obj
, 
Addªss
 
to
, Addªs†
‰om
, 
size_t
 
size
) {

64  (
mem˝y
((*)
to
, (*)
‰om
, 
size
) == (*)to);

68 
boﬁ


69 
	gSpAddrS∑˚
::
‰ì
(
P©chObje˘
* 
obj
, 
Addªss
 
‹ig
) {

72 ::
‰ì
((*)
‹ig
);

73  
	gåue
;

77 
boﬁ


78 
	gSpAddrS∑˚
::
£t_ønge_≥rm
(
Addªss
 
a
, 
size_t
 
Àngth
, 
≥rm
) {

79 
boﬁ
 
	gªt
 = 
Ál£
;

85 
	gMemM≠pögs
::
ôî©‹
 
mi
 = 
mem_m≠s_
.
begö
();

86 
	gmi
 !
mem_m≠s_
.
íd
(); mi++) {

87 
Addªss
 
	g°¨t
 = 
mi
->
fú°
;

88 
	gMemM≠pög
& 
	gmm
 = 
mi
->
£c⁄d
;

89 
Addªss
 
	gíd
 = 
mm
.
íd
;

90 
Addªss
 
	gcode_íd
 = 
a
 + 
Àngth
;

91 i‡((
	ga
 >
°¨t
 && 
code_íd
 < 
íd
) ||

92 (
a
 <
°¨t
 && 
code_íd
 >°¨à&& code_íd <
íd
) ||

93 (
a
 >
°¨t
 &&á < 
íd
 && 
code_íd
 >=Énd)) {

94 
•_debug
("PERM - [%lx, %lxËovîœp†(%lx, %lx)", 
°¨t
, 
íd
, 
a
, 
code_íd
);

95 i‡(
m¥Ÿe˘
((*)
°¨t
, 
íd
 - sèπ, 
≥rm
) < 0) {

96 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

97 
≥º‹
("mprotect");

98  
	gÁl£
;

100 
	gªt
 = 
åue
;

106 i‡(!
	gªt
) {

107 
Addªss
 
	gÆig√d
 = 
a
;

108 
size_t
 
	gpz
 = 
gë∑gesize
();

109 
	gÆig√d
 = (
Addªss
)(((AddªssË
Æig√d
 + 
pz
-1) & ~(pz-1));

110 i‡(
m¥Ÿe˘
((*)
Æig√d
, 
Àngth
, 
≥rm
) < 0) {

111 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

112 
≥º‹
("mprotect");

113  
	gÁl£
;

115 
	gªt
 = 
åue
;

119  
	gªt
;

122 
boﬁ


123 
	gSpAddrS∑˚
::
ª°‹e_ønge_≥rm
(
Addªss
 
a
, 
size_t
 
Àngth
) {

124 
boﬁ
 
	gªt
 = 
Ál£
;

125 
	gMemM≠pögs
::
ôî©‹
 
mi
 = 
mem_m≠s_
.
begö
();

126 
	gmi
 !
mem_m≠s_
.
íd
(); mi++) {

127 
Addªss
 
	g°¨t
 = 
mi
->
fú°
;

128 
	gMemM≠pög
& 
	gmm
 = 
mi
->
£c⁄d
;

129 
Addªss
 
	gíd
 = 
mm
.
íd
;

130 
Addªss
 
	gcode_íd
 = 
a
 + 
Àngth
;

131 i‡((
	ga
 >
°¨t
 && 
code_íd
 < 
íd
) ||

132 (
a
 <
°¨t
 && 
code_íd
 >°¨à&& code_íd <
íd
) ||

133 (
a
 >
°¨t
 &&á < 
íd
 && 
code_íd
 >=Énd)) {

135 i‡(
m¥Ÿe˘
((*)
°¨t
, 
íd
 - sèπ, 
mem_m≠s_
[°¨t].
≥rms
) < 0) {

136 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

137  
	gÁl£
;

139 
	gªt
 = 
åue
;

143  
	gªt
;

148 
	gSpAddrS∑˚
::
upd©e_mem_m≠s
() {

150 
m≠s_fûe
[256];

151 
•rötf
(
m≠s_fûe
, "/¥oc/%d/m≠s", 
gëpid
());

153 
FILE
* 
	gÂ
 = 
f›í
(
m≠s_fûe
, "r");

154 i‡(!
	gÂ
) {

155 
•_≥º‹
("FAILEDÅÿ›í mem‹y m≠pög fûê%s", 
m≠s_fûe
);

157 
	glöebuf
[2048];

158 
fgës
(
löebuf
, 2048, 
Â
Ë!
NULL
) {

159 * 
°¨t_addr_s
 = 
löebuf
;

160 * 
	gíd_addr_s
 = 
°rchr
(
löebuf
, '-');

161 *
	gíd_addr_s
 = '\0';

162 
	gíd_addr_s
++;

164 * 
	g≥rms_s
 = 
°rchr
(
íd_addr_s
, ' ');

165 *
	g≥rms_s
 = '\0';

166 
	g≥rms_s
++;

168 * 
	goff£t_s
 = 
°rchr
(
≥rms_s
, ' ');

169 *
	goff£t_s
 = '\0';

170 
	goff£t_s
++;

172 * 
	gdev_s
 = 
°rchr
(
off£t_s
, ' ');

173 *
	gdev_s
 = '\0';

174 
	gdev_s
++;

176 * 
	göode_s
 = 
°rchr
(
dev_s
, ' ');

177 *
	göode_s
 = '\0';

178 
	göode_s
++;

180 * 
	gpch
 = 
°πok
(
öode_s
, " \n\r");

181 
	göode_s
 = 
pch
;

182 * 
	g∑th_s
 = 
NULL
;

183 i‡(
	gpch
 !
NULL
) {

184 
pch
 = 
°πok
(
NULL
, " \n\r");

185 i‡(
	gpch
) {

186 
	g∑th_s
 = 
pch
;

190 * 
	gpDummy
;

191 
Addªss
 
	g°¨t
 = 
°πﬁl
(
°¨t_addr_s
, &
pDummy
, 16);

194 i‡(
	gmem_m≠s_
.
föd
(
°¨t
Ë=
mem_m≠s_
.
íd
()) {

195 
MemM≠pög
& 
m≠pög
 = 
mem_m≠s_
[
°¨t
];

196 
	gm≠pög
.
	g°¨t
 = 
°¨t
;

197 
	gm≠pög
.
	gíd
 = 
°πﬁ
(
íd_addr_s
, &
pDummy
, 16);

198 
	gm≠pög
.
	goff£t
 = 
°πﬁ
(
off£t_s
, &
pDummy
, 16);

199 
	gm≠pög
.
	gdev
 = 
dev_s
;

200 
	gm≠pög
.
	göode
 = 
°πﬁ
(
öode_s
, &
pDummy
, 16);

201 i‡(
	g∑th_s
Ë
	gm≠pög
.
	g∑th
 = 
∑th_s
;

202 
	g≥rms
 = 0;

203 
	gcou¡
 = 0;

204 i‡(
	g≥rms_s
[0] == 'r') {

205 
≥rms
 |
PROT_READ
;

206 ++
	gcou¡
;

208 i‡(
	g≥rms_s
[1] == 'w') {

209 
≥rms
 |
PROT_WRITE
;

210 ++
	gcou¡
;

212 i‡(
	g≥rms_s
[2] == 'x') {

213 
≥rms
 |
PROT_EXEC
;

214 ++
	gcou¡
;

216 i‡(
	gcou¡
 =3Ë
≥rms
 = 
PROT_NONE
;

217 
	gm≠pög
.
	g≥rms
 = 
≥rms
;

220 
f˛o£
(
Â
);

224 
	gSpAddrS∑˚
::
dump_mem_m≠s
() {

225 #i‚de‡
SP_RELEASE


226 
•_debug
("MMAPS - %lu mem‹y m≠pögs", 
mem_m≠s_
.
size
());

228 
	gMemM≠pögs
::
ôî©‹
 
mi
 = 
mem_m≠s_
.
begö
(); 
	gmi
 !mem_m≠s_.
íd
(); mi++) {

229 #i‚de‡
SP_RELEASE


230 
	gMemM≠pög
& 
	gm≠pög
 = 
mi
->
£c⁄d
;

231 
•_debug
("MMAP - Range[%lx ~ %lx], Offset %lx, Perm %x, Dev %s, Inode %lu, Path %s",

232 
m≠pög
.
°¨t
, m≠pög.
íd
, m≠pög.
off£t
, m≠pög.
≥rms
,

233 
m≠pög
.
dev
.
c_°r
(), m≠pög.
öode
, m≠pög.
∑th
.c_str());

238 
	gSpAddrS∑˚
::
lﬂdLibøry
(
ph
::
P©chObje˘
* 
obj
) {

239 
lﬂdObje˘
(
obj
);

240 
¥e_Æloc_√¨
(
°©ic_ˇ°
<
SpObje˘
*>(
obj
));

247 
	gSpAddrS∑˚
::
¥e_Æloc_√¨
(
•
::
SpObje˘
* 
obj
) {

250 
	gbuf_size_
 = 1024;

251 
	gmax_buf_num_
 = 10;

252 
size_t
 
	gmax_size
 = 
max_buf_num_
 * 
buf_size_
;

254 
Addªss
 
	gps
 = 
gë∑gesize
();

255 
Addªss
 
	gr_√¨
 = ((
obj
->
lﬂd_addr
(Ë+ 
ps
 -1) & ~(ps - 1));

256 
Addªss
 
	gr_size
 = ((
max_size
 + 
ps
 -1) & ~(ps - 1));

257 
Addªss
 
	gbuf
 = 
r_√¨
;

259 
upd©e_mem_m≠s
();

260 
dump_mem_m≠s
();

261 
•_¥öt
("codeBa£: %lx,Ñ_√¨: %lx,Ñ_size: %lu", 
obj
->
codeBa£
(), 
r_√¨
, 
r_size
);

263 * 
	gm
 = 
NULL
;

264 
	gfd
 = -1;

265 !
	gm
 || ()m == -1) {

266 
buf
 -
r_size
;

268 
	gm
 = 
mm≠
((*)
buf
,

269 
r_size
,

270 
PROT_WRITE
 | 
PROT_READ
,

271 
MAP_PRIVATE
 | 
MAP_FIXED
 | 
MAP_ANONYMOUS
,

272 
fd
,

276 i‡(!
	gm
) {

280 
•_¥öt
("gë buf: %lx", (
Dynö°
::
Addªss
)
m
);

286 
	gSpAddrS∑˚
::
gë_√¨
(
ph
::
Poöt
* 
±
) {

287  
NULL
;

	@SpAgent.C

1 
	~"SpAgít.h
"

2 
	~"SpUtûs.h
"

3 
	~"SpC⁄ãxt.h
"

5 
usög
 
	g•
::
SpAgít
;

6 
usög
 
	g•
::
SpP¨£r
;

7 
usög
 
	g•
::
SpC⁄ãxt
;

9 
usög
 
	gph
::
P©chMgr
;

10 
usög
 
	gph
::
AddrS∑˚
;

11 
usög
 
	gph
::
P©chObje˘
;

13 
usög
 
	g≥
::
CodeObje˘
;

16 
	gSpAgít
::
±r


17 
SpAgít
::
	$¸óã
() {

20 i‡(
	`gëív
("SP_COREDUMP")) {

21 
æimô
 
c‹e_limô
;

22 
c‹e_limô
.
æim_cur
 = 
RLIM_INFINITY
;

23 
c‹e_limô
.
æim_max
 = 
RLIM_INFINITY
;

24 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
c‹e_limô
) < 0) {

25 
	`•_≥º‹
("ERROR: failedÅo setup core dumpábility\n");

28  
	`±r
(
√w
 
	`SpAgít
());

29 
	}
}

31 
	gSpAgít
::
	$SpAgít
() {

32 
öô_evít_
 = 
SpEvít
::
	`±r
();

33 
föi_evít_
 = 
SpEvít
::
	`±r
();

34 
∑r£r_
 = 
SpP¨£r
::
	`±r
();

36 
∑r£_⁄ly_
 = 
Ál£
;

37 
dúe˘ˇŒ_⁄ly_
 = 
Ál£
;

38 
Ælow_ùc_
 = 
Ál£
;

39 
	}
}

41 
	gSpAgít
::~
	$SpAgít
() {

44 
	}
}

48 
SpAgít
::
£t_∑r£r
(
SpP¨£r
::
±r
 
∑r£r
) {

49 
∑r£r_
 = 
∑r£r
;

53 
	gSpAgít
::
£t_öô_evít
(
SpEvít
::
±r
 
e
) {

54 
öô_evít_
 = 
e
;

58 
	gSpAgít
::
£t_föi_evít
(
SpEvít
::
±r
 
e
) {

59 
öô_evít_
 = 
e
;

63 
	gSpAgít
::
	$£t_öô_bef‹e
(
°rög
 
p
) {

64 
öô_bef‹e_
 = 
p
;

65 
	}
}

68 
	gSpAgít
::
	$£t_öô_a·î
(
°rög
 
p
) {

69 
öô_a·î_
 = 
p
;

70 
	}
}

73 
	gSpAgít
::
£t_öô_¥›ñÀr
(
SpPr›ñÀr
::
±r
 
p
) {

74 
öô_¥›ñÀr_
 = 
p
;

78 
	gSpAgít
::
	$£t_∑r£_⁄ly
(
boﬁ
 
b
) {

79 
∑r£_⁄ly_
 = 
b
;

80 
	}
}

83 
	gSpAgít
::
	$£t_dúe˘ˇŒ_⁄ly
(
boﬁ
 
b
) {

84 
dúe˘ˇŒ_⁄ly_
 = 
b
;

85 
	}
}

88 
	gSpAgít
::
	$£t_ùc
(
boﬁ
 
b
) {

89 
Ælow_ùc_
 = 
b
;

90 
	}
}

94 
	gSpAgít
::
	$go
() {

96 #i‚de‡
SP_RELEASE


97 
	`•_debug
("=========Sèπ Sñf-¥›ñÀd in°rumíèti⁄ @ Pro˚s†%d ==========", 
	`gëpid
());

101 
SåögSë
 
ûÀgÆ_exes
;

102 
ûÀgÆ_exes
.
	`ö£π
("lsof");

103 
ûÀgÆ_exes
.
	`ö£π
("bash");

104 
ûÀgÆ_exes
.
	`ö£π
("Injector");

105 
ûÀgÆ_exes
.
	`ö£π
("sh");

106 
ûÀgÆ_exes
.
	`ö£π
("ssh");

107 
ûÀgÆ_exes
.
	`ö£π
("xauth");

108 
ûÀgÆ_exes
.
	`ö£π
("scp");

109 
ûÀgÆ_exes
.
	`ö£π
("cp");

110 
ûÀgÆ_exes
.
	`ö£π
("netstat");

112 i‡(
•
::
	`is_ûÀgÆ_exe
(
ûÀgÆ_exes
)) {

113 
	`•_debug
("ILLEGAL EXE -ávoid instrumenting");

118 i‡(!
öô_evít_
) {

119 #i‚de‡
SP_RELEASE


120 
	`•_debug
("INIT EVENT - Use defaultÉvent");

122 
öô_evít_
 = 
SyncEvít
::
	`¸óã
();

124 i‡(!
föi_evít_
) {

125 #i‚de‡
SP_RELEASE


126 
	`•_debug
("FINI EVENT - Use defaultÉvent");

128 
föi_evít_
 = 
SpEvít
::
	`¸óã
();

130 i‡(
öô_bef‹e_
.
	`size
() == 0) {

131 #i‚de‡
SP_RELEASE


132 
	`•_debug
("BEFORE_PAYLOAD - Use defaultÖayload before calls");

134 
öô_bef‹e_
 = "default_before";

136 i‡(
öô_a·î_
.
	`size
() == 0) {

137 #i‚de‡
SP_RELEASE


138 
	`•_debug
("AFTER_PAYLOAD - NoÖayloadáfter calls");

140 
öô_a·î_
 = "";

142 i‡(!
∑r£r_
) {

143 #i‚de‡
SP_RELEASE


144 
	`•_debug
("PARSER - Use defaultÖarser");

146 
∑r£r_
 = 
SpP¨£r
::
	`¸óã
();

148 i‡(!
öô_¥›ñÀr_
) {

149 #i‚de‡
SP_RELEASE


150 
	`•_debug
("PROPELLER - Use defaultÖropeller");

153 
öô_¥›ñÀr_
 = 
SpPr›ñÀr
::
	`¸óã
();

155 #i‚de‡
SP_RELEASE


156 i‡(
dúe˘ˇŒ_⁄ly_
) {

157 
	`•_debug
("DIRECT CALL ONLY - only instrument direct calls, ignoring indirect calls");

159 
	`•_debug
("DIRECT/INDIRECT CALL - instrument both directánd indirect calls");

161 i‡(
Ælow_ùc_
) {

162 
	`•_debug
("MULTI PROCESS - support multiprocess instrumentation");

164 
	`•_debug
("SINGLE PROCESS - only support single-process instrumentation");

169 
c⁄ãxt_
 = 
SpC⁄ãxt
::
	`¸óã
(
öô_¥›ñÀr_
,

170 
öô_bef‹e_
,

171 
öô_a·î_
,

172 
∑r£r_
);

173 
c⁄ãxt_
->
	`£t_dúe˘ˇŒ_⁄ly
(
dúe˘ˇŒ_⁄ly_
);

174 
c⁄ãxt_
->
	`£t_Ælow_ùc
(
Ælow_ùc_
);

176 i‡(
∑r£_⁄ly_
) {

177 #i‚de‡
SP_RELEASE


178 
	`•_debug
("PARSE ONLY -ÉxitáfterÖarsing, without instrumentation");

185 
öô_evít_
->
	`ªgi°î_evít
(
c⁄ãxt_
);

186 
föi_evít_
->
	`ªgi°î_evít
(
c⁄ãxt_
);

187 
	}
}

	@SpArch-i386.C

1 
	~"SpEvít.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpSnù≥t.h
"

5 
	~"SpUtûs.h
"

6 
	~"SpPoöt.h
"

8 
usög
 
	gdt
::
Addªss
;

10 
usög
 
	gö
::
Resu…
;

11 
usög
 
	gö
::
Visô‹
;

12 
usög
 
	gö
::
Immedüã
;

13 
usög
 
	gö
::
c_CÆlIn¢
;

14 
usög
 
	gö
::
Ex¥essi⁄
;

15 
usög
 
	gö
::
In°ru˘i⁄
;

16 
usög
 
	gö
::
Dîe„ªn˚
;

17 
usög
 
	gö
::
Regi°îAST
;

18 
usög
 
	gö
::
Bö¨yFun˘i⁄
;

20 
«me•a˚
 
	g•
 {

27 
size_t


28 
	gSpSnù≥t
::
emô_ßve
(* 
buf
, 
size_t
 
off£t
, 
boﬁ
) {

29 * 
	gp
 = 
buf
 + 
off£t
;

32 *
	gp
++ = 0x60;

34 
size_t
 
	gö¢size
 = 
emô_ßve_•
(
p
, 0);

35 
	gp
 +
ö¢size
;

37  (
	gp
 - (
	gbuf
 + 
	goff£t
));

41 
size_t


42 
	gSpSnù≥t
::
emô_ª°‹e
–* 
buf
, 
size_t
 
off£t
, 
boﬁ
) {

43 * 
	gp
 = 
buf
 + 
off£t
;

45 *
	gp
++ = 0x61;

46  (
	gp
 - (
	gbuf
 + 
	goff£t
));

50 
size_t


51 
	gSpSnù≥t
::
emô_Áu…
(* 
buf
, 
size_t
 
off£t
) {

52 * 
	gp
 = 
buf
 + 
off£t
;

55 *
	gp
++ = ()0xc7;

56 *
	gp
++ = ()0x05;

58 *
	gp
++ = ()0x00;

59 *
	gp
++ = ()0x00;

60 *
	gp
++ = ()0x00;

61 *
	gp
++ = ()0x00;

63 *
	gp
++ = ()0x00;

64 *
	gp
++ = ()0x00;

65 *
	gp
++ = ()0x00;

66 *
	gp
++ = ()0x00;

68  (
	gp
 - (
	gbuf
 + 
	goff£t
));

75 
size_t


76 
	gSpSnù≥t
::
emô_ßve_•
(* 
buf
, 
size_t
 
off£t
) {

77 * 
	gp
 = 
buf
 + 
off£t
;

79 *
	gp
++ = 0x89;

80 *
	gp
++ = 0x25;

82 * 
	gl
 = (*)
p
;

83 *
	gl
 = ()&
ßved_c⁄ãxt_loc_
;

84 
	gp
 += ();

86  (
	gp
 - (
	gbuf
 + 
	goff£t
));

90 
size_t


91 
emô_push_imm32
(
imm
, * 
buf
, 
size_t
 
off£t
) {

92 * 
	gp
 = 
buf
 + 
off£t
;

95 *
	gp
++ = 0x68;

96 * 
	gi
 = (*)
p
;

97 *
	gi
 = 
imm
;

98 
	gp
 += ();

100  (
	gp
 - (
	gbuf
 + 
	goff£t
));

104 
size_t


105 
emô_p›_imm32
(* 
buf
, 
size_t
 
off£t
) {

106 * 
	gp
 = 
buf
 + 
off£t
;

108 *
	gp
++ = 0x58;

109  (
	gp
 - (
	gbuf
 + 
	goff£t
));

116 
size_t


117 
	gSpSnù≥t
::
emô_∑ss_∑øm
(
poöt
, 
∑ylﬂd
, * 
buf
, 
size_t
 
off£t
) {

118 * 
	gp
 = 
buf
 + 
off£t
;

119 
size_t
 
	gö¢size
 = 0;

121 i‡(
	g∑ylﬂd
) {

123 
	gö¢size
 = 
emô_push_imm32
(()
∑ylﬂd
, 
p
, 0);

124 
	gp
 +
ö¢size
;

128 
	gö¢size
 = 
emô_push_imm32
(()
poöt
, 
p
, 0);

129 
	gp
 +
ö¢size
;

131  (
	gp
 - (
	gbuf
 + 
	goff£t
));

138 
size_t


139 
	gSpSnù≥t
::
emô_ˇŒ_abs
(
ˇŒì
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
 
ª°‹e
) {

140 * 
	gp
 = 
buf
 + 
off£t
;

141 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

142 
size_t
 
	gö¢size
 = 0;

143 
Addªss
 
	gªl_addr
 = (
ˇŒì
 - 
ªèddr
);

145 i‡(
	g•
::
is_di•32
(
ªl_addr
)) {

147 *
p
++ = 0xe8;

148 * 
	gªl_p
 = (*)
p
;

149 *
	gªl_p
 = 
ªl_addr
;

150 
	gp
 += ();

152 
•_≥º‹
("largerÅhan 4 bytes for calláddress");

155 i‡(
	gª°‹e
) {

157 
	gö¢size
 = 
emô_p›_imm32
(
p
, 0);

158 
	gp
 +
ö¢size
;

160 i‡(
	gc⁄ãxt_
->
Ælow_ùc
()) {

162 
	gö¢size
 = 
emô_p›_imm32
(
p
, 0);

163 
	gp
 +
ö¢size
;

167  (
	gp
 - (
	gbuf
 + 
	goff£t
));

175 
size_t


176 
	gSpSnù≥t
::
emô_jump_abs
(
åg
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
 
abs
) {

177 * 
	gp
 = 
buf
 + 
off£t
;

178 
size_t
 
	gö¢size
 = 0;

180 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

181 
Addªss
 
	gªl_addr
 = (
åg
 - 
ªèddr
);

183 i‡(
	g•
::
is_di•32
(
ªl_addr
Ë&& !
abs
) {

185 *
p
++ = 0xe9;

186 * 
	gªl_p
 = (*)
p
;

187 *
	gªl_p
 = 
ªl_addr
;

188 
	gp
 += 4;

191 
	gö¢size
 = 
emô_push_imm32
(
åg
, 
p
, 0);

192 
	gp
 +
ö¢size
;

194 *
	gp
++ = 0xc3;

197  (
	gp
 - (
	gbuf
 + 
	goff£t
));

203 
size_t


204 
	gSpSnù≥t
::
emô_ˇŒ_‹ig
(
§c
, 
size_t
 
size
, * 
buf
, size_à
off£t
) {

205 * 
	gp
 = 
buf
 + 
off£t
;

206 * 
	gp§c
 = (*)
§c
;

207 
mem˝y
(
p
, 
p§c
, 
size
);

208  
	gsize
;

212 
size_t


213 
	gSpSnù≥t
::
ªloc_ö¢
(
Addªss
 
§c_ö¢
, 
In°ru˘i⁄
::
På
 
ö¢
,

214 
Addªss
 
œ°
, * 
buf
) {

218 
Addªss
 
	ga
 = 
§c_ö¢
;

219 i‡(
	ga
 =
œ°
)  0;

222 * 
	gp
 = 
buf
;

223 i‡(
	gö¢
->
gëC©eg‹y
(Ë=
c_CÆlIn¢
 &&

224 
a
 !
œ°
) {

229 *
p
++ = 0xbb;

230 * 
	g√w_ebx
 = (*)
p
;

231 *
	g√w_ebx
 = ()(
a
+5);

235 
mem˝y
(
p
, 
ö¢
->
±r
(), in¢->
size
());

236  
	gö¢
->
size
();

245 
Addªss


246 
	gSpSnù≥t
::
gë_¥e_sig«l_pc
(* 
c⁄ãxt
) {

247 
uc⁄ãxt_t
* 
˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

248  
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_EIP
];

252 
Addªss


253 
	gSpSnù≥t
::
£t_pc
(
Addªss
 
pc
, * 
c⁄ãxt
) {

254 
uc⁄ãxt_t
* 
	g˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

255 
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_EIP
] = 
pc
;

259 
Addªss


260 
	gSpSnù≥t
::
gë_ßved_ªg
(
Dynö°
::
MachRegi°î
 
ªg
) {

264 
	#EDI
 0

	)

265 
	#ESI
 4

	)

266 
	#EBP
 8

	)

267 
	#ESP
 12

	)

268 
	#EBX
 16

	)

269 
	#EDX
 20

	)

270 
	#ECX
 24

	)

271 
	#EAX
 28

	)

273 
	#ªg_vÆ
(
i
Ë(*(*)(
ßved_c⁄ãxt_loc_
+(i)))

	)

279 
usög
 
«me•a˚
 
Dynö°
::
x86
;

280 i‡(
	gªg
 =
edi
Ë 
ªg_vÆ
(
EDI
);

281 i‡(
	gªg
 =
esi
Ë 
ªg_vÆ
(
ESI
);

282 i‡(
	gªg
 =
ebp
Ë 
ªg_vÆ
(
EBP
);

283 i‡(
	gªg
 =
e•
Ë 
ªg_vÆ
(
ESP
);

284 i‡(
	gªg
 =
ebx
Ë 
ªg_vÆ
(
EBX
);

285 i‡(
	gªg
 =
edx
Ë 
ªg_vÆ
(
EDX
);

286 i‡(
	gªg
 =
ecx
Ë 
ªg_vÆ
(
ECX
);

287 i‡(
	gªg
 =
óx
Ë 
ªg_vÆ
(
EAX
);

293 
boﬁ


294 
	gSpP¨£r
::
is_pc
(
Dynö°
::
MachRegi°î
 
r
) {

295 i‡(
r
 =
Dynö°
::
x86
::
eù
Ë 
åue
;

296  
	gÁl£
;

301 
size_t


302 
	gSpSnù≥t
::
jump_abs_size
() {

311 
	gSpSnù≥t
::
p›_¨gumít
(
ArgumítH™dÀ
* 
h
, 
size_t
 
size
) {

312 * 
	ga
 = (*)(
ßved_c⁄ãxt_loc_
 + 32 + 
h
->
off£t
);

313 
	gh
->
	goff£t
 +
size
;

314  
	ga
;

319 
	gSpSnù≥t
::
gë_ªt_vÆ
() {

320  
gë_ßved_ªg
(
Dynö°
::
x86
::
óx
);

	@SpArch-x86_64.C

1 
	~"SpEvít.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpSnù≥t.h
"

5 
	~"SpPoöt.h
"

6 
	~"SpUtûs.h
"

8 
usög
 
	gdt
::
Addªss
;

10 
usög
 
	gph
::
P©chFun˘i⁄
;

12 
usög
 
	gö
::
Resu…
;

13 
usög
 
	gö
::
Visô‹
;

14 
usög
 
	gö
::
Immedüã
;

15 
usög
 
	gö
::
Ex¥essi⁄
;

16 
usög
 
	gö
::
In°ru˘i⁄
;

17 
usög
 
	gö
::
Dîe„ªn˚
;

18 
usög
 
	gö
::
Regi°îAST
;

19 
usög
 
	gö
::
Bö¨yFun˘i⁄
;

22 
«me•a˚
 
	g•
 {

24 
SpC⁄ãxt
* 
g_c⁄ãxt
;

31 
size_t


32 
	gSpSnù≥t
::
emô_ßve
(* 
buf
, 
size_t
 
off£t
, 
boﬁ
 
ödúe˘
) {

33 * 
	gp
 = 
buf
 + 
off£t
;

36 *
	gp
++ = 0x57;

37 *
	gp
++ = 0x56;

38 *
	gp
++ = 0x52;

39 *
	gp
++ = 0x51;

40 *
	gp
++ = 0x41;

41 *
	gp
++ = 0x50;

42 *
	gp
++ = 0x41;

43 *
	gp
++ = 0x51;

44 *
	gp
++ = 0x50;

48 
	gp
 +
emô_ßve_•
(
p
, 0);

51 i‡(
	gödúe˘
) {

52 *
	gp
++ = 0x41;

53 *
	gp
++ = 0x52;

54 *
	gp
++ = 0x41;

55 *
	gp
++ = 0x53;

56 *
	gp
++ = 0x53;

57 *
	gp
++ = 0x41;

58 *
	gp
++ = 0x54;

59 *
	gp
++ = 0x41;

60 *
	gp
++ = 0x55;

61 *
	gp
++ = 0x41;

62 *
	gp
++ = 0x56;

63 *
	gp
++ = 0x41;

64 *
	gp
++ = 0x57;

65 *
	gp
++ = 0x55;

68  (
	gp
 - (
	gbuf
 + 
	goff£t
));

72 
size_t


73 
	gSpSnù≥t
::
emô_ª°‹e
(* 
buf
, 
size_t
 
off£t
, 
boﬁ
 
ödúe˘
) {

74 * 
	gp
 = 
buf
 + 
off£t
;

77 i‡(
	gödúe˘
) {

78 *
	gp
++ = 0x5d;

79 *
	gp
++ = 0x41;

80 *
	gp
++ = 0x5f;

81 *
	gp
++ = 0x41;

82 *
	gp
++ = 0x5e;

83 *
	gp
++ = 0x41;

84 *
	gp
++ = 0x5d;

85 *
	gp
++ = 0x41;

86 *
	gp
++ = 0x5c;

87 *
	gp
++ = 0x5b;

88 *
	gp
++ = 0x41;

89 *
	gp
++ = 0x5b;

90 *
	gp
++ = 0x41;

91 *
	gp
++ = 0x5a;

95 *
	gp
++ = 0x58;

96 *
	gp
++ = 0x41;

97 *
	gp
++ = 0x59;

98 *
	gp
++ = 0x41;

99 *
	gp
++ = 0x58;

100 *
	gp
++ = 0x59;

101 *
	gp
++ = 0x5a;

102 *
	gp
++ = 0x5e;

103 *
	gp
++ = 0x5f;

105  (
	gp
 - (
	gbuf
 + 
	goff£t
));

111 
size_t


112 
	gSpSnù≥t
::
emô_ßve_•
(* 
buf
, 
size_t
 
off£t
) {

113 * 
	gp
 = 
buf
 + 
off£t
;

116 *
	gp
++ = 0x48;

117 *
	gp
++ = 0xb8;

118 * 
	gl
 = (*)
p
;

119 *
	gl
 = ()&
ßved_c⁄ãxt_loc_
;

120 
	gp
 += ();

123 *
	gp
++ = 0x48;

124 *
	gp
++ = 0x89;

125 *
	gp
++ = 0x20;

127  (
	gp
 - (
	gbuf
 + 
	goff£t
));

131 
size_t


132 
	gSpSnù≥t
::
emô_Áu…
(* 
buf
, 
size_t
 
off£t
) {

133 * 
	gp
 = 
buf
 + 
off£t
;

136 *
	gp
++ = ()0x48;

137 *
	gp
++ = ()0xc7;

138 *
	gp
++ = ()0x04;

139 *
	gp
++ = ()0x25;

140 *
	gp
++ = ()0x00;

141 *
	gp
++ = ()0x00;

142 *
	gp
++ = ()0x00;

143 *
	gp
++ = ()0x00;

144 *
	gp
++ = ()0x00;

145 *
	gp
++ = ()0x00;

146 *
	gp
++ = ()0x00;

147 *
	gp
++ = ()0x00;

148  (
	gp
 - (
	gbuf
 + 
	goff£t
));

152 
size_t


153 
emô_mov_imm64_rdi
(
imm
, * 
buf
, 
size_t
 
off£t
) {

154 * 
	gp
 = 
buf
 + 
off£t
;

156 *
	gp
 = ()0x48;Ö++;

157 *
	gp
 = ()0xbf;Ö++;

158 *((*)
	gp
Ë()
imm
;

163 
size_t


164 
emô_mov_imm64_rsi
(
imm
, * 
buf
, 
size_t
 
off£t
) {

165 * 
	gp
 = 
buf
 + 
off£t
;

167 *
	gp
 = ()0x48;Ö++;

168 *
	gp
 = ()0xbe;Ö++;

169 *((*)
	gp
Ë()
imm
;

176 
size_t


177 
	gSpSnù≥t
::
emô_∑ss_∑øm
(
poöt
, 
∑ylﬂd
, * 
buf
, 
size_t
 
off£t
) {

178 * 
	gp
 = 
buf
 + 
off£t
;

179 
size_t
 
	gö¢size
 = 0;

182 
	gö¢size
 = 
emô_mov_imm64_rdi
(()
poöt
, 
p
, 0);

183 
	gp
 +
ö¢size
;

185 i‡(
	g∑ylﬂd
) {

187 
	gö¢size
 = 
emô_mov_imm64_rsi
(()
∑ylﬂd
, 
p
, 0);

188 
	gp
 +
ö¢size
;

191  (
	gp
 - (
	gbuf
 + 
	goff£t
));

195 
size_t


196 
emô_push_imm64
(
imm
, * 
buf
, 
size_t
 
off£t
) {

197 * 
	gp
 = 
buf
 + 
off£t
;

204 
	gi
 = 3; i >= 0; i--) {

205 
	gw‹d
 = 
°©ic_ˇ°
<>((
imm
 >> (16 * 
i
)) & 0xffff);

206 *
	gp
++ = 0x66;

207 *
	gp
++ = 0x68;

208 *(*)
	gp
 = 
w‹d
;

209 
	gp
 += 2;

211  (
	gp
 - (
	gbuf
 + 
	goff£t
));

215 
size_t


216 
	gSpSnù≥t
::
emô_ˇŒ_abs
(
ˇŒì
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
) {

217 * 
	gp
 = 
buf
 + 
off£t
;

218 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

219 
Addªss
 
	gªl_addr
 = (
ˇŒì
 - 
ªèddr
);

221 i‡(
	g•
::
is_di•32
(
ªl_addr
)) {

225 *
p
++ = 0xe8;

226 * 
	gªl_p
 = (*)
p
;

227 *
	gªl_p
 = 
ªl_addr
;

228 
	gp
 += 4;

233 *
	gp
++ = 0x48;

234 *
	gp
++ = 0xb8;

235 * 
	gˇŒ_addr
 = (*)
p
;

236 *
	gˇŒ_addr
 = 
ˇŒì
;

237 
	gp
 += ();

240 *
	gp
++ = 0xff;

241 *
	gp
++ = 0xd0;

244  (
	gp
 - (
	gbuf
 + 
	goff£t
));

248 
size_t


249 
	gSpSnù≥t
::
emô_jump_abs
(
åg
, * 
buf
, 
size_t
 
off£t
, 
boﬁ
 
abs
) {

250 * 
	gp
 = 
buf
 + 
off£t
;

251 
size_t
 
	gö¢size
 = 0;

253 
Addªss
 
	gªèddr
 = (Addªss)
p
+5;

254 
Addªss
 
	gªl_addr
 = (
åg
 - 
ªèddr
);

256 i‡(
	g•
::
is_di•32
(
ªl_addr
Ë&& !
abs
) {

260 *
p
++ = 0xe9;

261 * 
	gªl_p
 = (*)
p
;

262 *
	gªl_p
 = 
ªl_addr
;

263 
	gp
 += 4;

268 
	gö¢size
 = 
emô_push_imm64
(
åg
, 
p
, 0);

269 
	gp
 +
ö¢size
;

272 *
	gp
++ = 0xc3;

274  (
	gp
 - (
	gbuf
 + 
	goff£t
));

282 
Addªss


283 
	gSpSnù≥t
::
gë_¥e_sig«l_pc
(* 
c⁄ãxt
) {

284 
uc⁄ãxt_t
* 
˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

285  
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_RIP
];

289 
Addªss


290 
	gSpSnù≥t
::
£t_pc
(
Addªss
 
pc
, * 
c⁄ãxt
) {

291 
uc⁄ãxt_t
* 
	g˘x
 = (uc⁄ãxt_t*)
c⁄ãxt
;

292 
	g˘x
->
	guc_mc⁄ãxt
.
	ggªgs
[
REG_RIP
] = 
pc
;

293  
	gpc
;

297 
Addªss


298 
	gSpSnù≥t
::
gë_ßved_ªg
(
Dynö°
::
MachRegi°î
 
ªg
) {

300 
	#RAX
 (0)

	)

301 
	#R9
 (8)

	)

302 
	#R8
 (16)

	)

303 
	#RCX
 (24)

	)

304 
	#RDX
 (32)

	)

305 
	#RSI
 (40)

	)

306 
	#RDI
 (48)

	)

307 
	#RSP
 (56)

	)

309 
	#R10
 (-8)

	)

310 
	#R11
 (-16)

	)

311 
	#RBX
 (-24)

	)

312 
	#R12
 (-32)

	)

313 
	#R13
 (-40)

	)

314 
	#R14
 (-48)

	)

315 
	#R15
 (-56)

	)

316 
	#RBP
 (-64)

	)

318 
	#ªg_vÆ
(
i
Ë(*(*)(
ßved_c⁄ãxt_loc_
+()(i)))

	)

325 
usög
 
«me•a˚
 
Dynö°
::
x86_64
;

327 i‡(
	gªg
 =
øx
Ë 
ªg_vÆ
(
RAX
);

328 i‡(
	gªg
 =
rbx
Ë 
ªg_vÆ
(
RBX
);

329 i‡(
	gªg
 =
rcx
Ë 
ªg_vÆ
(
RCX
);

330 i‡(
	gªg
 =
rdx
Ë 
ªg_vÆ
(
RDX
);

331 i‡(
	gªg
 =
rsi
Ë 
ªg_vÆ
(
RSI
);

332 i‡(
	gªg
 =
rdi
Ë 
ªg_vÆ
(
RDI
);

333 i‡(
	gªg
 =
r8
Ë 
ªg_vÆ
(
R8
);

334 i‡(
	gªg
 =
r9
Ë 
ªg_vÆ
(
R9
);

335 i‡(
	gªg
 =
r10
Ë 
ªg_vÆ
(
R10
);

336 i‡(
	gªg
 =
r11
Ë 
ªg_vÆ
(
R11
);

337 i‡(
	gªg
 =
r12
Ë 
ªg_vÆ
(
R12
);

338 i‡(
	gªg
 =
r13
Ë 
ªg_vÆ
(
R13
);

339 i‡(
	gªg
 =
r14
Ë 
ªg_vÆ
(
R14
);

340 i‡(
	gªg
 =
r15
Ë 
ªg_vÆ
(
R15
);

341 i‡(
	gªg
 =
r•
Ë (
ßved_c⁄ãxt_loc_
+
RSP
);

343 i‡(
	gªg
 =
rbp
Ë 
ªg_vÆ
(
RBP
);

345 i‡(
	gªg
 =
óx
Ë 
ªg_vÆ
(
RAX
);

346 i‡(
	gªg
 =
ebx
Ë 
ªg_vÆ
(
RBX
);

347 i‡(
	gªg
 =
ecx
Ë 
ªg_vÆ
(
RCX
);

348 i‡(
	gªg
 =
edx
Ë 
ªg_vÆ
(
RDX
);

349 i‡(
	gªg
 =
esi
Ë 
ªg_vÆ
(
RSI
);

350 i‡(
	gªg
 =
edi
Ë 
ªg_vÆ
(
RDI
);

351 i‡(
	gªg
 =
e•
Ë (
ßved_c⁄ãxt_loc_
+
RSP
);

353 i‡(
	gªg
 =
ebp
Ë 
ªg_vÆ
(
RBP
);

359 
boﬁ


360 
	gSpP¨£r
::
is_pc
(
Dynö°
::
MachRegi°î
 
r
) {

361 i‡(
r
 =
Dynö°
::
x86_64
::
rù
Ë 
åue
;

362  
	gÁl£
;

365 ˛as†
	cRñocVisô‹
 : 
public
 
Visô‹
 {

366 
public
:

367 
RñocVisô‹
(
SpP¨£r
::
±r
 
p
Ë: 
Visô‹
(), 
p_
’), 
u£_pc_
(
Ál£
) {}

368 
vútuÆ
 
visô
(
Regi°îAST
* 
r
) {

369 i‡(
	gp_
->
is_pc
(
r
->
gëID
())) {

370 
	gu£_pc_
 = 
åue
;

373 
vútuÆ
 
visô
(
Bö¨yFun˘i⁄
* 
b
) {

375 
vútuÆ
 
visô
(
Immedüã
* 
i
) {

377 
vútuÆ
 
visô
(
Dîe„ªn˚
* 
d
) {

379 
boﬁ
 
u£_pc
(Ëc⁄° {  
	gu£_pc_
; }

380 
	g¥iv©e
:

381 
SpP¨£r
::
±r
 
p_
;

382 
boﬁ
 
	gu£_pc_
;

415 
gë_di•
(
In°ru˘i⁄
::
På
 
ö¢
, * 
ö¢_buf
) {

416 * 
	gdi•
 = 
NULL
;

418 
	gdi•_off£t
 = 0;

420 i‡((
	gö¢_buf
[
di•_off£t
] & 0xf0) == 0x40) {

421 ++
di•_off£t
;

425 i‡(
	gö¢_buf
[
di•_off£t
] == 0x0f) {

426 ++
di•_off£t
;

430 ++
	gdi•_off£t
;

433 ++
	gdi•_off£t
;

435 
	gdi•
 = (*)&
ö¢_buf
[
di•_off£t
];

436  
	gdi•
;

440 ˛as†
	cEmuVisô‹
 : 
public
 
Visô‹
 {

441 
public
:

442 
EmuVisô‹
(
Addªss
 
a
)

443 : 
Visô‹
(), 
imm_
(0), 
a_
(
a
) { }

444 
vútuÆ
 
visô
(
Regi°îAST
* 
r
) {

446 
	gimm_
 = 
a_
;

447 
	g°ack_
.
push
(
imm_
);

449 
vútuÆ
 
visô
(
Bö¨yFun˘i⁄
* 
b
) {

450 
Addªss
 
	gi1
 = 
°ack_
.
t›
();

451 
	g°ack_
.
p›
();

452 
Addªss
 
	gi2
 = 
°ack_
.
t›
();

453 
	g°ack_
.
p›
();

455 i‡(
	gb
->
isAdd
()) {

456 
	gimm_
 = 
i1
 + 
i2
;

457 } i‡(
	gb
->
isMu…ùly
()) {

458 
	gimm_
 = 
i1
 * 
i2
;

460 
as£π
(0);

462 
	g°ack_
.
push
(
imm_
);

464 
vútuÆ
 
visô
(
Immedüã
* 
i
) {

465 
Resu…
 
	gªs
 = 
i
->
evÆ
();

466 
	gªs
.
size
()) {

468 
imm_
 =
ªs
.
vÆ
.
u8vÆ
;

472 
imm_
 =
ªs
.
vÆ
.
u16vÆ
;

476 
imm_
 =
ªs
.
vÆ
.
u32vÆ
;

480 
imm_
 =
ªs
.
vÆ
.
u64vÆ
;

484 
	g°ack_
.
push
(
imm_
);

486 
vútuÆ
 
visô
(
Dîe„ªn˚
* 
d
) {

491 
Addªss
 
imm
() const {

492  
	gimm_
;

495 
	g¥iv©e
:

496 
°d
::
°ack
<
Addªss
> 
°ack_
;

497 
Addªss
 
	gimm_
;

498 
Addªss
 
	ga_
;

514 
size_t


515 
emuœã_pc£n
(
In°ru˘i⁄
::
På
 
ö¢
, 
Ex¥essi⁄
::På 
e
, 
Addªss
 
a
, * 
buf
) {

516 * 
	gp
 = 
buf
;

517 * 
	gö¢_buf
 = (*)
ö¢
->
±r
();

522 
	gªx
 = 0;

523 
	gmodrm_off£t
 = 1;

524 i‡((
	gö¢_buf
[0] & 0xf0) == 0x40) {

525 
ªx
 = 
ö¢_buf
[0];

526 ++
	gmodrm_off£t
;

529 
	gesˇ≥
 = 0;

530 i‡(
	gö¢_buf
[
modrm_off£t
-1] == 0x0f) {

531 
esˇ≥
 = 0x0f;

532 ++
	gmodrm_off£t
;

536 
	gmodrm
 = 
ö¢_buf
[
modrm_off£t
];

539 
	gªg
 = 0;

540 i‡(
	gªx
) {

542 i‡(
	gªx
 & 0x04Ë
	gªg
 |= 0x08;

544 
	gªg
 |((
modrm
 & 0x38) >> 3);

549 i‡(
	gªg
 != 0x08) {

551 *
p
++ = 0x41;

552 *
	gp
++ = 0x50;

555 *
	gp
++ = 0x41;

556 *
	gp
++ = 0x51;

562 *
	gp
++ = 0x49;

563 i‡(
	gªg
 != 0x08) {

564 *
p
++ = 0xb8;

566 *
	gp
++ = 0xb9;

568 * 
	gl
 = (*)
p
;

571 
EmuVisô‹
 
visô‹
(
a
+
ö¢
->
size
());

572 
	ge
->
≠∂y
(&
visô‹
);

573 *
	gl
 = 
visô‹
.
imm
();

574 
	gp
 +(
l
);

577 i‡(
	gªx
) {

578 
	gªx
 |= 0x01;

579 *
	gp
++ = 
ªx
;

581 *
	gp
++ = 0x41;

585 i‡(
	gesˇ≥
) {

586 *
	gp
++ = 0x0f;

590 *
	gp
++ = 
ö¢_buf
[
modrm_off£t
-1];

591 
	g√w_modrm
 = 
modrm
;

592 i‡(
	gªg
 != 0x08) {

593 
√w_modrm
 &= 0xf8;

595 
	g√w_modrm
 &= 0xf9;

597 *
	gp
++ = 
√w_modrm
;

600 
	gi
 = 
modrm_off£t
+1+4; i < 
	gö¢
->
size
(); i++) {

601 *
	gp
++ = 
ö¢_buf
[
i
];

607 i‡(
	gªg
 != 0x08) {

609 *
p
++ = 0x41;

610 *
	gp
++ = 0x58;

613 *
	gp
++ = 0x41;

614 *
	gp
++ = 0x59;

617  (
	gsize_t
)(
	gp
 - 
	gbuf
);

620 
size_t


621 
ªloc_ö¢_öã∫Æ
(
Addªss
 
a
, 
In°ru˘i⁄
::
På
 
ö¢
,

622 
°d
::
£t
<
Ex¥essi⁄
::
På
>& 
exp
, 
boﬁ
 
u£_pc
, * 
p
) {

623 i‡(
	gu£_pc
) {

625 
	gö¢_buf
[20];

626 
mem˝y
(
ö¢_buf
, 
ö¢
->
±r
(), in¢->
size
());

627 * 
	gdis_buf
 = 
gë_di•
(
ö¢
, 
ö¢_buf
);

628 
	gﬁd_rù
 = 
a
;

629 
	g√w_rù
 = ()
p
;

631 
	gl⁄g_√w_dis
 = (
ﬁd_rù
 - 
√w_rù
Ë+ *
dis_buf
;

633 i‡(
	g•
::
is_di•32
(
l⁄g_√w_dis
)) {

635 *
dis_buf
 = ()
l⁄g_√w_dis
;

636 
mem˝y
(
p
, 
ö¢_buf
, 
ö¢
->
size
());

637  
	gö¢
->
size
();

640 
size_t
 
	gö¢_size
 = 
emuœã_pc£n
(
ö¢
, *
exp
.
begö
(), 
a
, 
p
);

641  
	gö¢_size
;

645 
mem˝y
(
p
, 
ö¢
->
±r
(), in¢->
size
());

646  
	gö¢
->
size
();

651 
size_t


652 
	gSpSnù≥t
::
ªloc_ö¢
(
Addªss
 
§c_ö¢
, 
In°ru˘i⁄
::
På
 
ö¢
,

653 
Addªss
 
œ°
, * 
buf
) {

655 i‡(
	g§c_ö¢
 =
œ°
) {  0; }

658 
	g£t
<
	gEx¥essi⁄
::
På
> 
›Së
;

659 i‡(
	gö¢
->
ªadsMem‹y
()Ëö¢->
gëMem‹yRódO≥ønds
(
›Së
);

660 i‡(
	gö¢
->
wrôesMem‹y
()Ëö¢->
gëMem‹yWrôeO≥ønds
(
›Së
);

662 
boﬁ
 
	gu£_pc
 = 
Ál£
;

663 
	g£t
<
	gEx¥essi⁄
::
På
>::
ôî©‹
 
i
 = 
›Së
.
begö
(); 
	gi
 !›Së.
íd
(); i++) {

664 
RñocVisô‹
 
visô‹
(
c⁄ãxt_
->
∑r£r
());

665 (*
	gi
)->
≠∂y
(&
visô‹
);

666 
	gu£_pc
 = 
visô‹
.
u£_pc
();

670  
ªloc_ö¢_öã∫Æ
(
§c_ö¢
, 
ö¢
, 
›Së
, 
u£_pc
, 
buf
);

674 
size_t


675 
	gSpSnù≥t
::
	$jump_abs_size
() {

679 
	}
}

683 
size_t


684 
	gSpSnù≥t
::
	$emô_ˇŒ_‹ig
(
§c
, 
size_t
 
size
,

685 * 
buf
, 
size_t
 
off£t
) {

686 * 
p
 = 
buf
 + 
off£t
;

687 
boﬁ
 
u£_pc
 = 
Ál£
;

690 
In°ru˘i⁄
::
På
 
ö¢
 = 
	`gë_‹ig_ˇŒ_ö¢
();

691 
RñocVisô‹
 
	`visô‹
(
c⁄ãxt_
->
	`∑r£r
());

692 
Ex¥essi⁄
::
På
 
åg
 = 
ö¢
->
	`gëC⁄åﬁFlowT¨gë
();

693 
£t
<
Ex¥essi⁄
::
På
> 
›Së
;

694 i‡(
åg
) {

695 
åg
->
	`≠∂y
(&
visô‹
);

696 
u£_pc
 = 
visô‹
.
	`u£_pc
();

697 
›Së
.
	`ö£π
(
åg
);

699  
	`ªloc_ö¢_öã∫Æ
(
§c
, 
ö¢
, 
›Së
, 
u£_pc
, 
p
);

700 
	}
}

704 
	gSpSnù≥t
::
	$p›_¨gumít
(
ArgumítH™dÀ
* 
h
, 
size_t
 
size
) {

705 
usög
 
«me•a˚
 
Dynö°
::
x86_64
;

706 i‡(
h
->
num
 < 6) {

707 
Addªss
 
a
 = 0;

708 
h
->
num
) {

710 
a
 = 
	`gë_ßved_ªg
(
rdi
);

713 
a
 = 
	`gë_ßved_ªg
(
rsi
);

716 
a
 = 
	`gë_ßved_ªg
(
rdx
);

719 
a
 = 
	`gë_ßved_ªg
(
rcx
);

722 
a
 = 
	`gë_ßved_ªg
(
r8
);

725 
a
 = 
	`gë_ßved_ªg
(
r9
);

728 
	`as£π
(0);

730 * 
b
 = 
h
->
	`ö£π_buf
(
size
);

731 
	`mem˝y
(
b
, &
a
, 
size
);

732 ++
h
->
num
;

733  
b
;

736 * 
a
 = (*)(
ßved_c⁄ãxt_loc_
 + 
RSP
 + 
h
->
off£t
);

737 
h
->
off£t
 +
size
;

738 ++
h
->
num
;

739  
a
;

740 
	}
}

744 
	gSpSnù≥t
::
	$gë_ªt_vÆ
() {

745  
	`gë_ßved_ªg
(
Dynö°
::
x86_64
::
øx
);

746 
	}
}

	@SpContext.C

1 
	~"SpC⁄ãxt.h
"

2 
	~"SpPr›ñÀr.h
"

3 
	~"SpP¨£r.h
"

4 
	~"SpUtûs.h
"

6 
usög
 
	gsk
::
Føme
;

7 
usög
 
	gsk
::
WÆkî
;

9 
usög
 
	gsb
::
Symèb
;

11 
usög
 
	g•
::
SpP¨£r
;

12 
usög
 
	g•
::
SpC⁄ãxt
;

13 
usög
 
	g•
::
SpPr›ñÀr
;

15 
usög
 
	gph
::
Poöt
;

16 
usög
 
	gph
::
P©chMgr
;

17 
usög
 
	gph
::
AddrS∑˚
;

18 
usög
 
	gph
::
P©chObje˘
;

19 
usög
 
	gph
::
P©chMgrPå
;

20 
usög
 
	gph
::
P©chFun˘i⁄
;

22 
usög
 
	g≥
::
SymèbCodeSour˚
;

24 
	gSpC⁄ãxt
::
SpC⁄ãxt
(
SpPr›ñÀr
::
±r
 
p
,

25 
SpP¨£r
::
±r
 
∑r£r
) {

26 
öô_¥›ñÀr_
 = 
p
;

27 
	g∑r£r_
 = 
∑r£r
;

28 
	gùc_mgr_
 = 
NULL
;

29 
	gÆlow_ùc_
 = 
Ál£
;

32 
∑r£
();

34 
öô_wñl_known_libs
();

37 
SpC⁄ãxt
*

38 
	gSpC⁄ãxt
::
¸óã
(
SpPr›ñÀr
::
±r
 
¥›ñÀr
,

39 
°rög
 
öô_bef‹e
,

40 
°rög
 
öô_a·î
,

41 
SpP¨£r
::
±r
 
∑r£r
) {

42 
SpC⁄ãxt
* 
ªt
 = 
√w
 SpC⁄ãxt(
¥›ñÀr
,

43 
∑r£r
);

44 
as£π
(
ªt
);

45 
	gªt
->
	göô_bef‹e_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
(
öô_bef‹e
);

46 
	gªt
->
	göô_a·î_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
(
öô_a·î
);

47 
	gªt
->
	göô_bef‹e_«me_
 = 
öô_bef‹e
;

48 
	gªt
->
	göô_a·î_«me_
 = 
öô_a·î
;

49 
	gªt
->
	gwøµî_bef‹e_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
("wrapper_before");

50 
	gªt
->
	gwøµî_a·î_
 = (*)
ªt
->
∑r£r
()->
gë_func_addr
("wrapper_after");

51  
	gªt
;

56 
	gSpC⁄ãxt
::
	$öô_wñl_known_libs
() {

57 
wñl_known_libs_
.
	`push_back
("libc-");

58 
wñl_known_libs_
.
	`push_back
("libm-");

59 
wñl_known_libs_
.
	`push_back
("ld-");

60 
wñl_known_libs_
.
	`push_back
("libdl-");

61 
wñl_known_libs_
.
	`push_back
("libstdc++");

62 
wñl_known_libs_
.
	`push_back
("libgcc");

63 
wñl_known_libs_
.
	`push_back
("libagent.so");

64 
wñl_known_libs_
.
	`push_back
("libpthread-");

66 i‡(
∑r£r_
->
	`öje˘ed
())

67 
wñl_known_libs_
.
	`push_back
(
∑r£r_
->
	`gë_agít_«me
());

68 
	}
}

75 
	gSpC⁄ãxt
::
	$gë_ˇŒ°ack
(
CÆlSèck
* 
ˇŒ_°ack
) {

76 
pc
, 
•
, 
bp
;

77 
∑r£r_
->
	`gë_‰ame
(&
pc
, &
•
, &
bp
);

78 
	`•_debug
("GET FRAME -Öc: %lx, sp: %lx, bp: %lx", 
pc
, 
•
, 
bp
);

79 
°d
::
ve˘‹
<
Føme
> 
°ackwÆk
;

80 
WÆkî
 *
wÆkî
 = WÆkî::
	`√wWÆkî
();

81 
Føme
* 
f
 = Føme::
	`√wFøme
(
pc
, 
•
, 
bp
, 
wÆkî
);

82 
wÆkî
->
	`wÆkSèckFromFøme
(
°ackwÆk
, *
f
);

83 
i
=0; i<
°ackwÆk
.
	`size
(); i++) {

84 
°rög
 
s
;

85 
°ackwÆk
[
i
].
	`gëName
(
s
);

86 
dt
::
Addªss
 
ø
 = (dt::Addªss)
°ackwÆk
[
i
].
	`gëRA
();

89 
P©chFun˘i⁄
* 
func
 = 
∑r£r_
->
	`födFun˘i⁄
(
ø
);

90 i‡(!
func
) {

91 #i‚de‡
SP_RELEASE


92 
	`•_debug
("SKIPPED - Fun˘i⁄ %†ˇ¬Ÿ bêªsﬁved", 
s
.
	`c_°r
());

98 #i‚de‡
SP_RELEASE


99 
	`•_debug
("FOUND - Fun˘i⁄ %†i†öÅhêˇŒ sèck", 
s
.
	`c_°r
());

102 
ˇŒ_°ack
->
	`push_back
(
func
);

104 
	}
}

107 
	gSpC⁄ãxt
::
	$∑r£
() {

108 #i‚de‡
SP_RELEASE


109 
	`•_debug
("START PARSING - startÖarsing binary code");

111 
mgr_
 = 
∑r£r_
->
	`∑r£
();

112 #i‚de‡
SP_RELEASE


113 
	`•_debug
("FINISH PARSING - finishÖarsing binary code");

115 
	}
}

117 
boﬁ


118 
	gSpC⁄ãxt
::
	$is_wñl_known_lib
(
°rög
 
lib
) {

119 
i
 = 0; i < 
wñl_known_libs_
.
	`size
(); i++) {

120 i‡(
lib
.
	`föd
(
wñl_known_libs_
[
i
]Ë!
°rög
::
≈os
Ë 
åue
;

122  
Ál£
;

123 
	}
}

127 
	gSpC⁄ãxt
::
	$ª°‹e
() {

129 
	`siga˘i⁄
(
SIGTRAP
, &
ﬁd_a˘_
, 
NULL
);

130 
	}
}

133 
P©chFun˘i⁄
*

134 
	gSpC⁄ãxt
::
	$ˇŒì
(
Poöt
* 
±
) {

135  
	`∑r£r
()->
	`ˇŒì
(
±
, 
dúe˘ˇŒ_⁄ly_
 =
Ál£
);

136 
	}
}

138 
	gSpC⁄ãxt
::~
	$SpC⁄ãxt
() {

139 
dñëe
 
ùc_mgr_
;

140 
	}
}

143 
	gSpC⁄ãxt
::
	$£t_Ælow_ùc
(
boﬁ
 
b
) {

144 
Ælow_ùc_
 = 
b
;

145 i‡(
b
 && !
ùc_mgr_
) {

146 
ùc_mgr_
 = 
√w
 
	`SpIpcMgr
();

148 
	}
}

	@SpEvent.C

1 
	~"SpEvít.h
"

2 
	~"SpUtûs.h
"

3 
	~"SpP¨£r.h
"

4 
	~"SpC⁄ãxt.h
"

6 
usög
 
	g•
::
SpEvít
;

7 
usög
 
	g•
::
SpP¨£r
;

8 
usög
 
	g•
::
SpC⁄ãxt
;

9 
usög
 
	g•
::
SyncEvít
;

10 
usög
 
	g•
::
AsyncEvít
;

11 
usög
 
	g•
::
SpPr›ñÀr
;

13 
usög
 
	gph
::
P©chFun˘i⁄
;

15 
«me•a˚
 
	g•
 {

17 
	gSpEvít
::
SpEvít
() {

21 
SpEvít
::
ªgi°î_evít
(
SpC⁄ãxt
* 
c
) {

26 (*
evít_h™dÀr_t
)(, 
	tsigöfo_t
*, *);

28 
SpC⁄ãxt
* 
	gg_c⁄ãxt
 = 
NULL
;

31 
async_evít_h™dÀr
(
signum
, 
sigöfo_t
* 
öfo
, * 
c⁄ãxt
) {

32 
as£π
(0 && "TODO");

42 
	gAsyncEvít
::
AsyncEvít
(
signum
, 
£c
)

43 : 
a·î_£cs_
(
£c
), 
signum_
(
signum
) {

44 
	gh™dÀr_
 = (*)
async_evít_h™dÀr
;

48 
	gAsyncEvít
::
ªgi°î_evít
(
SpC⁄ãxt
* 
c
) {

49 
g_c⁄ãxt
 = 
c
;

50 
siga˘i⁄
 
	ga˘
;

51 
	ga˘
.
	gß_siga˘i⁄
 = (
evít_h™dÀr_t
)
h™dÀr_
;

52 
	ga˘
.
	gß_Êags
 = 
SA_SIGINFO
;

53 
siga˘i⁄
(
signum_
, &
a˘
, 
NULL
);

54 i‡(
	gsignum_
 =
SIGALRM
Ë
Æ¨m
(
a·î_£cs_
);

58 
	gSyncEvít
::
SyncEvít
(
°d
::
°rög
 
func_«me
)

59 : 
SpEvít
(), 
func_«me_
(
func_«me
) {

64 
	gSyncEvít
::
ªgi°î_evít
(
SpC⁄ãxt
* 
c
) {

65 
g_c⁄ãxt
 = 
c
;

67 i‡(!
	gg_c⁄ãxt
->
∑r£r
()->
öje˘ed
()) {

68 #i‚de‡
SP_RELEASE


69 
•_debug
("PRELOAD -Öreloadágent.so,ánd instrument main()");

71 
P©chFun˘i⁄
* 
	gf
 = 
c
->
∑r£r
()->
födFun˘i⁄
("main");

72 
	gc
->
öô_¥›ñÀr
()->
go
(
f
, 
c
, c->
öô_bef‹e
(), c->
öô_a·î
());

78 
	gSpC⁄ãxt
::
CÆlSèck
 
ˇŒ_°ack
;

79 
	gg_c⁄ãxt
->
gë_ˇŒ°ack
(&
ˇŒ_°ack
);

80 
•_debug
("CALLSTACK - %lu cÆl†öÅhêˇŒ sèck", 
ˇŒ_°ack
.
size
());

81 
	gi
 = 0; i < 
	gˇŒ_°ack
.
size
(); i++) {

82 
P©chFun˘i⁄
* 
	gf
 = 
ˇŒ_°ack
[
i
];

83 
	gg_c⁄ãxt
->
öô_¥›ñÀr
()->
go
(
f
, 
g_c⁄ãxt
,

84 
g_c⁄ãxt
->
öô_bef‹e
(),

85 
g_c⁄ãxt
->
öô_a·î
());

86 i‡(
	gf
->
«me
().
com∑ª
("main") == 0) {

	@SpInstrumenter.C

1 
	~"SpIn°rumíãr.h
"

2 
	~"SpSnù≥t.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpAddrS∑˚.h
"

5 
	~"SpUtûs.h
"

6 
	~"SpPoöt.h
"

8 
usög
 
	gdt
::
Addªss
;

10 
usög
 
	g•
::
SpSnù≥t
;

11 
usög
 
	g•
::
SpC⁄ãxt
;

12 
usög
 
	g•
::
SpSnù≥t
;

13 
usög
 
	g•
::
SpAddrS∑˚
;

14 
usög
 
	g•
::
SpIn°rumíãr
;

16 
usög
 
	gö
::
In°ru˘i⁄
;

18 
usög
 
	gph
::
Poöt
;

19 
usög
 
	gph
::
Snù≥t
;

20 
usög
 
	gph
::
AddrS∑˚
;

21 
usög
 
	gph
::
P©chBlock
;

22 
usög
 
	gph
::
P©chObje˘
;

23 
usög
 
	gph
::
P©chMgrPå
;

24 
usög
 
	gph
::
In°™˚På
;

25 
usög
 
	gph
::
P©chFun˘i⁄
;

26 
usög
 
	gph
::
PushBackComm™d
;

28 
«me•a˚
 
	g•
 {

30 
SpC⁄ãxt
* 
g_c⁄ãxt
;

34 
SpIn°rumíãr
*

35 
	gSpIn°rumíãr
::
¸óã
(
AddrS∑˚
* 
as
) {

36  
√w
 
SpIn°rumíãr
(
as
);

40 
	gSpIn°rumíãr
::
SpIn°rumíãr
(
AddrS∑˚
* 
as
)

41 : 
In°rumíãr
(
as
) {

46 
°d
::
	tm≠
<
	tAddªss
, 
	tSpSnù≥t
::
	t±r
> 
	tIn°M≠
;

47 
In°M≠
 
	gg_ö°_m≠
;

52 
	gSpIn°rumíãr
::
å≠_h™dÀr
(
sig
, 
sigöfo_t
* 
öfo
, * 
c
) {

53 
Addªss
 
	gpc
 = 
SpSnù≥t
::
gë_¥e_sig«l_pc
(
c
) - 1;

55 
	gIn°M≠
& 
	gö°_m≠
 = 
g_ö°_m≠
;

56 i‡(
	gö°_m≠
.
föd
(
pc
Ë=
ö°_m≠
.
íd
()) {

61 
	gSpSnù≥t
::
±r
 
•_¢ù
 = 
ö°_m≠
[
pc
];

64 * 
	gblob
 = (*)
•_¢ù
->
buf
();

65 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

66 
P©chMgrPå
 
	gmgr
 = 
g_c⁄ãxt
->
mgr
();

67 
SpAddrS∑˚
* 
	gas
 = 
dy«mic_ˇ°
<SpAddrS∑˚*>(
mgr
->
as
());

68 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
•_¢ù
->
size
(), 
≥rm
)) {

69 
	gas
->
dump_mem_m≠s
();

70 
exô
(0);

74 
	gSpSnù≥t
::
£t_pc
((
Addªss
)
blob
, 
c
);

78 
boﬁ


79 
	gSpIn°rumíãr
::
run
() {

82 
Comm™dLi°
::
ôî©‹
 
c
 = 
u£r_comm™ds_
.
begö
(); 
	gc
 !u£r_comm™ds_.
íd
(); c++) {

83 
PushBackComm™d
* 
	gcomm™d
 = 
°©ic_ˇ°
<PushBackComm™d*>(*
c
);

85 i‡(
	gcomm™d
) {

86 
In°™˚På
 
	gö°™˚
 = 
comm™d
->
ö°™˚
();

87 
Poöt
* 
	g±
 = 
ö°™˚
->
poöt
();

88 
SpPoöt
* 
	g•t
 = 
°©ic_ˇ°
<SpPoöt*>(
±
);

91 i‡(!
	g±
->
gëCÆÀe
(Ë&& 
	gg_c⁄ãxt
->
dúe˘ˇŒ_⁄ly
()) ;

93 #i‚de‡
SP_RELEASE


94 i‡(
	g•t
->
ö°rumíãd
()) {

95 
•_debug
("SKIPED -Öi⁄à%lx i†ö°rumíãd, skù it", 
±
->
block
()->
œ°
());

98 i‡(!
	g•t
->
ö°rumíãd
()) {

99 
	gSnù≥t
<
	gSpSnù≥t
::
±r
>::
På
 
¢ù
 = 
Snù≥t
<
SpSnù≥t
::±r>::
gë
(
ö°™˚
->
¢ù≥t
());

100 
	gSpSnù≥t
::
±r
 
•_¢ù
 = 
¢ù
->
ªp
();

101 
	g•t
->
£t_¢ù
(
•_¢ù
);

102 
Addªss
 
	geù
 = 
±
->
block
()->
œ°
();

103 * 
	gö¢
 = (*)
eù
;

106 
Addªss
 
	gªt_addr
 = 
±
->
block
()->
íd
();

107 
	gIn°ru˘i⁄
::
På
 
ˇŒö¢
 = 
±
->
block
()->
gëIn¢
(
eù
);

110 i‡(
	gˇŒö¢
->
gëC©eg‹y
(Ë=
ö
::
c_BønchIn¢
) {

112 #i‚de‡
SP_RELEASE


113 
•_debug
("TAIL CALL -Öoöà%lx i†®èû cÆl", 
±
->
block
()->
œ°
());

115 
	g•t
->
£t_èûˇŒ
(
åue
);

116 
	gªt_addr
 = 0;

119 * 
	gblob
 = (*)
•_¢ù
->
buf
();

120 
boﬁ
 
	gªÆloc
 = 
Ál£
;

122 
	gREALLOC
:

123 
ªl_addr
 = ()
blob
 - ()
eù
;

128 
	g•_¢ù
->
£t_‹ig_ˇŒ_ö¢
(
ˇŒö¢
);

131 i‡((
	gö¢
[0] != ()0xe8)) {

133 
boﬁ
 
jump_abs
 = 
Ál£
;

134 i‡(!
	g•
::
is_di•32
(
ªl_addr
)Ë
jump_abs
 = 
åue
;

137 i‡(
ö°Æl_ödúe˘
(
•t
, 
•_¢ù
, 
jump_abs
, 
ªt_addr
)) {

138 
	g•t
->
£t_ö°rumíãd
(
åue
);

141 i‡(!
	gªÆloc
) {

142 
	gªÆloc
 = 
åue
;

143 
	gblob
 = (*)
•_¢ù
->
ªÆloc
();

144 i‡(
	gblob
Ë
	gREALLOC
;

148 i‡(
	gªÆloc
 && !
	g•t
->
ö°rumíãd
()) {

149 
•_¥öt
("FAILEDÅo use JUMP - TRY TO USE TRAP");

152 
siga˘i⁄
 
	ga˘
;

153 
	ga˘
.
	gß_siga˘i⁄
 = 
SpIn°rumíãr
::
å≠_h™dÀr
;

154 
	ga˘
.
	gß_Êags
 = 
SA_SIGINFO
;

155 
siga˘i⁄
 
	gﬁd_a˘
;

156 
siga˘i⁄
(
SIGTRAP
, &
a˘
, &
ﬁd_a˘
);

158 
	gg_ö°_m≠
[
eù
] = 
•_¢ù
;

159 
	gblob
 = 
•_¢ù
->
blob
(
ªt_addr
);

161 i‡(
ö°Æl_å≠
(
•t
, 
blob
, 
•_¢ù
->
size
())) {

162 
	g•t
->
£t_ö°Æl_mëhod
(
SP_TRAP
);

163 
	g•t
->
£t_ö°rumíãd
(
åue
);

165 
•_¥öt
("FAILEDÅo use TRAP,Ço instrumentation forÅhisÖoint");

172 
	gblob
 = 
•_¢ù
->
blob
(
ªt_addr
);

174 i‡(
ö°Æl_dúe˘
(
•t
, 
blob
, 
•_¢ù
->
size
())) {

175 
	g•t
->
£t_ö°Æl_mëhod
(
SP_RELOC_INSN
);

176 
	g•t
->
£t_ö°rumíãd
(
åue
);

178 
•_¥öt
("FAILED - FailedÅo install instrumentationát %lx for calling %s",

179 
±
->
block
()->
œ°
(), 
g_c⁄ãxt
->
∑r£r
()->
ˇŒì
’t)->
«me
().
c_°r
());

185 
	gu£r_comm™ds_
.
˛ór
();

187  
	gåue
;

190 
boﬁ


191 
	gSpIn°rumíãr
::
ö°Æl_dúe˘
(
SpPoöt
* 
poöt
, * 
blob
, 
size_t
 
blob_size
) {

193 
	gjump
[5];

194 * 
	gp
 = 
jump
;

195 *
	gp
++ = 0xe9;

196 * 
	gÕ
 = (*)
p
;

199 
P©chObje˘
* 
	gobj
 = 
poöt
->
block
()->
obje˘
();

200 * 
	gaddr
 = (*)
poöt
->
block
()->
œ°
();

201 
size_t
 
	gö¢_Àngth
 = 
poöt
->
block
()->
íd
(Ë-Öoöt->block()->
œ°
();

202 *
	gÕ
 = ()
blob
 - ()
addr
 - 
ö¢_Àngth
;

205 
SpAddrS∑˚
* 
	gas
 = 
°©ic_ˇ°
<SpAddrS∑˚*>(
as_
);

206 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

207 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
, 
≥rm
)) {

208 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
jump
, 5);

210 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

214 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
blob_size
, 
≥rm
)) {

215 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹ blobáà%lx", (
Dynö°
::
Addªss
)
blob
);

216 
	gas
->
dump_mem_m≠s
();

217 
exô
(0);

221 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
)) {

222 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

225  
	gåue
;

228 
boﬁ


229 
	gSpIn°rumíãr
::
ö°Æl_ödúe˘
(
SpPoöt
* 
poöt
, 
SpSnù≥t
::
±r
 
¢ù
,

230 
boﬁ
 
jump_abs
, 
Addªss
 
ªt_addr
) {

231 
P©chBlock
* 
	gblk
 = 
poöt
->
block
();

232 
size_t
 
	gblk_size
 = 
blk
->
size
();

233 
	g°rög
& 
	g‹ig_blk
 = 
¢ù
->
‹ig_blk
();

235 * 
	gøw_blk
 = (*)
blk
->
°¨t
();

236 
	gi
 = 0; i < 
	gblk_size
; i++) {

237 
	g‹ig_blk
 +
øw_blk
[
i
];

240 
size_t
 
	glimô
 = 0;

245 
	gö¢
[64];

246 i‡(!
	gjump_abs
) {

248 
	glimô
 = 5;

249 * 
	gp
 = 
ö¢
;

250 *
	gp
++ = 0xe9;

251 * 
	gÕ
 = (*)
p
;

252 *
	gÕ
 = ()
¢ù
->
buf
(Ë- ()
blk
->
°¨t
() - 5;

254 
	glimô
 = 
¢ù
->
jump_abs_size
();

256 
	g°©ic_ˇ°
<
	gSpPoöt
*>(
	gpoöt
)->
¢ù
()->
emô_jump_abs
(()¢ù->
buf
(), 
ö¢
, 0, 
åue
);

259 i‡(
	gblk_size
 >
limô
) {

260 
poöt
->
£t_ö°Æl_mëhod
(
SP_RELOC_BLK
);

261  
ö°Æl_jump
(
blk
, 
ö¢
, 
limô
, 
¢ù
, 
ªt_addr
);

264 
	gpoöt
->
£t_ö°Æl_mëhod
(
SP_SPRINGBOARD
);

265  
ö°Æl_•rög
(
blk
, 
¢ù
, 
ªt_addr
);

268 
boﬁ


269 
	gSpIn°rumíãr
::
ö°Æl_jump
(
P©chBlock
* 
blk
,

270 * 
ö¢
, 
size_t
 
ö¢_size
,

271 
SpSnù≥t
::
±r
 
¢ù
,

272 
Addªss
 
ªt_addr
) {

275 * 
	gblob
 = 
¢ù
->
blob
(
ªt_addr
, 
åue
);

277 
P©chObje˘
* 
	gobj
 = 
blk
->
obj
();

278 
SpAddrS∑˚
* 
	gas
 = 
°©ic_ˇ°
<SpAddrS∑˚*>(
as_
);

279 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

280 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
¢ù
->
size
(), 
≥rm
)) {

281 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹ blobáà%lx", (
Dynö°
::
Addªss
)
blob
);

282 
	gas
->
dump_mem_m≠s
();

283 
exô
(0);

286 * 
	gaddr
 = (*)
blk
->
°¨t
();

289 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_size
, 
≥rm
)) {

290 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
ö¢
, 
ö¢_size
);

292 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

296 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_size
)) {

297 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

299 #i‚de‡
SP_RELEASE


300 
•_debug
("USE BLK-RELOC -Öi⁄à%lx i†ö°rumíãd usög cÆ»blockÑñoˇti⁄", 
blk
->
œ°
());

302  
	gåue
;

306 
boﬁ


307 
	gSpIn°rumíãr
::
ö°Æl_•rög
(
P©chBlock
* 
ˇŒblk
,

308 
SpSnù≥t
::
±r
 
¢ù
,

309 
Addªss
 
ªt_addr
) {

317 
P©chBlock
* 
	g•rögblk
 = 
¢ù
->
•rög_blk
();

318 i‡(!
	g•rögblk
Ë 
	gÁl£
;

321 * 
	gblob
 = 
¢ù
->
blob
(
ªt_addr
, 
åue
,Årue);

322 
P©chObje˘
* 
	gobj
 = 
ˇŒblk
->
obj
();

323 
SpAddrS∑˚
* 
	gas
 = 
°©ic_ˇ°
<SpAddrS∑˚*>(
as_
);

324 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

325 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
blob
, 
¢ù
->
size
(), 
≥rm
)) {

326 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹ blobáà%lx", (
Dynö°
::
Addªss
)
blob
);

327 
	gas
->
dump_mem_m≠s
();

328 
exô
(0);

332 * 
	g•rög
 = 
¢ù
->
•rög
(
•rögblk
->
œ°
());

333 
	gobj
 = 
•rögblk
->
obj
();

334 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
•rög
, 
¢ù
->
•rög_size
(), 
≥rm
)) {

335 
•_¥öt
("MPROTECT - FaûedÅÿch™gêmem‹yác˚s†≥rmissi⁄ f‹Ññoˇãd s¥ög blkáà%lx", (
Dynö°
::
Addªss
)
•rög
);

336 
	gas
->
dump_mem_m≠s
();

337 
exô
(0);

343 
	g•rögblk_ö¢
[64];

346 
size_t
 
	goff
 = 0;

347 
size_t
 
	gisize
 = 
¢ù
->
emô_jump_abs
(()
•rög
, 
•rögblk_ö¢
, 
off
, 
åue
);

348 
	goff
 +
isize
;

349 
size_t
 
	gˇŒ_blk_jmp_åg
 = 
off
;

350 
	goff
 = 
¢ù
->
emô_jump_abs
(()
blob
, 
•rögblk_ö¢
, 
off
, 
åue
);

351 
	goff
 +
isize
;

354 * 
	gaddr
 = (*)
•rögblk
->
°¨t
();

355 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
•rögblk
->
size
(), 
≥rm
)) {

356 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
•rögblk_ö¢
, 
off
);

358 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

362 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
•rögblk
->
size
())) {

363 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

368 
	gaddr
 = (*)
ˇŒblk
->
°¨t
();

369 
	gˇŒblk_ö¢
[2];

370 
	gˇŒblk_ö¢
[0] = 0xeb;

371 
	gˇŒblk_ö¢
[1] = ()(
•rögblk
->
°¨t
(Ë+ 
ˇŒ_blk_jmp_åg
 - (()
addr
 + 2));

373 i‡(
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ˇŒblk
->
size
(), 
≥rm
)) {

374 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
ˇŒblk_ö¢
, 2);

376 
•_¥öt
("MPROTECT - FailedÅo change memoryáccessÖermission");

380 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ˇŒblk
->
size
())) {

381 
•_¥öt
("MPROTECT - FailedÅoÑestore memoryáccessÖermission");

383 #i‚de‡
SP_RELEASE


384 
•_debug
("USE SPRING -Öiont %lx is instrumented using 1-hop spring",

385 
ˇŒblk
->
œ°
());

388  
	gåue
;

392 
boﬁ


393 
	gSpIn°rumíãr
::
ö°Æl_å≠
(
SpPoöt
* 
poöt
, * 
blob
, 
size_t
 
blob_size
) {

395 
°rög
 
	göt3
;

396 
	göt3
 += ()0xcc;

398 
P©chObje˘
* 
	gobj
 = 
poöt
->
block
()->
obje˘
();

399 * 
	gaddr
 = (*)
poöt
->
block
()->
œ°
();

400 
size_t
 
	gö¢_Àngth
 = 
poöt
->
block
()->
íd
(Ë-Öoöt->block()->
œ°
();

401 
	gi
 = 0; i < (
	gö¢_Àngth
-1); i++) {

402 
	göt3
 += ()0x90;

406 
SpAddrS∑˚
* 
	gas
 = 
dy«mic_ˇ°
<SpAddrS∑˚*>(
as_
);

407 
	g≥rm
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

408 i‡(!
	gas
->
£t_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
, 
≥rm
)) {

409  
	gÁl£
;

411 
	gas
->
wrôe
(
obj
, (
Addªss
)
addr
, (Addªss)
öt3
.
c_°r
(), i¡3.
size
());

415 i‡(!
	gas
->
ª°‹e_ønge_≥rm
((
Addªss
)
addr
, 
ö¢_Àngth
)) {

416  
	gÁl£
;

418 #i‚de‡
SP_RELEASE


419 
•_debug
("USE TRAP -Öi⁄à%lx i†ö°rumíãd usögÅøp", 
poöt
->
block
()->
œ°
());

421  
	gåue
;

	@SpIpcMgr.C

1 
	~"SpPoöt.h
"

2 
	~"SpUtûs.h
"

3 
	~"SpIpcMgr.h
"

4 
	~"SpC⁄ãxt.h
"

5 
	~"SpInje˘‹.h
"

6 
	~<sys/waô.h
>

8 
usög
 
	gph
::
P©chFun˘i⁄
;

10 
«me•a˚
 
	g•
 {

13 
SpC⁄ãxt
* 
g_c⁄ãxt
;

16 
	#TRACING_ID
 1987

	)

17 
	#TRACING_SIZE
 32768

	)

24 
	gSpIpcMgr
::
SpIpcMgr
() {

25 
pùe_w‹kî_
 = 
√w
 
SpPùeW‹kî
;

26 
	gw‹kî_£t_
.
ö£π
(
pùe_w‹kî_
);

28 
	gt˝_w‹kî_
 = 
√w
 
SpT˝W‹kî
;

29 
	gw‹kî_£t_
.
ö£π
(
t˝_w‹kî_
);

31 
	gudp_w‹kî_
 = 
√w
 
SpUdpW‹kî
;

32 
	gw‹kî_£t_
.
ö£π
(
udp_w‹kî_
);

37 
	gSpIpcMgr
::~
SpIpcMgr
() {

38 
dñëe
 
pùe_w‹kî_
;

39 
dñëe
 
	gt˝_w‹kî_
;

40 
dñëe
 
	gudp_w‹kî_
;

52 
	gSpIpcMgr
::
gë_wrôe_∑øm
(
SpPoöt
* 
±
, * 
fd_out
, ** 
buf_out
,

53 * 
c_out
, 
size_t
* 
size_out
, 
sockaddr
** 
ß_out
) {

54 
P©chFun˘i⁄
* 
	gf
 = 
•
::
ˇŒì
(
±
);

55 i‡(!
	gf
) ;

57 
ArgumítH™dÀ
 
	gh
;

58 i‡(
	gf
->
«me
().
com∑ª
("write") == 0 ||

59 
f
->
«me
().
com∑ª
("send") == 0) {

61 * 
fd
 = (*)
•
::
p›_¨gumít
(
±
, &
h
, ());

62 i‡(
	gfd_out
Ë*fd_ouà*
fd
;

63 ** 
	gbuf
 = (**)
•
::
p›_¨gumít
(
±
, &
h
, (*));

64 i‡(
	gbuf_out
Ë*buf_ouà*
buf
;

65 
size_t
* 
	gsize
 = (size_t*)
•
::
p›_¨gumít
(
±
, &
h
, (size_t));

66 i‡(
	gsize_out
Ë*size_ouà*
size
;

83 i‡(
	gf
->
«me
().
com∑ª
("connect") == 0) {

84 * 
fd
 = (*)
•
::
p›_¨gumít
(
±
, &
h
, ());

85 i‡(
	gfd_out
Ë*fd_ouà*
fd
;

86 
sockaddr
** 
	gß
 = (sockaddr**)
•
::
p›_¨gumít
(
±
, &
h
, (sockaddr*));

89 i‡(
	gß_out
Ë*ß_ouà*
ß
;

92 i‡(
	gf
->
«me
().
com∑ª
("fputs") == 0) {

93 ** 
°r
 = (**)
•
::
p›_¨gumít
(
±
, &
h
, (*));

94 i‡(
	gbuf_out
Ë*buf_ouà(*)*
°r
;

95 
FILE
** 
	gÂ
 = (FILE**)
•
::
p›_¨gumít
(
±
, &
h
, (FILE*));

96 if(
	gfd_out
Ë*fd_ouà
fûío
(*
Â
);

99 i‡(
	gf
->
«me
().
com∑ª
("fputc") == 0) {

100 * 
c
 = (*)
•
::
p›_¨gumít
(
±
, &
h
, ());

101 i‡(
	gc_out
Ë*c_ouà*
c
;

102 
FILE
** 
	gÂ
 = (FILE**)
•
::
p›_¨gumít
(
±
, &
h
, (FILE*));

103 i‡(
	gfd_out
Ë*fd_ouà
fûío
(*
Â
);

106 i‡(
	gf
->
«me
().
com∑ª
("fwrite_unlocked") == 0 ||

107 
f
->
«me
().
com∑ª
("fwrite") == 0) {

108 ** 
±r
 = (**)
•
::
p›_¨gumít
(
±
, &
h
, (*));

109 i‡(
	gbuf_out
Ë*buf_ouà(*)*
±r
;

110 
size_t
* 
	gsize
 = (size_t*)
•
::
p›_¨gumít
(
±
, &
h
, (size_t));

111 
size_t
* 
	gn
 = (size_t*)
•
::
p›_¨gumít
(
±
, &
h
, (size_t));

112 i‡(
	gsize_out
Ë*size_ouà(*
size
Ë* (*
n
);

113 
FILE
** 
	gÂ
 = (FILE**)
•
::
p›_¨gumít
(
±
, &
h
, (FILE*));

114 if(
	gfd_out
Ë*fd_ouà
fûío
(*
Â
);

124 
	gSpIpcMgr
::
gë_ªad_∑øm
(
SpPoöt
* 
±
, * 
fd_out
, ** 
buf_out
,

125 
size_t
* 
size_out
) {

126 
P©chFun˘i⁄
* 
	gf
 = 
•
::
ˇŒì
(
±
);

127 i‡(!
	gf
) ;

129 
ArgumítH™dÀ
 
	gh
;

130 i‡(
	gf
->
«me
().
com∑ª
("read") == 0 ||

131 
f
->
«me
().
com∑ª
("recv") == 0) {

132 * 
fd
 = (*)
•
::
p›_¨gumít
(
±
, &
h
, ());

133 i‡(
	gfd_out
Ë*fd_ouà*
fd
;

134 ** 
	gbuf
 = (**)
•
::
p›_¨gumít
(
±
, &
h
, (*));

135 i‡(
	gbuf_out
Ë*buf_ouà*
buf
;

136 
size_t
* 
	gsize
 = (size_t*)
•
::
p›_¨gumít
(
±
, &
h
, (size_t));

137 i‡(
	gsize_out
Ë*size_ouà*
size
;

140 i‡(
	gf
->
«me
().
com∑ª
("fgets") == 0) {

141 ** 
°r
 = (**)
•
::
p›_¨gumít
(
±
, &
h
, (*));

142 i‡(
	gbuf_out
Ë*buf_ouà(*)*
°r
;

143 * 
	gsize
 = (*)
•
::
p›_¨gumít
(
±
, &
h
, ());

144 i‡(
	gsize_out
Ë*size_ouà*
size
;

145 
FILE
** 
	gÂ
 = (FILE**)
•
::
p›_¨gumít
(
±
, &
h
, (FILE*));

146 if(
	gfd_out
Ë*fd_ouà
fûío
(*
Â
);

149 i‡(
	gf
->
«me
().
com∑ª
("fgetc") == 0) {

150 
FILE
** 
Â
 = (FILE**)
•
::
p›_¨gumít
(
±
, &
h
, (FILE*));

151 if(
	gfd_out
Ë*fd_ouà
fûío
(*
Â
);

154 i‡(
	gf
->
«me
().
com∑ª
("fread_unlocked") == 0 ||

155 
f
->
«me
().
com∑ª
("fread") == 0) {

156 ** 
±r
 = (**)
•
::
p›_¨gumít
(
±
, &
h
, (*));

157 i‡(
	gbuf_out
Ë*buf_ouà(*)*
±r
;

158 
size_t
* 
	gsize
 = (size_t*)
•
::
p›_¨gumít
(
±
, &
h
, (size_t));

159 
size_t
* 
	gn
 = (size_t*)
•
::
p›_¨gumít
(
±
, &
h
, (size_t));

160 i‡(
	gsize_out
Ë*size_ouà(*
size
Ë* (*
n
);

161 
FILE
** 
	gÂ
 = (FILE**)
•
::
p›_¨gumít
(
±
, &
h
, (FILE*));

162 if(
	gfd_out
Ë*fd_ouà
fûío
(*
Â
);

165 i‡(
	gf
->
«me
().
com∑ª
("accept") == 0) {

166 * 
fd
 = (*)
•
::
p›_¨gumít
(
±
, &
h
, ());

167 i‡(
	gfd_out
Ë*fd_ouà*
fd
;

174 
boﬁ


175 
	gSpIpcMgr
::
is_f‹k
(c⁄° * 
f
) {

176 i‡(
°rcmp
(
f
, "f‹k"Ë=0Ë 
åue
;

177  
	gÁl£
;

181 
boﬁ


182 
	gSpIpcMgr
::
is_p›í
(c⁄° * 
f
) {

183 i‡(
°rcmp
(
f
, "p›í"Ë=0Ë 
åue
;

184  
	gÁl£
;

191 
	gSpIpcMgr
::
°¨t_åacög
(
fd
) {

192 
W‹kîSë
::
ôî©‹
 
wi
 = 
w‹kî_£t_
.
begö
();

193 
	gwi
 !
w‹kî_£t_
.
íd
(); wi++) {

196 i‡((*
	gwi
)->
°¨t_åacög
(
fd
))  1;

204 
SpIpcW‹kî
* 
	gSpIpcMgr
::
gë_w‹kî
(
fd
) {

206 i‡(
is_pùe
(
fd
)) {

207  
pùe_w‹kî
();

210 i‡(
is_t˝
(
fd
)) {

211  
t˝_w‹kî
();

214 i‡(
is_udp
(
fd
)) {

215  
udp_w‹kî
();

219  
	gNULL
;

225 
boﬁ


226 
	gSpIpcMgr
::
bef‹e_íåy
(
SpPoöt
* 
±
) {

227 
P©chFun˘i⁄
* 
f
 = 
•
::
ˇŒì
(
±
);

228 i‡(!
	gf
Ë 
	gÁl£
;

230 
	g•
::
SpIpcMgr
* 
ùc_mgr
 = 
•
::
g_c⁄ãxt
->ipc_mgr();

234 
	gfd
 = -1;

235 
sockaddr
* 
	gß
 = 
NULL
;

236 
	gùc_mgr
->
gë_wrôe_∑øm
(
±
, &
fd
, 
NULL
, NULL, NULL, &
ß
);

237 i‡(
	gfd
 != -1) {

238 
SpIpcW‹kî
* 
w‹kî
 = 
ùc_mgr
->
gë_w‹kî
(
fd
);

239 i‡(!
	gw‹kî
Ë 
	gÁl£
;

241 
	gw‹kî
->
£t_°¨t_åacög
(1);

243 
SpCh™√l
* 
	gc
 = 
w‹kî
->
gë_ch™√l
(
fd
, 
SP_WRITE
, 
ß
);

244 i‡(
	gc
) {

250 
	gw‹kî
->
öje˘
(
c
);

253 i‡(
ˇŒì
(
±
)->
«me
().
com∑ª
("connect") != 0)

254 
w‹kî
->
£t_°¨t_åacög
(1, 
c
);

255 
	g±
->
£t_ch™√l
(
c
);

257  
	gåue
;

261 
	gfd
 = -1;

262 
	gùc_mgr
->
gë_ªad_∑øm
(
±
, &
fd
, 
NULL
, NULL);

263 i‡(
	gfd
 != -1) {

264 
SpIpcW‹kî
* 
w‹kî
 = 
ùc_mgr
->
gë_w‹kî
(
fd
);

265 i‡(!
	gw‹kî
Ë 
	gÁl£
;

266 
SpCh™√l
* 
	gc
 = 
w‹kî
->
gë_ch™√l
(
fd
, 
SP_READ
);

267 i‡(
	gc
) {

268 
	g±
->
£t_ch™√l
(
c
);

271  
	gåue
;

276 
boﬁ


277 
	gSpIpcMgr
::
bef‹e_exô
(
SpPoöt
* 
±
) {

278 
P©chFun˘i⁄
* 
f
 = 
•
::
ˇŒì
(
±
);

279 i‡(!
	gf
Ë 
	gÁl£
;

282 
	g•
::
SpIpcMgr
* 
ùc_mgr
 = 
•
::
g_c⁄ãxt
->ipc_mgr();

283 i‡(
	gùc_mgr
->
is_f‹k
(
f
->
«me
().
c_°r
())) {

284 
	gpid
 = 
•
::
ªtvÆ
(
±
);

286 i‡(
	gpid
 == 0) {

287 
ùc_mgr
->
pùe_w‹kî
()->
£t_°¨t_åacög
(0);

291 i‡(
	gùc_mgr
->
is_p›í
(
f
->
«me
().
c_°r
())) {

292 
FILE
* 
	gÂ
 = (FILE*)
•
::
ªtvÆ
(
±
);

293 
	gfd
 = 
fûío
(
Â
);

295 
¶ìp
(2);

296 
SpCh™√l
* 
	gc
 = 
ùc_mgr
->
pùe_w‹kî
()->
gë_ch™√l
(
fd
, 
SP_WRITE
);

297 
	gùc_mgr
->
pùe_w‹kî
()->
£t_°¨t_åacög
(0, 
c
);

302  
	gåue
;

312 
SpCh™√l
* 
	gSpIpcW‹kî
::
gë_ch™√l
(
fd
, 
Ch™√lRW
 
rw
, * 
¨g
) {

314 i‡(
	grw
 =
SP_WRITE
) {

315 i‡(
ch™√l_m≠_wrôe_
.
föd
(
fd
Ë!ch™√l_m≠_wrôe_.
íd
()) {

316 
SpCh™√l
* 
c
 = 
ch™√l_m≠_wrôe_
[
fd
];

318 i‡(
	gc
 && c->
	gty≥
 =
SP_TCP
) {

322  
c
;

325 i‡(
	gch™√l_m≠_ªad_
.
föd
(
fd
Ë!
ch™√l_m≠_ªad_
.
íd
())

326  
ch™√l_m≠_ªad_
[
fd
];

330 
SpCh™√l
* 
	gc
 = 
¸óã_ch™√l
(
fd
, 
rw
, 
¨g
);

331 
as£π
(
c
);

334 i‡(
	grw
 =
SP_WRITE
) {

335 
c
->
rw
 = 
SP_WRITE
;

336 
	gch™√l_m≠_wrôe_
[
fd
] = 
c
;

337 #i‚de‡
SP_RELEASE


338 
•_debug
("WRITE CHANNEL @Öid = %d - gëá WRITE ch™√»wôh inodê%ld f‹ fd %d", 
gëpid
(), 
gë_öode_‰om_fd
(
fd
), fd);

341 
	gc
->
	grw
 = 
SP_READ
;

342 
	gch™√l_m≠_ªad_
[
fd
] = 
c
;

343 #i‚de‡
SP_RELEASE


344 
•_debug
("READ CHANNEL @Öid = %d - gëá READ ch™√»wôh inodê%ld f‹ fd %d", 
gëpid
(), 
gë_öode_‰om_fd
(
fd
), fd);

347 
	gc
->
	gfd
 = 
fd
;

348  
	gc
;

354 
	gSpPùeW‹kî
::
SpPùeW‹kî
() {

356 
åacög_öã∫Æ
(&
°¨t_åacög_
);

357 
	g°¨t_åacög_
[
gëpid
()] = 0;

361 
	gSpPùeW‹kî
::~
SpPùeW‹kî
() {

362 
Ch™√lM≠
::
ôî©‹
 
i
 = 
ch™√l_m≠_wrôe_
.
begö
();

363 
	gi
 !
ch™√l_m≠_wrôe_
.
íd
(); i++) {

364 
dñëe
 
	gi
->
	g£c⁄d
;

366 
	gCh™√lM≠
::
ôî©‹
 
i
 = 
ch™√l_m≠_ªad_
.
begö
();

367 
	gi
 !
ch™√l_m≠_ªad_
.
íd
(); i++) {

368 
dñëe
 
	gi
->
	g£c⁄d
;

374 
	gSpPùeW‹kî
::
åacög_öã∫Æ
(** 
°¨t_åacög
) {

375 
shmid
;

376 i‡((
	gshmid
 = 
shmgë
(
TRACING_ID
, 
TRACING_SIZE
, 
IPC_CREAT
 | 0666)) < 0) {

377 
•_≥º‹
("ERROR: c™nŸ cª©êsh¨ed mem‹y wôh id %d", 
TRACING_ID
);

380 * 
	gshm
 = 
NULL
;

381 i‡(()(
	gshm
 = (*)
shm©
(
shmid
, 
NULL
, 0)) == ()-1) {

382 
•_≥º‹
("ERROR: cannot get shared memory");

384 *
	g°¨t_åacög
 = 
shm
;

387 
	gSpPùeW‹kî
::
£t_°¨t_åacög
(
yes_‹_no
, 
SpCh™√l
* 
c
) {

388 
	g°¨t_åacög_
[
c
->
ªmŸe_pid
] = 
yes_‹_no
;

392 
	gSpPùeW‹kî
::
£t_°¨t_åacög
(
yes_‹_no
) {

393 
°¨t_åacög_
[
gëpid
()] = 
yes_‹_no
;

397 
	gSpPùeW‹kî
::
°¨t_åacög
(
fd
) {

399  
°¨t_åacög_
[
gëpid
()];

403 
boﬁ
 
	gSpPùeW‹kî
::
öje˘
(
SpCh™√l
* 
c
, * 
agít_∑th
,

410 i‡(
	gc
->
	göje˘ed
Ë 
	gåue
;

411 
•_debug
("NO INJECTED -- start injection");

412 
	gSpInje˘‹
::
±r
 
öje˘‹
 = 
SpInje˘‹
::
¸óã
(
c
->
ªmŸe_pid
);

413 
°rög
 
	gagít_«me
 = 
g_c⁄ãxt
->
∑r£r
()->
gë_agít_«me
();

414 
	göje˘‹
->
öje˘
(
agít_«me
.
c_°r
());

415 
	gc
->
	göje˘ed
 = 
åue
;

416  
	gåue
;

419 
SpCh™√l
* 
	gSpPùeW‹kî
::
¸óã_ch™√l
(
fd
, 
Ch™√lRW
 
rw
, *) {

420 
SpCh™√l
* 
	gc
 = 
√w
 
PùeCh™√l
;

421 
	gc
->
	gloˇl_pid
 = 
gëpid
();

422 
PidSë
 
	gpid_£t
;

423 
gë_pids_‰om_fd
(
fd
, 
pid_£t
);

424 #i‚de‡
SP_RELEASE


425 
•_debug
("FD TO PID - gëá %luÖid†‰om fd %d", 
pid_£t
.
size
(), 
fd
);

427 
	gPidSë
::
ôî©‹
 
i
 = 
pid_£t
.
begö
(); 
	gi
 !pid_£t.
íd
(); i++) {

428 i‡(*
	gi
 !
c
->
loˇl_pid
) {

429 
c
->
ªmŸe_pid
 = *
i
;

433 
	gc
->
	gty≥
 = 
SP_PIPE
;

434  
	gc
;

437 
	gSpT˝W‹kî
::
SpT˝W‹kî
(Ë: 
°¨t_åacög_
(0) {

441 
SpT˝W‹kî
::
£t_°¨t_åacög
(
yes_‹_no
, 
SpCh™√l
* 
c
) {

442 
•_debug
("SET TRACING - yes_‹_nÿ(%d), fd (%d)", 
yes_‹_no
, 
c
->
fd
);

443 
as£π
(
c
);

445 i‡(
	gc
 && 
is_t˝
(
c
->
fd
)) {

446 
uöt8_t
 
	gm¨k_byã
 = (
gëpid
() & 0xFF) | 1;

447 
•_debug
("OOB MARK - sídög %x vü fd=%d", 
m¨k_byã
, 
c
->
fd
);

448 i‡(
£nd
(
c
->
fd
, &
m¨k_byã
, (m¨k_byã), 
MSG_OOB
) < 0) {

449 
≥º‹
("send");

450 
•_≥º‹
("OUT-OF-BAND - failedÅo send oob byte");

458 
	gSpT˝W‹kî
::
£t_°¨t_åacög
(
yes_‹_no
) {

459 
°¨t_åacög_
 = 
yes_‹_no
;

482 
	gSpT˝W‹kî
::
°¨t_åacög
(
fd
) {

484 i‡(
is_t˝
(
fd
Ë&& !
°¨t_åacög_
) {

495 
fd_£t
 
r£t
, 
	gx£t
;

496 
FD_ZERO
(&
r£t
);

497 
FD_ZERO
(&
x£t
);

499 
FD_SET
(
fd
, &
r£t
);

500 
FD_SET
(
fd
, &
x£t
);

501 
£À˘
(
fd
+1, &
r£t
, 
NULL
, &
x£t
, NULL);

502 i‡(
FD_ISSET
(
fd
, &
x£t
)) {

503 
uöt8_t
 
	gm¨k
 = 0;

504 
ªcv
(
fd
, &
m¨k
, (m¨k), 
MSG_OOB
);

505 i‡(
	gm¨k
 !0Ë
°¨t_åacög_
 = 1;

515  
	g°¨t_åacög_
;

521 
boﬁ
 
	gSpT˝W‹kî
::
öje˘
(
SpCh™√l
* 
c
, * 
agít_∑th
,

522 * 
öje˘‹_∑th
,

523 * 
ijagít_∑th
) {

527 i‡(
	gc
->
	göje˘ed
Ë 
	gåue
;

528 
•_debug
("NO INJECTED -- start injection");

530 
T˝Ch™√l
 *
	gt˝_ch™√l
 = 
°©ic_ˇ°
<T˝Ch™√l*>(
c
);

531 
as£π
(
t˝_ch™√l
);

533 
	gloˇl_ù
[256];

534 
	gloˇl_p‹t
[64];

535 
	gªmŸe_ù
[256];

536 
	gªmŸe_p‹t
[64];

538 i‡(!
gë_addªss
(&
t˝_ch™√l
->
loˇl
, 
loˇl_ù
, 256, 
loˇl_p‹t
, 64)) {

539 
•_≥º‹
("failedÅo getÜocaláddress inÅcp_worker::inject()");

541 i‡(!
gë_addªss
(&
t˝_ch™√l
->
ªmŸe
, 
ªmŸe_ù
, 256, 
ªmŸe_p‹t
, 64)) {

542 
•_≥º‹
("failedÅo getÑemoteáddress inÅcp_worker::inject()");

549 
boﬁ
 
	gloˇl_machöe
 = 
Ál£
;

550 i‡(
°r°r
(
ªmŸe_ù
, "127.0.0.1")) {

551 
•_debug
("LOCAL MACHINE TCP");

552 
	gloˇl_machöe
 = 
åue
;

554 
•_debug
("REMOTE IP: %s, REMOTE PORT: %s", 
ªmŸe_ù
, 
ªmŸe_p‹t
);

557 
°rög
 
	gdeÁu…_agít_∑th
;

558 
°rög
 
	gdeÁu…_öje˘‹_∑th
;

559 
°rög
 
	gdeÁu…_ijagít_∑th
;

561 i‡(
	gagít_∑th
 =
NULL
) {

562 
as£π
(
g_c⁄ãxt
);

563 
as£π
(
g_c⁄ãxt
->
∑r£r
());

564 
as£π
(
g_c⁄ãxt
->
∑r£r
()->
gë_agít_«me
().
size
() > 0);

565 
	gdeÁu…_agít_∑th
 +
gëív
("SP_DIR");

566 
	gdeÁu…_agít_∑th
 += "/";

567 
	gdeÁu…_agít_∑th
 +
gëív
("PLATFORM");

568 
	gdeÁu…_agít_∑th
 += "/";

569 
	gdeÁu…_agít_∑th
 +
•_fûíame
((*)
g_c⁄ãxt
->
∑r£r
()->
gë_agít_«me
().
c_°r
());

570 
	gagít_∑th
 = (*)
deÁu…_agít_∑th
.
c_°r
();

572 i‡(
	göje˘‹_∑th
 =
NULL
) {

573 
deÁu…_öje˘‹_∑th
 +
gëív
("SP_DIR");

574 
	gdeÁu…_öje˘‹_∑th
 += "/";

575 
	gdeÁu…_öje˘‹_∑th
 +
gëív
("PLATFORM");

576 
	gdeÁu…_öje˘‹_∑th
 += "/Injector";

577 
	göje˘‹_∑th
 = (*)
deÁu…_öje˘‹_∑th
.
c_°r
();

579 i‡(
	gijagít_∑th
 =
NULL
) {

580 
deÁu…_ijagít_∑th
 +
gëív
("SP_DIR");

581 
	gdeÁu…_ijagít_∑th
 += "/";

582 
	gdeÁu…_ijagít_∑th
 +
gëív
("PLATFORM");

583 
	gdeÁu…_ijagít_∑th
 += "/libijagent.so";

584 
	gijagít_∑th
 = (*)
deÁu…_ijagít_∑th
.
c_°r
();

587 
•_debug
("AGENT PATH - %s", 
agít_∑th
);

588 
•_debug
("INJECTOR PATH - %s", 
öje˘‹_∑th
);

589 
•_debug
("IJAGENT PATH - %s", 
ijagít_∑th
);

592 
°rög
 
	gexe_cmd
;

593 i‡(
	gloˇl_machöe
) {

594 
	gexe_cmd
 = 
öje˘‹_∑th
;

595 
	gexe_cmd
 += " ";

598 
	gexe_cmd
 = "ssh ";

599 
	gexe_cmd
 +
ªmŸe_ù
;

600 
	gexe_cmd
 += " ";

601 
	gexe_cmd
 +
öje˘‹_∑th
;

602 
	gexe_cmd
 += " ";

604 
	gexe_cmd
 +
loˇl_ù
;

605 
	gexe_cmd
 += " ";

606 
	gexe_cmd
 +
loˇl_p‹t
;

607 
	gexe_cmd
 += " ";

608 
	gexe_cmd
 +
ªmŸe_ù
;

609 
	gexe_cmd
 += " ";

610 
	gexe_cmd
 +
ªmŸe_p‹t
;

611 
	gexe_cmd
 += " ";

612 
	gexe_cmd
 +
agít_∑th
;

614 
•_debug
("INJECT CMD - %s", 
exe_cmd
.
c_°r
());

621 
FILE
* 
	gÂ
 = 
p›í
(
exe_cmd
.
c_°r
(), "r");

622 
	glöe
[1024];

623 
fgës
(
löe
, 1024, 
Â
);

624 
fgës
(
löe
, 1024, 
Â
);

625 i‡(
°r°r
(
löe
, "INJECTED"Ë!
NULL
) {

626 
c
->
öje˘ed
 = 
åue
;

628 
p˛o£
(
Â
);

630  
	gåue
;

635 
SpCh™√l
* 
	gSpT˝W‹kî
::
¸óã_ch™√l
(
fd
, 
Ch™√lRW
 
rw
, * 
¨g
) {

636 
T˝Ch™√l
* 
	gc
 = 
√w
 TcpChannel;

637 
	gc
->
	gloˇl_pid
 = 
gëpid
();

638 
	gc
->
	gty≥
 = 
SP_TCP
;

639 
	gc
->
	göode
 = 
gë_öode_‰om_fd
(
fd
);

642 i‡(
	g¨g
 !
NULL
) {

645 
ho°
[256];

646 
	g£rvi˚
[64];

647 
	gc
->
	gªmŸe
 = *((
sockaddr_°‹age
*)
¨g
);

648 i‡(
gë_addªss
(&
c
->
ªmŸe
, 
ho°
, 256, 
£rvi˚
, 64)) {

649 
•_debug
("c⁄√˘ÑemŸêho°: %s, sîvi˚: %s\n", 
ho°
, 
£rvi˚
);

651 
•_≥º‹
("failedÅo get connectÑemoteáddress");

655 i‡(
gë_loˇl_addªss
(
fd
, &
c
->
loˇl
)) {

656 i‡(
gë_addªss
(&
c
->
loˇl
, 
ho°
, 256, 
£rvi˚
, 64)) {

657 
•_debug
("c⁄√˘Üoˇ»ho°: %s, sîvi˚: %s\n", 
ho°
, 
£rvi˚
);

659 
•_≥º‹
("failedÅo getÜocaláddress for write/send");

666 i‡(
	grw
 =
SP_WRITE
) {

668 i‡(
gë_ªmŸe_addªss
(
fd
, &
c
->
ªmŸe
)) {

669 
ho°
[256];

670 
	g£rvi˚
[64];

671 i‡(
gë_addªss
(&
c
->
ªmŸe
, 
ho°
, 256, 
£rvi˚
, 64)) {

672 
•_debug
("wrôe/£ndÑemŸêho°: %s, sîvi˚: %s\n", 
ho°
, 
£rvi˚
);

674 
•_≥º‹
("failedÅo getÑemoteáddress for write/send");

679 i‡(
gë_loˇl_addªss
(
fd
, &
c
->
loˇl
)) {

680 
	gho°
[256];

681 
	g£rvi˚
[64];

682 i‡(
gë_addªss
(&
c
->
loˇl
, 
ho°
, 256, 
£rvi˚
, 64)) {

683 
•_debug
("wrôe/£ndÜoˇ»ho°: %s, sîvi˚: %s\n", 
ho°
, 
£rvi˚
);

685 
•_≥º‹
("failedÅo getÜocaláddress for write/send");

689  
	gc
;

694 
	gSpUdpW‹kî
::
£t_°¨t_åacög
(
yes_‹_no
, 
SpCh™√l
* 
c
) {

697 
	gSpUdpW‹kî
::
£t_°¨t_åacög
(
yes_‹_no
) {

700 
SpUdpW‹kî
::
°¨t_åacög
(
fd
) {

704 
boﬁ
 
	gSpUdpW‹kî
::
öje˘
(
SpCh™√l
* 
c
, * 
agít_∑th
,

705 * 
öje˘‹_∑th
,

706 * 
ijagít_∑th
) {

710 
SpCh™√l
* 
	gSpUdpW‹kî
::
¸óã_ch™√l
(
fd
, 
Ch™√lRW
 
rw
, *) {

711  
	gNULL
;

	@SpParser.C

1 
	~"SpIn°rumíãr.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpAddrS∑˚.h
"

5 
	~"SpUtûs.h
"

6 
	~"SpPoöt.h
"

7 
	~"SpPoötMakî.h
"

8 
	~"SpObje˘.h
"

9 
	~"SpInje˘‹.h
"

11 
usög
 
	gsb
::
Symèb
;

12 
usög
 
	gsb
::
Symbﬁ
;

13 
usög
 
	gsb
::
Regi⁄
;

15 
usög
 
	g•
::
SpP¨£r
;

16 
usög
 
	g•
::
SpAddrS∑˚
;

17 
usög
 
	gsb
::
AddªssLookup
;

19 
usög
 
	g≥
::
CodeObje˘
;

20 
usög
 
	g≥
::
CodeRegi⁄
;

21 
usög
 
	g≥
::
SymèbCodeSour˚
;

23 
usög
 
	gö
::
Resu…
;

24 
usög
 
	gö
::
Visô‹
;

25 
usög
 
	gö
::
Immedüã
;

26 
usög
 
	gö
::
Ex¥essi⁄
;

27 
usög
 
	gö
::
In°ru˘i⁄
;

28 
usög
 
	gö
::
Dîe„ªn˚
;

29 
usög
 
	gö
::
Regi°îAST
;

30 
usög
 
	gö
::
Bö¨yFun˘i⁄
;

31 
usög
 
	gö
::
In°ru˘i⁄Decodî
;

33 
usög
 
	gph
::
Poöt
;

34 
usög
 
	gph
::
P©chMgr
;

35 
usög
 
	gph
::
AddrS∑˚
;

36 
usög
 
	gph
::
P©chBlock
;

37 
usög
 
	gph
::
PoötMakî
;

38 
usög
 
	gph
::
P©chObje˘
;

39 
usög
 
	gph
::
P©chMgrPå
;

40 
usög
 
	gph
::
P©chFun˘i⁄
;

42 
usög
 
	gdt
::
Addªss
;

44 
«me•a˚
 
	g•
 {

46 
SpC⁄ãxt
* 
g_c⁄ãxt
;

48 
	gSpP¨£r
::
SpP¨£r
()

49 : 
exe_obj_
(
NULL
), 
öje˘ed_
(
Ál£
),
•_off£t_
(0) {

50 
öô_dynö°_libs
();

53 
	gSpP¨£r
::~
SpP¨£r
() {

54 
CodeSour˚s
::
ôî©‹
 
i
 = 
code_§cs_
.
begö
();

55 
	gi
 !
code_§cs_
.
íd
(); i++) {

56 
SymèbCodeSour˚
* 
	gscs
 = 
°©ic_ˇ°
<SymèbCodeSour˚*>(*
i
);

57 
dñëe
 
	gscs
;

59 
	gCodeObje˘s
::
ôî©‹
 
i
 = 
code_objs_
.
begö
();

60 
	gi
 !
code_objs_
.
íd
(); i++)

61 
dñëe
 *
	gi
;

64 
	gSpP¨£r
::
±r


65 
SpP¨£r
::
¸óã
() {

66  
±r
(
√w
 
SpP¨£r
);

71 
Addªss
 
	goff£ts
[100];

72 } 
	tIjLib
;

75 
boﬁ


76 
	gSpP¨£r
::
is_dynö°_lib
(
°rög
 
lib
) {

77 
i
 = 0; 
	gi
 < 
	gdynö°_libs_
.
size
(); i++) {

78 i‡(
	glib
.
föd
(
dynö°_libs_
[
i
]Ë!
°rög
::
≈os
Ë 
åue
;

80  
	gÁl£
;

84 
	gSpP¨£r
::
öô_dynö°_libs
() {

85 
dynö°_libs_
.
push_back
("libpatchAPI.so");

86 
	gdynö°_libs_
.
push_back
("libparseAPI.so");

87 
	gdynö°_libs_
.
push_back
("libstackwalk.so");

88 
	gdynö°_libs_
.
push_back
("libsymtabAPI.so");

89 
	gdynö°_libs_
.
push_back
("libinstructionAPI.so");

90 
	gdynö°_libs_
.
push_back
("libelf.so");

91 
	gdynö°_libs_
.
push_back
("libdwarf.so");

92 
	gdynö°_libs_
.
push_back
("libcommon.so");

96 
P©chMgrPå


97 
	gSpP¨£r
::
∑r£
() {

98 i‡(
mgr_
)  mgr_;

101 
AddªssLookup
* 
	gÆ
 = AddªssLookup::
¸óãAddªssLookup
(
gëpid
());

102 
	gÆ
->
ª‰esh
();

103 
	g°d
::
ve˘‹
<
Symèb
*> 
èbs
;

104 
	gÆ
->
gëAŒSymèbs
(
èbs
);

110 
	g°d
::
ve˘‹
<
Symèb
*>::
ôî©‹
 
i
 = 
èbs
.
begö
(); 
	gi
 !èbs.
íd
(); i++) {

111 
Symèb
* 
	gsym
 = *
i
;

112 i‡(
	gsym
->
«me
().
föd
("libijagít.so"Ë!
°rög
::
≈os
) {

113 
öje˘ed_
 = 
åue
;

118 
IjLib
* 
	gshm
 = 
NULL
;

119 i‡(
	göje˘ed_
) {

120 
	gshm
 = (
IjLib
*)
SpInje˘‹
::
gë_shm
(1985, (IjLib));

127 
	gcur
 = 0;

128 
	g°d
::
	tm≠
<
	tAddªss
, 
	tboﬁ
> 
	tLibLookup
;

129 
LibLookup
 
	glib_lookup
;

130 
	glib_lookup
[0] = 
åue
;

131 i‡(
	göje˘ed_
) {

132 ()
	gshm
->
	goff£ts
[
cur
] != -1) {

133 
lib_lookup
[
shm
->
off£ts
[
cur
]] = 
åue
;

134 ++
	gcur
;

138 
P©chObje˘s
 
	g∑tch_objs
;

139 
	g°d
::
ve˘‹
<
Symèb
*>::
ôî©‹
 
i
 = 
èbs
.
begö
(); 
	gi
 !èbs.
íd
(); i++) {

140 
Symèb
* 
	gsym
 = *
i
;

141 
Addªss
 
	glﬂd_addr
 = 0;

142 
	gÆ
->
gëLﬂdAddªss
(
sym
, 
lﬂd_addr
);

147 i‡(
	göje˘ed_
) {

148 i‡((
	glib_lookup
.
föd
(
lﬂd_addr
Ë=
lib_lookup
.
íd
()) &&

149 (
sym
->
«me
().
föd
(
•_fûíame
(•_fûíame(
gë_agít_«me
().
c_°r
()))Ë=
°rög
::
≈os
) &&

150 (
sym
->
«me
().
föd
("libagít.so"Ë=
°rög
::
≈os
)) {

151 #i‚de‡
SP_RELEASE


152 
•_debug
("SKIPED - skùÖ¨sög %s", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

157 i‡(
is_dynö°_lib
(
sym
->
«me
())) {

158 #i‚de‡
SP_RELEASE


159 
•_debug
("SKIPED - skùÖ¨sög %s", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

166 
SymèbCodeSour˚
* 
	gscs
 = 
√w
 SymèbCodeSour˚(
sym
);

167 
	gcode_§cs_
.
push_back
(
scs
);

168 
CodeObje˘
* 
	gco
 = 
√w
 CodeObje˘(
scs
);

169 
	gcode_objs_
.
push_back
(
co
);

170 
	gco
->
∑r£
();

173 
P©chObje˘
* 
	g∑tch_obj
 = 
√w
 
•
::
SpObje˘
(
co
, 
lﬂd_addr
, 
NULL
, NULL,Üﬂd_addr?lﬂd_addr:
scs
->
lﬂdAddªss
());

175 
	g∑tch_objs
.
push_back
(
∑tch_obj
);

176 #i‚de‡
SP_RELEASE


177 
•_debug
("PARSED -Ö¨£d %s", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

179 i‡(
	gsym
->
isExec
()) {

180 
	gexe_obj_
 = 
∑tch_obj
;

181 
	gexe_«me_
 = 
sym
->
«me
().
c_°r
();

182 #i‚de‡
SP_RELEASE


183 
•_debug
("EXE - %†i†™ÉxecuèbÀ", 
•_fûíame
(
sym
->
«me
().
c_°r
()));

189 i‡(!
	gexe_obj_
) {

190 
	gexe_obj_
 = 
∑tch_objs
[0];

194 
SpAddrS∑˚
* 
	gas
 = SpAddrS∑˚::
¸óã
(
exe_obj_
);

195 
	gph
::
In°rumíãr
* 
ö°
 = 
NULL
;

196 
	gö°
 = 
•
::
SpIn°rumíãr
::
¸óã
(
as
);

198 
	g•
::
SpPoötMakî
* 
pm
 = 
√w
 SpPointMaker;

199 
	gmgr_
 = 
P©chMgr
::
¸óã
(
as
, 
ö°
, 
pm
);

200 
	gSpP¨£r
::
P©chObje˘s
::
ôî©‹
 
i
 = 
∑tch_objs
.
begö
(); 
	gi
 !∑tch_objs.
íd
(); i++) {

201 i‡(*
	gi
 !
exe_obj_
) {

202 
as
->
lﬂdLibøry
(*
i
);

207 i‡(
	göje˘ed_
) {

208 
shm˘l
(
IJLIB_ID
, 
IPC_RMID
, 
NULL
);

209 
shm˘l
(
IJMSG_ID
, 
IPC_RMID
, 
NULL
);

211  
	gmgr_
;

215 
P©chFun˘i⁄
*

216 
	gSpP¨£r
::
födFun˘i⁄
(
Addªss
 
addr
) {

218 
AddrS∑˚
* 
as
 = 
mgr_
->as();

219 
	gAddrS∑˚
::
ObjM≠
::
ôî©‹
 
ci
 = 
as
->
objM≠
().
begö
(); 
	gci
 !as->objM≠().
íd
(); ci++) {

220 
P©chObje˘
* 
	gobj
 = 
ci
->
£c⁄d
;

221 
SymèbCodeSour˚
* 
	gcs
 = (SymèbCodeSour˚*)
obj
->
co
()->
cs
();

222 
Symèb
* 
	gsym
 = 
cs
->
gëSymèbObje˘
();

223 
Addªss
 
	glowî_bound
 = 
obj
->
codeBa£
();

224 i‡(!
	glowî_bound
Ëlowî_bound = 
sym
->
gëLﬂdOff£t
();

225 
Addªss
 
	guµî_bound
 = 
lowî_bound
 + 
cs
->
Àngth
();

227 i‡(
	gaddr
 >
lowî_bound
 && 
addr
 <
uµî_bound
) {

228 
Addªss
 
addªss
 = 
addr
;

229 
	gsb
::
Fun˘i⁄
* 
f
;

230 i‡(!
	gsym
->
gëC⁄èöögFun˘i⁄
(
addªss
, 
f
)) {

231 
	gaddªss
 -
lowî_bound
;

234 
	g°d
::
ve˘‹
<
CodeRegi⁄
*>::
c⁄°_ôî©‹
 
ri
 = 
cs
->
ªgi⁄s
().
begö
();

235 
	gri
 !
cs
->
ªgi⁄s
().
íd
();Ñi++) {

236 
	g°d
::
£t
<
≥
::
Fun˘i⁄
*> 
funcs
;

237 
	gobj
->
co
()->
födFuncs
(*
ri
, 
addªss
, 
funcs
);

239 i‡(
	gfuncs
.
size
() > 0) {

240 
P©chFun˘i⁄
* 
	gpfunc
 = 
obj
->
gëFunc
(*
funcs
.
begö
());

241  
	gpfunc
;

247  
	gNULL
;

251 
	glib«me
[512];

252 
	gîr
[512];

253 
	glﬂded
;

254 
	gpc
;

255 
	g•
;

256 
	gbp
;

257 } 
	tIjMsg
;

260 
°rög


261 
	gSpP¨£r
::
gë_agít_«me
() {

262 i‡(
agít_«me_
.
size
() > 0) ágent_name_;

265 i‡(
	göje˘ed_
) {

266 
IjMsg
* 
	gmsg_shm
 = (IjMsg*)
SpInje˘‹
::
gë_shm
(1986, (IjMsg));

267 
	gagít_«me_
 = 
msg_shm
->
lib«me
;

268  
	gagít_«me_
;

274 
°rög
 
	göô_bef‹e
 = 
g_c⁄ãxt
->
öô_bef‹e_«me
();

275 
P©chFun˘i⁄
* 
	gf
 = 
födFun˘i⁄
(
öô_bef‹e
);

276 
Symèb
* 
	gsym
 = ((
SymèbCodeSour˚
*)(
f
->
obj
()->
co
()->
cs
()))->
gëSymèbObje˘
();

277 
	gagít_«me_
 = 
sym
->
«me
().
c_°r
();

278  
	gagít_«me_
;

282 
Addªss


283 
	gSpP¨£r
::
gë_func_addr
(
°rög
 
«me
) {

284 
AddrS∑˚
* 
as
 = 
mgr_
->as();

285 
	gAddrS∑˚
::
ObjM≠
::
ôî©‹
 
ci
 = 
as
->
objM≠
().
begö
(); 
	gci
 !as->objM≠().
íd
(); ci++) {

286 
P©chObje˘
* 
	gobj
 = 
ci
->
£c⁄d
;

287 
CodeObje˘
* 
	gco
 = 
obj
->
co
();

288 
	gCodeObje˘
::
fun˛i°
& 
Æl
 = 
co
->
funcs
();

289 
	gCodeObje˘
::
fun˛i°
::
ôî©‹
 
fô
 = 
Æl
.
begö
(); 
	gfô
 !Æl.
íd
(); fit++) {

290 i‡((*
	gfô
)->
«me
().
com∑ª
(name) == 0) {

291 
Addªss
 
addr
 = (*
fô
)->addr(Ë+ 
obj
->
codeBa£
();

292  
	gaddr
;

303 
P©chFun˘i⁄
*

304 
	gSpP¨£r
::
födFun˘i⁄
(
°rög
 
«me
, 
boﬁ
 
skù
) {

305 
•_debug
("FIND FUNC -Üookög f‹ %s", 
«me
.
c_°r
());

306 i‡(
	gªÆ_func_m≠_
.
föd
(
«me
Ë!
ªÆ_func_m≠_
.
íd
()) {

307  
ªÆ_func_m≠_
[
«me
];

310 
AddrS∑˚
* 
	gas
 = 
mgr_
->
as
();

311 
	gAddrS∑˚
::
ObjM≠
::
ôî©‹
 
ci
 = 
as
->
objM≠
().
begö
(); 
	gci
 !as->objM≠().
íd
(); ci++) {

313 
P©chObje˘
* 
	gobj
 = 
ci
->
£c⁄d
;

314 
CodeObje˘
* 
	gco
 = 
obj
->
co
();

315 
	gCodeObje˘
::
fun˛i°
& 
Æl
 = 
co
->
funcs
();

316 
SymèbCodeSour˚
* 
	gcs
 = (SymèbCodeSour˚*)
obj
->
co
()->
cs
();

317 
Symèb
* 
	gsym
 = 
cs
->
gëSymèbObje˘
();

318 
•_debug
("IN OBJECT - %s", 
sym
->
«me
().
c_°r
());

319 i‡(
	gskù
 && 
	gg_c⁄ãxt
->
is_wñl_known_lib
(
•_fûíame
(
sym
->
«me
().
c_°r
()))) {

320 
•_debug
("SKIP - %s", 
«me
.
c_°r
());

324 
	gCodeObje˘
::
fun˛i°
::
ôî©‹
 
fô
 = 
Æl
.
begö
(); 
	gfô
 !Æl.
íd
(); fit++) {

325 i‡((*
	gfô
)->
«me
().
com∑ª
(name) == 0) {

326 
Regi⁄
* 
ªgi⁄
 = 
sym
->
födEn˛osögRegi⁄
((*
fô
)->
addr
());

327 i‡(
	gªgi⁄
 &&Ñegi⁄->
gëRegi⁄Name
().
com∑ª
(".plt") == 0) {

328 
•_debug
("A PLT, SKIP - %s", 
«me
.
c_°r
());

331 
P©chFun˘i⁄
* 
	gfound
 = 
obj
->
gëFunc
(*
fô
);

332 
	gªÆ_func_m≠_
[
«me
] = 
found
;

333 
•_debug
("FOUND - %s", 
«me
.
c_°r
());

334  
	gfound
;

338 
•_debug
("NO FOUND - %s", 
«me
.
c_°r
());

339  
	gNULL
;

343 
°rög


344 
	gSpP¨£r
::
dump_ö¢
(* 
addr
, 
size_t
 
size
) {

346 
Addªss
 
	gba£
 = (Addªss)
addr
;

347 
SymèbCodeSour˚
* 
	gcs
 = (SymèbCodeSour˚*)
mgr_
->
as
()->
execuèbÀ
()->
co
()->
cs
();

348 
°rög
 
	gs
;

349 
	gbuf
[256];

350 
In°ru˘i⁄Decodî
 
deco
(
addr
,

351 
size
,

352 
cs
->
gëArch
());

353 
	gIn°ru˘i⁄
::
På
 
ö¢
 = 
deco
.
decode
();

354 
	gö¢
) {

355 
•rötf
(
buf
, " %lx(%2lu byãs): %-25†| ", 
ba£
, 
ö¢
->
size
(), in¢->
f‹m©
(ba£).
c_°r
());

356 * 
	gøw
 = (*)
ö¢
->
±r
();

357 
	gi
 = 0; i < 
	gö¢
->
size
(); i++)

358 
•rötf
(
buf
, "%s%2x ", buf, 0xff&
øw
[
i
]);

359 
•rötf
(
buf
, "%s\n", buf);

360 
	gs
 +
buf
;

361 
	gba£
 +
ö¢
->
size
();

362 
	gö¢
 = 
deco
.
decode
();

364  
	gs
;

367 ˛as†
	cSpVisô‹
 : 
public
 
Visô‹
 {

368 
public
:

369 
SpVisô‹
(
•
::
SpPoöt
* 
±
)

370 : 
Visô‹
(), 
ˇŒ_addr_
(0), 
±_
(
±
), 
u£_pc_
(
Ál£
) { }

371 
vútuÆ
 
visô
(
Regi°îAST
* 
r
) {

372 i‡(
	gSpP¨£r
::
is_pc
(
r
->
gëID
())) {

373 
u£_pc_
 = 
åue
;

374 
	gˇŒ_addr_
 = 
±_
->
block
()->
íd
();

377 
Addªss
 
	grvÆ
 = 
±_
->
¢ù
()->
gë_ßved_ªg
(
r
->
gëID
());

378 
	gˇŒ_addr_
 = 
rvÆ
;

380 
	g°ack_
.
push
(
ˇŒ_addr_
);

382 
vútuÆ
 
visô
(
Bö¨yFun˘i⁄
* 
b
) {

383 
Addªss
 
	gi1
 = 
°ack_
.
t›
();

384 
	g°ack_
.
p›
();

385 
Addªss
 
	gi2
 = 
°ack_
.
t›
();

386 
	g°ack_
.
p›
();

388 i‡(
	gb
->
isAdd
()) {

389 
	gˇŒ_addr_
 = 
i1
 + 
i2
;

390 } i‡(
	gb
->
isMu…ùly
()) {

391 
	gˇŒ_addr_
 = 
i1
 * 
i2
;

393 
as£π
(0);

396 
	g°ack_
.
push
(
ˇŒ_addr_
);

398 
vútuÆ
 
visô
(
Immedüã
* 
i
) {

399 
Resu…
 
	gªs
 = 
i
->
evÆ
();

400 
	gªs
.
size
()) {

402 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u8vÆ
;

406 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u16vÆ
;

410 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u32vÆ
;

414 
ˇŒ_addr_
 =
ªs
.
vÆ
.
u64vÆ
;

418 
	g°ack_
.
push
(
ˇŒ_addr_
);

420 
vútuÆ
 
visô
(
Dîe„ªn˚
* 
d
) {

421 
Addªss
* 
	gaddr
 = (Addªss*)
°ack_
.
t›
();

422 
	g°ack_
.
p›
();

423 
	gˇŒ_addr_
 = *
addr
;

424 
	g°ack_
.
push
(
ˇŒ_addr_
);

427 
Addªss
 
ˇŒ_addr
() const {

428  
	gˇŒ_addr_
;

430 
boﬁ
 
u£_pc
() const {

431  
	gu£_pc_
;

433 
	g¥iv©e
:

434 
°d
::
°ack
<
Addªss
> 
°ack_
;

435 
Addªss
 
	gˇŒ_addr_
;

436 
	g•
::
SpPoöt
* 
±_
;

437 
boﬁ
 
	gu£_pc_
;

441 
P©chFun˘i⁄
*

442 
	gSpP¨£r
::
	$ˇŒì
(
Poöt
* 
±
, 
boﬁ
 
∑r£_ödúe˘
) {

446 
•
::
SpPoöt
* 
•t
 = 
°©ic_ˇ°
<•::SpPoöt*>(
±
);

447 i‡(
•t
->
	`ˇŒì
())  spt->callee();

450 
P©chFun˘i⁄
* 
f
 = 
±
->
	`gëCÆÀe
();

451 i‡(
f
) {

452 
•t
->
	`£t_ˇŒì
(
f
);

453  
f
;

455 i‡(
•t
->
	`ˇŒì
()) {

456  
•t
->
	`ˇŒì
();

460 i‡(
∑r£_ödúe˘
) {

463 
In°ru˘i⁄
::
På
 
ö¢
 = 
•t
->
	`¢ù
()->
	`gë_‹ig_ˇŒ_ö¢
();

464 
Ex¥essi⁄
::
På
 
åg
 = 
ö¢
->
	`gëC⁄åﬁFlowT¨gë
();

465 
Addªss
 
ˇŒ_addr
 = 0;

466 i‡(
åg
) {

467 
SpVisô‹
 
	`visô‹
(
•t
);

468 
åg
->
	`≠∂y
(&
visô‹
);

469 
ˇŒ_addr
 = 
visô‹
.
	`ˇŒ_addr
();

470 
f
 = 
	`födFun˘i⁄
(
ˇŒ_addr
);

471 i‡(
f
) {

472 
•t
->
	`£t_ˇŒì
(
f
);

473  
f
;

477 
	`•_¥öt
("CANNOT RESOLVE ADDR %lx, SKIP f‹ blob %lx", 
ˇŒ_addr
, 
•t
->
	`¢ù
()->
	`buf
());

479 *
d
 = (*)(
•t
->
	`¢ù
()->
	`gë_ßved_ªg
(
º
->
	`gëID
()Ë+ 
di•
);

480 
	`•_¥öt
("RR: %s, [%lx+%lx]=>%lx", 
º
->
	`gëID
().
	`«me
().
	`c_°r
(), 
•t
->
	`¢ù
()->
	`gë_ßved_ªg
‘r->gëID()), 
di•
, *
d
);

481 
	`•_¥öt
("ORIG CALL DUMP INSN (%d byãs)- {", 
•t
->
	`¢ù
()->
	`gë_‹ig_ˇŒ_ö¢
()->
	`size
());

482 
	`•_¥öt
("%s", 
	`dump_ö¢
((*)
•t
->
	`¢ù
()->
	`gë_‹ig_ˇŒ_ö¢
()->
	`±r
(), s±->¢ù()->gë_‹ig_ˇŒ_ö¢()->
	`size
()).
	`c_°r
());

483 
	`•_¥öt
("DUMP INSN - }");

485 
	`•_¥öt
("DUMP INSN (%d byãs)- {", 
•t
->
	`¢ù
()->
	`size
());

486 
	`•_¥öt
("%s", 
	`dump_ö¢
((*)
•t
->
	`¢ù
()->
	`buf
(), s±->¢ù()->
	`size
()).
	`c_°r
());

487 
	`•_¥öt
("DUMP INSN - }");

489  
NULL
;

492  
NULL
;

493 
	}
}

495 
	gSpP¨£r
::
	$gë_‰ame
(* 
pc
, * 
•
, * 
bp
) {

496 
IjMsg
* 
shm
 = (IjMsg*)
SpInje˘‹
::
	`gë_shm
(1986, (IjMsg));

497 *
pc
 = 
shm
->pc;

498 *
•
 = 
shm
->sp;

499 *
bp
 = 
shm
->bp;

500 
	}
}

	@SpPayload.C

1 
	~"SpPaylﬂd.h
"

2 
	~"SpC⁄ãxt.h
"

3 
	~"SpPoöt.h
"

4 
	~"SpUtûs.h
"

6 
usög
 
	gph
::
Poöt
;

7 
usög
 
	gph
::
Sc›e
;

8 
usög
 
	gph
::
P©chMgr
;

9 
usög
 
	gph
::
P©chEdge
;

10 
usög
 
	gph
::
P©chBlock
;

11 
usög
 
	gph
::
P©chMgrPå
;

12 
usög
 
	gph
::
P©chObje˘
;

13 
usög
 
	gph
::
P©chFun˘i⁄
;

15 
usög
 
	g•
::
SpPoöt
;

16 
usög
 
	g•
::
SpCh™√l
;

17 
usög
 
	g•
::
ArgumítH™dÀ
;

18 
usög
 
	g•
::
SpIpcMgr
;

20 
«me•a˚
 
	g•
 {

21 
SpC⁄ãxt
* 
g_c⁄ãxt
;

26 
wøµî_bef‹e
(
SpPoöt
* 
±
, 
•
::
PaylﬂdFunc_t
 
bef‹e
) {

27 i‡(!
SpIpcMgr
::
bef‹e_íåy
(
±
)) ;

28 
bef‹e
(
±
);

33 
wøµî_a·î
(
SpPoöt
* 
±
, 
•
::
PaylﬂdFunc_t
 
a·î
) {

34 i‡(!
SpIpcMgr
::
bef‹e_exô
(
±
)) ;

35 
a·î
(
±
);

40 
	$deÁu…_bef‹e
(
Poöt
* 
±
) {

41 
P©chFun˘i⁄
* 
f
 = 
•
::
	`ˇŒì
(
±
);

42 i‡(!
f
) ;

44 
°rög
 
ˇŒì_«me
 = 
f
->
	`«me
();

45 
	`•_¥öt
("E¡î %s", 
ˇŒì_«me
.
	`c_°r
());

47 
•
::
	`¥›ñ
(
±
);

48 
	}
}

51 
	$deÁu…_a·î
(
Poöt
* 
±
) {

52 
P©chFun˘i⁄
* 
f
 = 
•
::
	`ˇŒì
(
±
);

53 i‡(!
f
) ;

55 
°rög
 
ˇŒì_«me
 = 
f
->
	`«me
();

56 
	`•_¥öt
("Lóvê%s", 
ˇŒì_«me
.
	`c_°r
());

57 
	}
}

60 
«me•a˚
 
	g•
 {

63 
P©chFun˘i⁄
*

64 
ˇŒì
(
ph
::
Poöt
* 
±
) {

65  
g_c⁄ãxt
->
ˇŒì
(
±
);

70 
p›_¨gumít
(
ph
::
Poöt
* 
±
, 
ArgumítH™dÀ
* 
h
, 
size_t
 
size
) {

71  
	g°©ic_ˇ°
<
	gSpPoöt
*>(
	g±
)->
¢ù
()->
p›_¨gumít
(
h
, 
size
);

76 
¥›ñ
(
ph
::
Poöt
* 
±
) {

79 
SpPoöt
* 
•t
 = 
°©ic_ˇ°
<
•
::SpPoöt*>(
±
);

80 i‡(
	g•t
->
¥›ag©ed
()) {

84 
P©chFun˘i⁄
* 
	gf
 = 
ˇŒì
(
±
);

85 i‡(!
	gf
) ;

87 
	g•
::
SpPr›ñÀr
::
±r
 
p
 = 
g_c⁄ãxt
->
öô_¥›ñÀr
();

88 
	gp
->
go
(
f
, 
g_c⁄ãxt
, g_c⁄ãxt->
öô_bef‹e
(), g_c⁄ãxt->
öô_a·î
(), 
±
);

89 
	g•t
->
£t_¥›ag©ed
(
åue
);

92 
	gArgumítH™dÀ
::
ArgumítH™dÀ
(Ë: 
off£t
(0), 
num
(0) {}

95 
	gArgumítH™dÀ
::
ö£π_buf
(
size_t
 
s
) {

96 * 
b
 = 
√w
 [
s
];

97 
	gbufs
.
push_back
(
b
);

98  
	gb
;

101 
	gArgumítH™dÀ
::~
ArgumítH™dÀ
() {

102 
i
 = 0; 
	gi
 < 
	gbufs
.
size
(); i++Ë
dñëe
 bufs[i];

106 
ªtvÆ
(
•
::
SpPoöt
* 
±
) {

107  
±
->
¢ù
()->
gë_ªt_vÆ
();

111 
boﬁ


112 
is_ùc_wrôe
(
SpPoöt
* 
±
) {

113 
SpCh™√l
* 
	gc
 = 
±
->
ch™√l
();

116  (
	gc
 && c->
	grw
 =
SP_WRITE
);

120 
boﬁ


121 
is_ùc_ªad
(
SpPoöt
* 
±
) {

122 
SpCh™√l
* 
	gc
 = 
±
->
ch™√l
();

124 i‡(
ˇŒì
(
±
)->
«me
().
com∑ª
("accept") != 0)

125  (
c
 && c->
rw
 =
SP_READ
 && 
°¨t_åacög
(c->
fd
));

127  (
	gc
 && c->
	grw
 =
SP_READ
);

131 
°¨t_åacög
(
fd
) {

132 
	g•
::
SpIpcMgr
* 
ùc_mgr
 = 
g_c⁄ãxt
->ipc_mgr();

133  
	gùc_mgr
->
°¨t_åacög
(
fd
);

	@SpPointMaker.h

1 #i‚de‡
_SPPOINTMAKER_H_


2 
	#_SPPOINTMAKER_H_


	)

4 
	~"SpAgítComm⁄.h
"

7 
«me•a˚
 
	g•
 {

8 ˛as†
	cSpPoötMakî
 : 
public
 
ph
::
PoötMakî
 {

9 
¥Ÿe˘ed
:

11 
vútuÆ
 
ph
::
Poöt
*

12 
mkFuncPoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

13 
ph
::
P©chMgrPå
 
m
,

14 
ph
::
P©chFun˘i⁄
* 
f
) {

15  
√w
 
SpPoöt
(
t
, 
m
, 
f
);

18 
vútuÆ
 
	gph
::
Poöt
*

19 
mkFuncSôePoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

20 
ph
::
P©chMgrPå
 
m
,

21 
ph
::
P©chFun˘i⁄
* 
f
,

22 
ph
::
P©chBlock
* 
b
) {

23  
√w
 
SpPoöt
(
t
, 
m
, 
f
, 
b
);

26 
vútuÆ
 
	gph
::
Poöt
*

27 
mkBlockPoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

28 
ph
::
P©chMgrPå
 
m
,

29 
ph
::
P©chBlock
* 
b
,

30 
ph
::
P©chFun˘i⁄
* 
f
) {

31  
√w
 
SpPoöt
(
t
, 
m
, 
b
, 
f
);

33 
vútuÆ
 
	gph
::
Poöt
*

34 
mkIn¢Poöt
(
ph
::
Poöt
::
Ty≥
 
t
,

35 
ph
::
P©chMgrPå
 
m
,

36 
ph
::
P©chBlock
* 
b
,

37 
Dynö°
::
Addªss
 
a
,

38 
ö
::
In°ru˘i⁄
::
På
 
i
,

39 
ph
::
P©chFun˘i⁄
 *
f
) {

40  
√w
 
SpPoöt
(
t
, 
m
, 
b
, 
a
, 
i
, 
f
);

42 
vútuÆ
 
	gph
::
Poöt
*

43 
mkEdgePoöt
(
ph
::
Poöt
::
Ty≥
 
t
,

44 
ph
::
P©chMgrPå
 
m
,

45 
ph
::
P©chEdge
* 
e
,

46 
ph
::
P©chFun˘i⁄
* 
f
) {

47  
√w
 
SpPoöt
(
t
, 
m
, 
e
, 
f
);

	@SpPropeller.C

1 
	~"SpPr›ñÀr.h
"

2 
	~"SpC⁄ãxt.h
"

3 
	~"SpSnù≥t.h
"

4 
	~"SpUtûs.h
"

6 
usög
 
	g•
::
SpC⁄ãxt
;

7 
usög
 
	g•
::
SpPr›ñÀr
;

9 
usög
 
	gph
::
Poöt
;

10 
usög
 
	gph
::
Sc›e
;

11 
usög
 
	gph
::
P©chî
;

12 
usög
 
	gph
::
Snù≥t
;

13 
usög
 
	gph
::
P©chMgr
;

14 
usög
 
	gph
::
P©chBlock
;

15 
usög
 
	gph
::
P©chMgrPå
;

16 
usög
 
	gph
::
P©chFun˘i⁄
;

17 
usög
 
	gph
::
PushBackComm™d
;

19 
«me•a˚
 
	g•
 {

21 
	gSpPr›ñÀr
::
SpPr›ñÀr
() {

24 
SpPr›ñÀr
::
±r


25 
SpPr›ñÀr
::
¸óã
() {

26  
±r
(
√w
 
SpPr›ñÀr
);

33 
boﬁ


34 
	gSpPr›ñÀr
::
go
(
P©chFun˘i⁄
* 
func
, 
SpC⁄ãxt
* 
c⁄ãxt
, 
PaylﬂdFunc
 
bef‹e
,

35 
PaylﬂdFunc
 
a·î
, 
Poöt
* 
±
) {

36 #i‚de‡
SP_RELEASE


37 
•_debug
("START PROPELLING -Ör›ñÅÿˇŒì†o‡fun˘i⁄ %s", 
func
->
«me
().
c_°r
());

40 
Poöts
 
	g±s
;

41 
P©chMgrPå
 
	gmgr
 = 
c⁄ãxt
->
mgr
();

42 
P©chFun˘i⁄
* 
	gcur_func
 = 
NULL
;

43 i‡(
	g±
) {

44 
•_debug
("POINT VALID - %s", 
func
->
«me
().
c_°r
());

45 
	gcur_func
 = 
c⁄ãxt
->
∑r£r
()->
födFun˘i⁄
(
func
->
«me
());

47 
	gcur_func
 = 
c⁄ãxt
->
∑r£r
()->
födFun˘i⁄
(
func
->
«me
());

50 
√xt_poöts
(
cur_func
, 
mgr
, 
±s
);

54 
	gph
::
P©chî
 
∑tchî
(
mgr
);

55 
	gi
 = 0; i < 
	g±s
.
size
(); i++) {

56 
Poöt
* 
	g±
 = 
±s
[
i
];

60 
P©chFun˘i⁄
* 
	gˇŒì
 = 
c⁄ãxt
->
∑r£r
()->
ˇŒì
(
±
);

61 #i‚de‡
SP_RELEASE


62 i‡(
	gˇŒì
) {

63 
•_debug
("POINT - instrumenting direct callát %lxÅo function %s",

64 
±
->
block
()->
œ°
(), 
ˇŒì
->
«me
().
c_°r
());

66 
•_debug
("POINT - in°rumítög indúe˘ cÆ»© %lx", 
±
->
block
()->
œ°
());

69 
	gSpSnù≥t
::
±r
 
•_¢ù
 = 
SpSnù≥t
::
¸óã
(
ˇŒì
, 
±
, 
c⁄ãxt
, 
bef‹e
, 
a·î
);

70 
	gSnù≥t
<
	gSpSnù≥t
::
±r
>::
På
 
¢ù
 = 
Snù≥t
<
SpSnù≥t
::±r>::
¸óã
(
•_¢ù
);

71 
	g∑tchî
.
add
(
PushBackComm™d
::
¸óã
(
±
, 
¢ù
));

73 
	g∑tchî
.
commô
();

74 #i‚de‡
SP_RELEASE


75 
•_debug
("FINISH PROPELLING - %lu cÆÀe†o‡fun˘i⁄ %†¨êö°rumíãd", 
±s
.
size
(), 
func
->
«me
().
c_°r
());

77  
	gåue
;

82 
	gSpPr›ñÀr
::
√xt_poöts
(
P©chFun˘i⁄
* 
cur_func
, 
P©chMgrPå
 
mgr
, 
Poöts
& 
±s
) {

83 
Sc›e
 
sc›e
(
cur_func
);

84 
	gmgr
->
födPoöts
(
sc›e
, 
Poöt
::
PªCÆl
, 
back_ö£πî
(
±s
));

	@SpSnippet.C

1 
	~"SpEvít.h
"

2 
	~"SpP¨£r.h
"

3 
	~"SpC⁄ãxt.h
"

4 
	~"SpSnù≥t.h
"

5 
	~"SpPoöt.h
"

6 
	~"SpUtûs.h
"

7 
	~"SpObje˘.h
"

9 
usög
 
	gph
::
Poöt
;

10 
usög
 
	gdt
::
Addªss
;

11 
usög
 
	gph
::
P©chBlock
;

12 
usög
 
	gph
::
P©chFun˘i⁄
;

14 
«me•a˚
 
	g•
 {

18 
	gSpSnù≥t
::
SpSnù≥t
(
P©chFun˘i⁄
* 
f
,

19 
Poöt
* 
±
,

20 
SpC⁄ãxt
* 
c
,

21 
PaylﬂdFunc
 
bef‹e
,

22 
PaylﬂdFunc
 
a·î
)

23 : 
func_
(
f
), 
poöt_
(
±
), 
c⁄ãxt_
(
c
), 
bef‹e_
(
bef‹e
), 
a·î_
(
a·î
),

24 
blob_size_
(0), 
•rög_size_
(0), 
•rög_blk_
(
NULL
), 
ªÆloc_
(
Ál£
) {

26 
	gph
::
P©chMgrPå
 
mgr
 = 
c
->mgr();

27 
	gph
::
AddrS∑˚
* 
as
 = 
mgr
->as();

31 
	gblob_
 = (*)
as
->
mÆloc
(
±
->
obj
(), 1024,

32 
°©ic_ˇ°
<
•
::
SpObje˘
*>(
±
->
obj
())->
lﬂd_addr
());

36 
	gSpSnù≥t
::~
SpSnù≥t
() {

37 i‡(!
ªÆloc_
Ë
‰ì
(
blob_
);

40 * 
	gSpSnù≥t
::
ªÆloc
() {

41 * 
buf
 = 
NULL
;

42 
	gªÆloc_
 = 
åue
;

44  
	gbuf
;

58 
	gSpSnù≥t
::
blob
(
Addªss
 
ªt_addr
, 
boﬁ
 
ªloc
, boﬁ 
•rög
) {

59 
as£π
(
c⁄ãxt_
);

60 
	gªt_addr_
 = 
ªt_addr
;

63 i‡(
	gblob_size_
 > 0) {

64  
	gblob_
;

68 i‡(
	gªloc
) {

69 
P©chBlock
* 
	gblk
 = 
NULL
;

70 
	gblk
 = 
poöt_
->
block
();

71 
	gblob_size_
 +
ªloc_block
(
blk
, 
blob_
, 
blob_size_
);

76 
	gblob_size_
 +
emô_ßve
(
blob_
, 
blob_size_
, 
ªloc
);

79 
	g∑øm_func
 = 0;

80 
	gˇŒed_func
 = ()
bef‹e_
;

81 i‡(
	gc⁄ãxt_
->
Ælow_ùc
()) {

82 
	g∑øm_func
 = ()
bef‹e_
;

83 
	gˇŒed_func
 = ()
c⁄ãxt_
->
wøµî_bef‹e
();

85 
	gblob_size_
 +
emô_∑ss_∑øm
(()
poöt_
, 
∑øm_func
, 
blob_
, 
blob_size_
);

86 
	gblob_size_
 +
emô_ˇŒ_abs
(
ˇŒed_func
, 
blob_
, 
blob_size_
, 
åue
);

89 
	gblob_size_
 +
emô_ª°‹e
(
blob_
, 
blob_size_
, 
ªloc
);

96 i‡(!
	gªt_addr
 && 
	gfunc_
) {

98 
	gblob_size_
 +
emô_jump_abs
(()
func_
->
addr
(), 
blob_
, 
blob_size_
);

99 
	gEXIT
;

100 } i‡(
	gªt_addr
 && 
	gfunc_
) {

102 
	gblob_size_
 +
emô_ˇŒ_abs
(()
func_
->
addr
(), 
blob_
, 
blob_size_
, 
Ál£
);

105 
	gblob_size_
 +
emô_ˇŒ_‹ig
(()
poöt_
->
block
()->
œ°
(),

106 
‹ig_ˇŒ_ö¢_
->
size
(), 
blob_
, 
blob_size_
);

109 i‡(
	gc⁄ãxt_
->
Ælow_ùc
(Ë|| 
	ga·î_
) {

111 
	gblob_size_
 +
emô_ßve
(
blob_
, 
blob_size_
, 
ªloc
);

114 
	g∑øm_func
 = 0;

115 
	gˇŒed_func
 = ()
a·î_
;

116 i‡(
	gc⁄ãxt_
->
Ælow_ùc
()) {

117 
	g∑øm_func
 = ()
a·î_
;

118 
	gˇŒed_func
 = ()
c⁄ãxt_
->
wøµî_a·î
();

120 
	gblob_size_
 +
emô_∑ss_∑øm
(()
poöt_
, 
∑øm_func
, 
blob_
, 
blob_size_
);

121 
	gblob_size_
 +
emô_ˇŒ_abs
(
ˇŒed_func
, 
blob_
, 
blob_size_
, 
åue
);

124 
	gblob_size_
 +
emô_ª°‹e
(
blob_
, 
blob_size_
, 
ªloc
);

128 
	gblob_size_
 +
emô_jump_abs
(
ªt_addr
, 
blob_
, 
blob_size_
);

130 
	gEXIT
:

132 #i‚de‡
SP_RELEASE


133 
•_debug
("DUMP PATCH AREA (%lu byãsËf‹Öoöà%lx - {", 
blob_size_
, 
poöt_
->
block
()->
œ°
());

134 
•_debug
("%s", 
c⁄ãxt_
->
∑r£r
()->
dump_ö¢
((*)
blob_
, 
blob_size_
).
c_°r
());

135 
•_debug
("}");

138  
	gblob_
;

142 
size_t


143 
	gSpSnù≥t
::
ªloc_block
(
P©chBlock
* 
blk
, * 
buf
, 
size_t
 
off£t
) {

144 * 
	gp
 = 
buf
 + 
off£t
;

145 
Addªss
 
	gˇŒ_addr
 = 
blk
->
œ°
();

147 
	gP©chBlock
::
In¢s
 
ö¢s
;

148 
	gblk
->
gëIn¢s
(
ö¢s
);

149 
	gP©chBlock
::
In¢s
::
ôî©‹
 
i
 = 
ö¢s
.
begö
(); 
	gi
 !ö¢s.
íd
(); i++) {

150 
usög
 
«me•a˚
 
	gDynö°
::
In°ru˘i⁄API
;

152 
Addªss
 
	ga
 = 
i
->
fú°
;

153 
	gIn°ru˘i⁄
::
På
 
ö¢
 = 
i
->
£c⁄d
;

154 
	gp
 +
ªloc_ö¢
(
a
, 
ö¢
, 
ˇŒ_addr
, 
p
);

157  (
	gp
 - (
	gbuf
 + 
	goff£t
));

169 
P©chBlock
*

170 
	gSpSnù≥t
::
•rög_blk
() {

171 i‡(
•rög_blk_
)  spring_blk_;

173 
size_t
 
	gmö_•rögblk_size
 = 
jump_abs_size
() * 2;

174 
P©chBlock
* 
	gˇŒblk
 = 
poöt_
->
block
();

177 
	ga·î_jmp
 = 
ˇŒblk
->
°¨t
() + 2;

178 
boﬁ
 
	gd⁄e
 = 
Ál£
;

181 
P©chBlock
* 
	g•rögblk
 = 
NULL
;

182 
	gph
::
P©chObje˘
* 
obj
 = 
ˇŒblk
->obj();

184 
usög
 
«me•a˚
 
	gDynö°
::
P¨£API
;

185 
CodeObje˘
* 
	gco
 = 
obj
->
co
();

186 
CodeSour˚
* 
	gcs
 = 
co
->
cs
();

187 
	g°d
::
ve˘‹
<
CodeRegi⁄
*> 
ªgi⁄s
 = 
cs
->regions();

190 
	guµî
 = 127 + 
a·î_jmp
 - 
jump_abs_size
();

191 
	glowî
 = -128 + 
a·î_jmp
 - 
jump_abs_size
();

193 
	gi
 = 0; i < 
	gªgi⁄s
.
size
(); i++) {

194 
CodeRegi⁄
* 
	g¸
 = 
ªgi⁄s
[
i
];

195 i‡((
	glowî
 <()
¸
->
low
(Ë&& ()¸->low(Ë< 
uµî
) ||

196 (()
¸
->
low
(Ë<
lowî
 && 
uµî
 < ()¸->
high
()) ||

197 (
lowî
 <()
¸
->
high
(Ë&& ()¸->high(Ë< 
uµî
)

200 
Addªss
 
•™_addr
 = 
lowî
;

202 
	g£t
<
	gBlock
*> 
	gblks
;

203 
	gco
->
födBlocks
(
¸
, 
•™_addr
, 
blks
);

204 i‡(
	gblks
.
size
() == 0) {

205 ++
•™_addr
;

208 
Block
* 
	gb
;

209 
	g£t
<
	gBlock
*>::
ôî©‹
 
bi
 = 
blks
.
begö
(); 
	gbi
 !blks.
íd
(); bi++) {

210 
	gb
 = *
bi
;

212 
size_t
 
	gªl
 = 
b
->
°¨t
(Ë+ 
jump_abs_size
(Ë- 
a·î_jmp
;

213 i‡(!
	g•
::
is_di•8
(
ªl
)) {

214 
•™_addr
 = 
b
->
íd
();

217 
size_t
 
	gs
 = 
b
->
œ°In¢Addr
(Ë- b->
°¨t
();

218 i‡(
	gs
 < 
	gmö_•rögblk_size
) {

219 
	g•™_addr
 = 
b
->
íd
();

222 
P©chBlock
* 
	gpb
 = 
obj
->
gëBlock
(
b
);

225 i‡(
	gpb
->
c⁄èösCÆl
()) {

226 
	g•™_addr
 = 
b
->
íd
();

231 i‡(
	gc⁄ãxt_
->
ö_•rög_£t
(
pb
)) {

232 
	g•™_addr
 = 
b
->
íd
();

235 
	g•rögblk
 = 
pb
;

236 
	gc⁄ãxt_
->
add_•rög
(
pb
);

237 
	gd⁄e
 = 
åue
;

239 } ()
	g•™_addr
 < 
	guµî
);

240 i‡(
	gd⁄e
) ;

244 
	g•rög_blk_
 = 
•rögblk
;

245  
	g•rögblk
;

250 
	gSpSnù≥t
::
•rög
(
Addªss
 
ªt_addr
) {

251 
ph
::
P©chMgrPå
 
mgr
 = 
c⁄ãxt_
->mgr();

252 
	gph
::
AddrS∑˚
* 
as
 = 
mgr
->as();

253 
	g•rög_
 = (*)
as
->
mÆloc
(
poöt_
->
obj
(), 1024, 
°©ic_ˇ°
<
•
::
SpObje˘
*>’oöt_->obj())->
lﬂd_addr
());

254 
	g•rög_size_
 = 0;

257 
	g•rög_size_
 +
ªloc_block
(
•rög_blk_
, 
•rög_
, 0);

260 
	g•rög_size_
 +
emô_jump_abs
(
ªt_addr
, 
•rög_
, 
•rög_size_
);

262 #i‚de‡
SP_RELEASE


263 
•_debug
("DUMP RELOC SPRING INSNS (%lu byãsËf‹Öoöà%lx- {", 
•rög_size_
, 
poöt_
->
block
()->
œ°
());

264 
•_debug
("%s", 
c⁄ãxt_
->
∑r£r
()->
dump_ö¢
((*)
•rög_
, 
•rög_size_
).
c_°r
());

265 
•_debug
("}");

267  
	g•rög_
;

	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
(
	`__WAIT_INT
(°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
‘ë, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
(sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


176 
rußge
;

179 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

180 
rußge
 *
__ußge
Ë
__THROW
;

184 
__END_DECLS


	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_POSIX


95 #unde‡
__USE_POSIX2


96 #unde‡
__USE_POSIX199309


97 #unde‡
__USE_POSIX199506


98 #unde‡
__USE_XOPEN


99 #unde‡
__USE_XOPEN_EXTENDED


100 #unde‡
__USE_UNIX98


101 #unde‡
__USE_XOPEN2K


102 #unde‡
__USE_LARGEFILE


103 #unde‡
__USE_LARGEFILE64


104 #unde‡
__USE_FILE_OFFSET64


105 #unde‡
__USE_BSD


106 #unde‡
__USE_SVID


107 #unde‡
__USE_MISC


108 #unde‡
__USE_ATFILE


109 #unde‡
__USE_GNU


110 #unde‡
__USE_REENTRANT


111 #unde‡
__USE_FORTIFY_LEVEL


112 #unde‡
__FAVOR_BSD


113 #unde‡
__KERNEL_STRICT_NAMES


117 #i‚de‡
_LOOSE_KERNEL_NAMES


118 
	#__KERNEL_STRICT_NAMES


	)

122 
	#__USE_ANSI
 1

	)

131 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


132 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

133 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

135 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

140 #i‡
deföed
 
_BSD_SOURCE
 && \

141 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

142 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

143 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

144 
	#__FAVOR_BSD
 1

	)

148 #ifde‡
_GNU_SOURCE


149 #unde‡
_ISOC99_SOURCE


150 
	#_ISOC99_SOURCE
 1

	)

151 #unde‡
_POSIX_SOURCE


152 
	#_POSIX_SOURCE
 1

	)

153 #unde‡
_POSIX_C_SOURCE


154 
	#_POSIX_C_SOURCE
 200112L

	)

155 #unde‡
_XOPEN_SOURCE


156 
	#_XOPEN_SOURCE
 600

	)

157 #unde‡
_XOPEN_SOURCE_EXTENDED


158 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

159 #unde‡
_LARGEFILE64_SOURCE


160 
	#_LARGEFILE64_SOURCE
 1

	)

161 #unde‡
_BSD_SOURCE


162 
	#_BSD_SOURCE
 1

	)

163 #unde‡
_SVID_SOURCE


164 
	#_SVID_SOURCE
 1

	)

165 #unde‡
_ATFILE_SOURCE


166 
	#_ATFILE_SOURCE
 1

	)

171 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

172 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

173 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

174 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

175 
	#_BSD_SOURCE
 1

	)

176 
	#_SVID_SOURCE
 1

	)

183 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

184 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

185 
	#__USE_ISOC99
 1

	)

190 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

191 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

192 
	#_POSIX_SOURCE
 1

	)

193 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

194 
	#_POSIX_C_SOURCE
 2

	)

195 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

196 
	#_POSIX_C_SOURCE
 199506L

	)

198 
	#_POSIX_C_SOURCE
 200112L

	)

202 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


203 
	#__USE_POSIX
 1

	)

206 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


207 
	#__USE_POSIX2
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

211 
	#__USE_POSIX199309
 1

	)

214 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

215 
	#__USE_POSIX199506
 1

	)

218 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

219 
	#__USE_XOPEN2K
 1

	)

222 #ifdef 
_XOPEN_SOURCE


223 
	#__USE_XOPEN
 1

	)

224 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

225 
	#__USE_XOPEN_EXTENDED
 1

	)

226 
	#__USE_UNIX98
 1

	)

227 #unde‡
_LARGEFILE_SOURCE


228 
	#_LARGEFILE_SOURCE
 1

	)

229 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

230 
	#__USE_XOPEN2K
 1

	)

231 #unde‡
__USE_ISOC99


232 
	#__USE_ISOC99
 1

	)

235 #ifde‡
_XOPEN_SOURCE_EXTENDED


236 
	#__USE_XOPEN_EXTENDED
 1

	)

241 #ifde‡
_LARGEFILE_SOURCE


242 
	#__USE_LARGEFILE
 1

	)

245 #ifde‡
_LARGEFILE64_SOURCE


246 
	#__USE_LARGEFILE64
 1

	)

249 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

250 
	#__USE_FILE_OFFSET64
 1

	)

253 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


254 
	#__USE_MISC
 1

	)

257 #ifdef 
_BSD_SOURCE


258 
	#__USE_BSD
 1

	)

261 #ifdef 
_SVID_SOURCE


262 
	#__USE_SVID
 1

	)

265 #ifdef 
_ATFILE_SOURCE


266 
	#__USE_ATFILE
 1

	)

269 #ifdef 
_GNU_SOURCE


270 
	#__USE_GNU
 1

	)

273 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


274 
	#__USE_REENTRANT
 1

	)

277 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

278 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0 \

279 && (
__GNUC_PREREQ
 (4, 1) \

280 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (4, 0)) \

281 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (3, 4) \

282 && 
	g__GNUC_MINOR__
 == 4 \

283 && (
__GNUC_PATCHLEVEL__
 > 2 \

284 || (
__GNUC_PATCHLEVEL__
 =2 && 
__GNUC_RH_RELEASE__
 >= 8))))

285 #i‡
_FORTIFY_SOURCE
 > 1

286 
	#__USE_FORTIFY_LEVEL
 2

	)

288 
	#__USE_FORTIFY_LEVEL
 1

	)

291 
	#__USE_FORTIFY_LEVEL
 0

	)

295 
	#__STDC_IEC_559__
 1

	)

296 
	#__STDC_IEC_559_COMPLEX__
 1

	)

299 
	#__STDC_ISO_10646__
 200009L

	)

307 #unde‡
__GNU_LIBRARY__


308 
	#__GNU_LIBRARY__
 6

	)

312 
	#__GLIBC__
 2

	)

313 
	#__GLIBC_MINOR__
 5

	)

315 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

316 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

319 #i‡
deföed
 
__GNUC__
 \

320 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

321 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

322 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

323 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

327 #i‚de‡
__ASSEMBLER__


328 #i‚de‡
_SYS_CDEFS_H


329 
	~<sys/cdefs.h
>

334 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


335 
	#__USE_LARGEFILE
 1

	)

336 
	#__USE_LARGEFILE64
 1

	)

342 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

343 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


344 
	#__USE_EXTERN_INLINES
 1

	)

352 
	~<gnu/°ubs.h
>

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


346 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

348 
	~<bôs/sig°ack.h
>

349 #ifde‡
__USE_XOPEN


351 
	~<sys/uc⁄ãxt.h
>

357 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

358 
__THROW
 
__©åibuã_dïªˇãd__
;

362 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

363 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

367 #ifde‡
__USE_XOPEN_EXTENDED


371 
	$sighﬁd
 (
__sig
Ë
__THROW
;

374 
	$sigªl£
 (
__sig
Ë
__THROW
;

377 
	$sigign‹e
 (
__sig
Ë
__THROW
;

380 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

383 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


386 
	~<bôs/±hªadty≥s.h
>

387 
	~<bôs/sigthªad.h
>

394 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

396 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

400 
__END_DECLS


	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1,

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


166 
	mRUSAGE_THREAD
 = 1

167 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

169 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

173 
	#__√ed_timevÆ


	)

174 
	~<bôs/time.h
>

177 
	srußge


180 
timevÆ
 
	mru_utime
;

182 
timevÆ
 
	mru_°ime
;

184 
	mru_maxrss
;

187 
	mru_ixrss
;

189 
	mru_idrss
;

191 
	mru_i§ss
;

194 
	mru_möÊt
;

196 
	mru_majÊt
;

198 
	mru_nsw≠
;

201 
	mru_öblock
;

203 
	mru_oublock
;

205 
	mru_msg¢d
;

207 
	mru_msgrcv
;

209 
	mru_nsig«ls
;

213 
	mru_nvcsw
;

216 
	mru_nivcsw
;

220 
	#PRIO_MIN
 -20

	)

221 
	#PRIO_MAX
 20

	)

225 
	e__¥i‹ôy_which


227 
	mPRIO_PROCESS
 = 0,

228 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

229 
	mPRIO_PGRP
 = 1,

230 
	#PRIO_PGRP
 
PRIO_PGRP


	)

231 
	mPRIO_USER
 = 2

232 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

119 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

120 #ñi‡
__WORDSIZE
 == 64

121 
	t__SQUAD_TYPE
 

	)

122 
	t__UQUAD_TYPE
 

	)

123 
	t__SWORD_TYPE
 

	)

124 
	t__UWORD_TYPE
 

	)

125 
	t__SLONG32_TYPE
 

	)

126 
	t__ULONG32_TYPE
 

	)

127 
	t__S64_TYPE
 

	)

128 
	t__U64_TYPE
 

	)

130 
	t__STD_TYPE
 

	)

134 
	~<bôs/ty≥sizes.h
>

137 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

138 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

139 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

140 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

141 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

142 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

143 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

144 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

145 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

146 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

147 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

148 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

149 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

150 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

151 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

152 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

153 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

154 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

156 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

157 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

158 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

161 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

164 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

167 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

172 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

173 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

176 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

177 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

180 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

181 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

183 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

187 
__off64_t
 
	t__loff_t
;

188 
__quad_t
 *
	t__qaddr_t
;

189 *
	t__ˇddr_t
;

192 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

195 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

198 #unde‡
__STD_TYPE


	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

138 #i‡
__GNUC_PREREQ
 (2,97)

140 
	#__Êex¨r
 []

	)

142 #ifde‡
__GNUC__


143 
	#__Êex¨r
 [0]

	)

145 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

146 
	#__Êex¨r
 []

	)

149 
	#__Êex¨r
 [1]

	)

165 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

167 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

168 #ifde‡
__˝lu•lus


169 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

170 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

172 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

173 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

175 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

176 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

189 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

190 
	#__©åibuã__
(
xyz
Ë

	)

196 #i‡
__GNUC_PREREQ
 (2,96)

197 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

199 
	#__©åibuã_mÆloc__


	)

205 #i‡
__GNUC_PREREQ
 (2,96)

206 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

208 
	#__©åibuã_puª__


	)

214 #i‡
__GNUC_PREREQ
 (3,1)

215 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

216 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

218 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

219 
	#__©åibuã_noölöe__


	)

223 #i‡
__GNUC_PREREQ
 (3,2)

224 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

226 
	#__©åibuã_dïªˇãd__


	)

235 #i‡
__GNUC_PREREQ
 (2,8)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

238 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

245 #i‡
__GNUC_PREREQ
 (2,97)

246 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

247 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

249 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

254 #i‡
__GNUC_PREREQ
 (3,3)

255 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

257 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡
__GNUC_PREREQ
 (3,4)

263 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

264 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

265 #i‡
__USE_FORTIFY_LEVEL
 > 0

266 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

269 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

271 #i‚de‡
__wur


272 
	#__wur


	)

276 #i‡
__GNUC_PREREQ
 (3,2)

277 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

279 
	#__Æways_ölöe
 
__ölöe


	)

286 #i‡!
__GNUC_PREREQ
 (2,8)

287 
	#__exãnsi⁄__


	)

291 #i‡!
__GNUC_PREREQ
 (2,92)

292 
	#__ª°ri˘


	)

298 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


299 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

301 #ifde‡
__GNUC__


302 
	#__ª°ri˘_¨r


	)

304 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

305 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

308 
	#__ª°ri˘_¨r


	)

313 
	~<bôs/w‹dsize.h
>

315 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


316 
	#__LDBL_COMPAT
 1

	)

317 #ifde‡
__REDIRECT


318 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

319 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

320 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

321 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

322 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

323 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

324 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

325 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

326 
	#__LDBL_REDIR_DECL
(
«me
) \

327 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

330 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


331 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

332 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

333 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

334 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

335 
	#__LDBL_REDIR_DECL
(
«me
)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_ªm_pio2l


	)

12 
	#__°ub___kî√l_söl


	)

13 
	#__°ub___kî√l_è∆


	)

14 
	#__°ub_bdÊush


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_„upd©ìnv


	)

20 
	#__°ub_gëmsg


	)

21 
	#__°ub_gây


	)

22 
	#__°ub_lchmod


	)

23 
	#__°ub_lutimes


	)

24 
	#__°ub_putmsg


	)

25 
	#__°ub_ªvoke


	)

26 
	#__°ub_£éogö


	)

27 
	#__°ub_sigªtu∫


	)

28 
	#__°ub_s°k


	)

29 
	#__°ub_°ty


	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@
1
.
1
/usr/include
41
927
SpAddrSpace.C
SpAgent.C
SpArch-i386.C
SpArch-x86_64.C
SpContext.C
SpEvent.C
SpInstrumenter.C
SpIpcMgr.C
SpParser.C
SpPayload.C
SpPointMaker.h
SpPropeller.C
SpSnippet.C
/usr/include/sys/wait.h
/usr/include/bits/siginfo.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/signal.h
/usr/include/sys/resource.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/types.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/bits/endian.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/xlocale.h
