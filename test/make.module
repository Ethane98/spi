# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file, or if you want to use
# a copy of Google Test at a different location.
GTEST_DIR = ../gmock/gtest

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
GMOCK_DIR = ../gmock

# Where to find user code.

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(GMOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

all : unit run_all copy agent aux

# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	@echo "Building gtest"
	@$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	@echo "Building gmock"
	@$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	@$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	@$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	@$(AR) $(ARFLAGS) $@ $^

# Builds tests.
include ../../make.config 
include ../../make.flag.tmpl

#==============================================================
# Unit tests
#==============================================================

SP_FLAGS   =  $(IJ_FLAGS) \
              $(IJ_IFLAGS) \
              $(AG_FLAGS) \
              $(AG_IFLAGS) \
              $(SERVER_FLAGS) \
              $(SERVER_IFLAGS) \
              -I$(SP_DIR)/h

SP_LDFLAGS =  $(IJ_LDFLAGS) \
              -L$(SP_DIR)/$(PLATFORM) \
              -lagent

TEST_DIR   = ../src/unit_test
TEST_SRCS  = $(wildcard $(TEST_DIR)/*.C)
TESTS_OBJ  = $(notdir $(TEST_SRCS:%.C=%.o))
TESTS      = $(notdir $(TEST_SRCS:%.C=%))

unit: $(TESTS)

%.o: $(TEST_DIR)/%.C gmock_main.a
	@echo "Compiling $*.o"
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(TEST_DIR)/$*.C $(SP_FLAGS)

%: %.o gmock_main.a
	@echo "Linking $*"
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -o $@ $*.o gmock_main.a $(SP_LDFLAGS)
#	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -o $@ $*.o gmock_main.a 

RUNALL    = runall
run_all: $(RUNALL)
$(RUNALL): $(TESTS_OBJ) gmock_main.a
	@echo "Building $@"
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -o $@ $(TESTS_OBJ) gmock_main.a $(SP_LDFLAGS)

#==============================================================
# Agent
#==============================================================
AGENT_DIR             = ../src/agent
AGENT_SRCS           += $(wildcard $(AGENT_DIR)/*.C)
AGENT_OBJS            = $(notdir $(AGENT_SRCS:%.C=%.o))
AGENT_SO              = $(notdir $(AGENT_SRCS:%.C=%.so))

AG_FLAGS             += -g 
AG_LDFLAGS           += -L$(SP_DIR)/$(PLATFORM)
AG_LDFLAGS           += -lagent -ldl

AG_DEP  = .AG_DEPENDS
$(shell if test -f $(AG_DEP); then true; else \
$(CXX) -MM $(AG_IFLAGS) $(AG_FLAGS) $(AGENT_SRCS) > $(AG_DEP);\
fi);\
include $(AG_DEP)


agent: $(AGENT_SO)

$(AGENT_OBJS): %.o : $(AGENT_SRCS)
	@echo "Compiling $@"
	@$(CXX) -o $@ $(AGENT_DIR)/$*.C $(AG_IFLAGS) $(AG_FLAGS) -c
$(AGENT_SO): %.so : $(AGENT_OBJS)
	@echo "Linking $@"
	@$(CXX) -o $@ $*.o $(AG_LDFLAGS) -shared

#==============================================================
# Auxiliary stuffs, e.g., server for testing
#==============================================================
AUX_DIR             = ../src/aux
AUX_SRCS           += $(wildcard $(AUX_DIR)/*.c)
AUX_OBJS            = $(notdir $(AUX_SRCS:%.c=%.o))
AUX_EXE             = $(notdir $(AUX_SRCS:%.c=%))

AUX_FLAGS             += -g
AUX_LDFLAGS           += -ldl

aux: $(AUX_EXE)
$(AUX_OBJS): %.o : $(AUX_SRCS)
	@echo "Compiling $@"
	@$(CXX) -o $@ $(AUX_DIR)/$*.c $(AUX_IFLAGS) $(AUX_FLAGS) -c
$(AUX_EXE): % : $(AUX_OBJS)
	@echo "Linking $@"
	@$(CXX) -o $@ $*.o $(AUX_LDFLAGS)


#==============================================================
# Other stuffs
#==============================================================
clean :
	rm -f $(TESTS) $(RUNALL) gmock.a gmock_main.a *.o *.so ./Injector $(AUX_EXE)

copy:
	@cp -f $(SP_DIR)/$(PLATFORM)/*.so $(SP_DIR)/$(PLATFORM)/Injector ./
